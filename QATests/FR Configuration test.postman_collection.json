{
	"info": {
		"_postman_id": "815f180e-d4f0-469c-9d1d-c5f52faa737c",
		"name": "FR Configuration test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Managed Objects",
			"item": [
				{
					"name": "Access Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"const JSONResponse = JSON.parse(responseBody);",
									"",
									"pm.environment.set(\"access_token\",JSONResponse.access_token);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": false
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "client_id",
									"value": "{{ClientId}}",
									"description": "The ID of the Public OAuth Client.",
									"type": "text"
								},
								{
									"key": "response_type",
									"value": "token",
									"description": "Response types the client will support and use.",
									"type": "text",
									"disabled": true
								},
								{
									"key": "scope",
									"value": "fr:idm:*",
									"description": "Strings that are presented to the user for approval and included in tokens so that the protected resource may make decisions about what to give access to.",
									"type": "text"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "text"
								},
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{platformUrl}}/am/oauth2/{{realm}}/access_token",
							"host": [
								"{{platformUrl}}"
							],
							"path": [
								"am",
								"oauth2",
								"{{realm}}",
								"access_token"
							],
							"query": [
								{
									"key": "auth_chain",
									"value": "PasswordGrant",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Config  Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"const jsonData = JSON.parse(responseBody);\r",
									"const companyObj_index = pm.collectionVariables.get(\"companyObj_index\");\r",
									"const alpha_user_Obj_index = pm.collectionVariables.get(\"alpha_user_Obj_index\");\r",
									"\r",
									"//deep comparing two objects \r",
									"function deepEqual(object1, object2) {\r",
									"    const keys1 = Object.keys(object1);\r",
									"    const keys2 = Object.keys(object2);\r",
									"\r",
									"    if (keys1.length !== keys2.length) {\r",
									"        return false;\r",
									"    }\r",
									"\r",
									"    for (const key of keys1) {\r",
									"        const val1 = object1[key];\r",
									"        const val2 = object2[key];\r",
									"        const areObjects = isObject(val1) && isObject(val2);\r",
									"        if (\r",
									"            areObjects && !deepEqual(val1, val2) ||\r",
									"            !areObjects && val1 !== val2\r",
									"        ) {\r",
									"            return false;\r",
									"        }\r",
									"    }\r",
									"\r",
									"    return true;\r",
									"}\r",
									"\r",
									"//validate if object is valid\r",
									"function isObject(object) {\r",
									"    return object != null && typeof object === 'object';\r",
									"}\r",
									"\r",
									"pm.test(\"(Status code is 200)\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//validating that the response returns correct number of mapped objects\r",
									"pm.test(\"corrent number of mapped objects retuned in the response\", () => {\r",
									"    const response_mapped_object_length = jsonData.objects.length;\r",
									"    const mapped_object_count = parseInt(pm.collectionVariables.get(\"mapped_object_count\"));\r",
									"\r",
									"    pm.expect(mapped_object_count).to.eql(response_mapped_object_length);\r",
									"});\r",
									"\r",
									"//validating company object icon class value \r",
									"pm.test(\"validate company object iconclass\", () => {\r",
									"    const iconclass = jsonData.objects[companyObj_index].iconClass;\r",
									"\r",
									"    pm.expect(iconclass).to.be.eql(pm.collectionVariables.get(\"companyObj_iconClass\"));\r",
									"});\r",
									"\r",
									"//validating company object name \r",
									"pm.test(\"validate company object `name`\", () => {\r",
									"    const name = jsonData.objects[companyObj_index].name;\r",
									"\r",
									"    pm.expect(name).to.be.eql(pm.collectionVariables.get(\"companyObj_name\"));\r",
									"});\r",
									"\r",
									"//validating company object schema's title \r",
									"pm.test(\"validate company object schema's `title`\", () => {\r",
									"    const title_actual = jsonData.objects[companyObj_index].schema.title;\r",
									"    const title_expected = pm.collectionVariables.get(\"companyObj_schema_title\");\r",
									"\r",
									"    pm.expect(title_actual).to.be.eql(title_expected);\r",
									"});\r",
									"\r",
									"//validating company object schema's description\r",
									"pm.test(\"validate company object schema's `description`\", () => {\r",
									"    const description = jsonData.objects[companyObj_index].schema.description;\r",
									"\r",
									"    pm.expect(description).to.be.eql(pm.collectionVariables.get(\"companyObj_schema_description\"));\r",
									"});\r",
									"\r",
									"//validating company object schema's icon\r",
									"pm.test(\"validate company object `schema's icon`\", () => {\r",
									"    const icon = jsonData.objects[companyObj_index].schema.icon;\r",
									"    pm.expect(icon).to.be.eql(pm.collectionVariables.get(\"companyObj_schema_icon\"));\r",
									"});\r",
									"\r",
									"//validating properties `name` values of company object \r",
									"pm.test(\"validate company object property `name` config \", () => {\r",
									"\r",
									"    const root = jsonData.objects[companyObj_index].schema.properties.name;\r",
									"\r",
									"    const deleteQueryConfig_actual = JSON.stringify(root.deleteQueryConfig);\r",
									"    const description_actual = root.description;\r",
									"    const isVirtual_actual = JSON.stringify(root.isVirtual);\r",
									"    const searchable_actual = JSON.stringify(root.searchable);\r",
									"    const title_actual = root.title;\r",
									"    const type_actual = root.type;\r",
									"    const userEditable_actual = JSON.stringify(root.userEditable);\r",
									"    const viewable_actual = JSON.stringify(root.viewable);\r",
									"\r",
									"    const deleteQueryConfig_expected = pm.collectionVariables.get(\"companyObj_property_name_deleteQueryConfig\");\r",
									"    const description_expected = pm.collectionVariables.get(\"companyObj_property_name_description\");\r",
									"    const isVirtual_expected = pm.collectionVariables.get(\"companyObj_property_name_isVirtual\");\r",
									"    const searchable_expected = pm.collectionVariables.get(\"companyObj_property_name_searchable\");\r",
									"    const title_expected = pm.collectionVariables.get(\"companyObj_property_name_title\");\r",
									"    const type_expected = pm.collectionVariables.get(\"companyObj_property_name_type\");\r",
									"    const userEditable_expected = pm.collectionVariables.get(\"companyObj_property_name_userEditable\");\r",
									"    const viewable_expected = pm.collectionVariables.get(\"companyObj_property_name_viewable\");\r",
									"\r",
									"    pm.expect(deleteQueryConfig_expected).to.be.eql(deleteQueryConfig_actual);\r",
									"    pm.expect(description_expected).to.be.eql(description_actual);\r",
									"    pm.expect(isVirtual_expected).to.be.eql(isVirtual_actual);\r",
									"    pm.expect(searchable_expected).to.be.eql(searchable_actual);\r",
									"    pm.expect(title_expected).to.be.eql(title_actual);\r",
									"    pm.expect(type_expected).to.be.eql(type_actual);\r",
									"    pm.expect(userEditable_expected).to.be.eql(userEditable_actual);\r",
									"    pm.expect(viewable_expected).to.be.eql(viewable_actual);\r",
									"});\r",
									"\r",
									"//validating properties `number` values of company object \r",
									"pm.test(\"validate company object property `number` config \", () => {\r",
									"\r",
									"    const root = jsonData.objects[companyObj_index].schema.properties.number;\r",
									"\r",
									"    const deleteQueryConfig_actual = JSON.stringify(root.deleteQueryConfig);\r",
									"    const description_actual = root.description;\r",
									"    const isVirtual_actual = JSON.stringify(root.isVirtual);\r",
									"    const searchable_actual = JSON.stringify(root.searchable);\r",
									"    const title_actual = root.title;\r",
									"    const type_actual = root.type;\r",
									"    const userEditable_actual = JSON.stringify(root.userEditable);\r",
									"    const viewable_actual = JSON.stringify(root.viewable);\r",
									"\r",
									"    const deleteQueryConfig_expected = pm.collectionVariables.get(\"companyObj_property_number_deleteQueryConfig\");\r",
									"    const description_expected = pm.collectionVariables.get(\"companyObj_property_number_description\");\r",
									"    const isVirtual_expected = pm.collectionVariables.get(\"companyObj_property_number_isVirtual\");\r",
									"    const searchable_expected = pm.collectionVariables.get(\"companyObj_property_number_searchable\");\r",
									"    const title_expected = pm.collectionVariables.get(\"companyObj_property_number_title\");\r",
									"    const type_expected = pm.collectionVariables.get(\"companyObj_property_number_type\");\r",
									"    const userEditable_expected = pm.collectionVariables.get(\"companyObj_property_number_userEditable\");\r",
									"    const viewable_expected = pm.collectionVariables.get(\"companyObj_property_number_viewable\");\r",
									"\r",
									"    pm.expect(deleteQueryConfig_expected).to.be.eql(deleteQueryConfig_actual);\r",
									"    pm.expect(description_expected).to.be.eql(description_actual);\r",
									"    pm.expect(isVirtual_expected).to.be.eql(isVirtual_actual);\r",
									"    pm.expect(searchable_expected).to.be.eql(searchable_actual);\r",
									"    pm.expect(title_expected).to.be.eql(title_actual);\r",
									"    pm.expect(type_expected).to.be.eql(type_actual);\r",
									"    pm.expect(userEditable_expected).to.be.eql(userEditable_actual);\r",
									"    pm.expect(viewable_expected).to.be.eql(viewable_actual);\r",
									"});\r",
									"\r",
									"//validating properties `status` values of company object \r",
									"pm.test(\"validate company object property `status` config \", () => {\r",
									"\r",
									"    const root = jsonData.objects[companyObj_index].schema.properties.status;\r",
									"\r",
									"    const searchable_actual = JSON.stringify(root.searchable);\r",
									"    const title_actual = root.title;\r",
									"    const type_actual = root.type;\r",
									"    const userEditable_actual = JSON.stringify(root.userEditable);\r",
									"    const viewable_actual = JSON.stringify(root.viewable);\r",
									"\r",
									"    const searchable_expected = pm.collectionVariables.get(\"companyObj_property_status_searchable\");\r",
									"    const title_expected = pm.collectionVariables.get(\"companyObj_property_status_title\");\r",
									"    const type_expected = pm.collectionVariables.get(\"companyObj_property_status_type\");\r",
									"    const userEditable_expected = pm.collectionVariables.get(\"companyObj_property_status_userEditable\");\r",
									"    const viewable_expected = pm.collectionVariables.get(\"companyObj_property_status_viewable\");\r",
									"\r",
									"    pm.expect(searchable_expected).to.be.eql(searchable_actual);\r",
									"    pm.expect(title_expected).to.be.eql(title_actual);\r",
									"    pm.expect(type_expected).to.be.eql(type_actual);\r",
									"    pm.expect(userEditable_expected).to.be.eql(userEditable_actual);\r",
									"    pm.expect(viewable_expected).to.be.eql(viewable_actual);\r",
									"});\r",
									"\r",
									"//validating properties `type` values of company object \r",
									"pm.test(\"validate company object property `type` config \", () => {\r",
									"    const searchable_actual = JSON.stringify(jsonData.objects[companyObj_index].schema.properties.type.searchable);\r",
									"    const title_actual = jsonData.objects[companyObj_index].schema.properties.type.title;\r",
									"    const type_actual = jsonData.objects[companyObj_index].schema.properties.type.type;\r",
									"    const userEditable_actual = JSON.stringify(jsonData.objects[companyObj_index].schema.properties.type.userEditable);\r",
									"    const viewable_actual = JSON.stringify(jsonData.objects[companyObj_index].schema.properties.type.viewable);\r",
									"\r",
									"    const searchable_expected = pm.collectionVariables.get(\"companyObj_property_type_searchable\");\r",
									"    const title_expected = pm.collectionVariables.get(\"companyObj_property_type_title\");\r",
									"    const type_expected = pm.collectionVariables.get(\"companyObj_property_type_type\");\r",
									"    const userEditable_expected = pm.collectionVariables.get(\"companyObj_property_type_userEditable\");\r",
									"    const viewable_expected = pm.collectionVariables.get(\"companyObj_property_type_viewable\");\r",
									"\r",
									"    pm.expect(searchable_expected).to.be.eql(searchable_actual);\r",
									"    pm.expect(title_expected).to.be.eql(title_actual);\r",
									"    pm.expect(type_expected).to.be.eql(type_actual);\r",
									"    pm.expect(userEditable_expected).to.be.eql(userEditable_actual);\r",
									"    pm.expect(viewable_expected).to.be.eql(viewable_actual);\r",
									"});\r",
									"\r",
									"\r",
									"//validating properties `authorised User` values of company object \r",
									"pm.test(\"validate company object property `authorised User` config \", () => {\r",
									"\r",
									"    const root = jsonData.objects[companyObj_index].schema.properties.authorisedUsers;\r",
									"\r",
									"    const deleteQueryConfig_actual = JSON.stringify(root.deleteQueryConfig);\r",
									"    const description_actual = root.description;\r",
									"    const isVirtual_actual = JSON.stringify(root.isVirtual);\r",
									"    const minLength_actual = JSON.stringify(root.minLength);\r",
									"    const policies_actual = root.policies;\r",
									"    const referencedObjectFields_actual = root.referencedObjectFields;\r",
									"    const referencedRelationshipFields_actual = root.referencedRelationshipFields;\r",
									"    const requiredByParent_actual = JSON.stringify(root.requiredByParent);\r",
									"    const returnByDefault_actual = JSON.stringify(root.returnByDefault);\r",
									"    const searchable_actual = JSON.stringify(root.searchable);\r",
									"    const title_actual = root.title;\r",
									"    const type_actual = root.type;\r",
									"    const userEditable_actual = JSON.stringify(root.userEditable);\r",
									"    const viewable_actual = JSON.stringify(root.viewable);\r",
									"\r",
									"    const deleteQueryConfig_expected = pm.collectionVariables.get(\"companyObj_property_authorisedUsers_deleteQueryConfig\");\r",
									"    const description_expected = pm.collectionVariables.get(\"companyObj_property_authorisedUsers_description\");\r",
									"    const isVirtual_expected = pm.collectionVariables.get(\"companyObj_property_authorisedUsers_isVirtual\");\r",
									"    const minLength_expected = pm.collectionVariables.get(\"companyObj_property_authorisedUsers_minLength\");\r",
									"    const referencedObjectFields_expected = pm.collectionVariables.get(\"companyObj_property_authorisedUsers_referencedObjectFields\");\r",
									"    const referencedRelationshipFields_expected = pm.collectionVariables.get(\"companyObj_property_authorisedUsers_referencedRelationshipFields\");\r",
									"    const requiredByParent_expected = pm.collectionVariables.get(\"companyObj_property_authorisedUsers_requiredByParent\");\r",
									"    const returnByDefault_expected = pm.collectionVariables.get(\"companyObj_property_authorisedUsers_returnByDefault\");\r",
									"    const searchable_expected = pm.collectionVariables.get(\"companyObj_property_authorisedUsers_searchable\");\r",
									"    const title_expected = pm.collectionVariables.get(\"companyObj_property_authorisedUsers_title\");\r",
									"    const type_expected = pm.collectionVariables.get(\"companyObj_property_authorisedUsers_type\");\r",
									"    const userEditable_expected = pm.collectionVariables.get(\"companyObj_property_authorisedUsers_userEditable\");\r",
									"    const viewable_expected = pm.collectionVariables.get(\"companyObj_property_authorisedUsers_viewable\");\r",
									"\r",
									"\r",
									"    pm.expect(deleteQueryConfig_expected).to.be.eql(deleteQueryConfig_actual);\r",
									"    pm.expect(description_expected).to.be.eql(description_actual);\r",
									"    pm.expect(isVirtual_expected).to.be.eql(isVirtual_actual);\r",
									"\r",
									"    //mininum length\r",
									"    if (minLength_actual == null)\r",
									"        pm.expect(JSON.parse(minLength_expected)).to.be.null;\r",
									"    else\r",
									"        pm.expect(minLength_expected).to.be.eql(minLength_actual);\r",
									"\r",
									"    //policies for authoriseduser property \r",
									"    pm.expect(policies_actual).to.be.empty;\r",
									"\r",
									"    //reference object fields\r",
									"    if (referencedObjectFields_actual == null)\r",
									"        pm.expect(JSON.parse(referencedObjectFields_expected)).to.be.null;\r",
									"    else\r",
									"        pm.expect(referencedObjectFields_expected).to.be.eql(referencedObjectFields_actual);\r",
									"\r",
									"    //referenced relationships fields\r",
									"    if (referencedRelationshipFields_actual == null)\r",
									"        pm.expect(JSON.parse(referencedRelationshipFields_expected)).to.be.null;\r",
									"    else\r",
									"        pm.expect(referencedRelationshipFields_expected).to.be.eql(referencedRelationshipFields_actual);\r",
									"\r",
									"    pm.expect(requiredByParent_expected).to.be.eql(requiredByParent_actual);\r",
									"    pm.expect(returnByDefault_expected).to.be.eql(returnByDefault_actual);\r",
									"    pm.expect(searchable_expected).to.be.eql(searchable_actual);\r",
									"    pm.expect(title_expected).to.be.eql(title_actual);\r",
									"    pm.expect(type_expected).to.be.eql(type_actual);\r",
									"    pm.expect(userEditable_expected).to.be.eql(userEditable_actual);\r",
									"    pm.expect(viewable_expected).to.be.eql(viewable_actual);\r",
									"    pm.expect()\r",
									"});\r",
									"\r",
									"//validating properties `authorised User -> Items` values of company object \r",
									"pm.test(\"validate company object property `authorised User -> Items` config \", () => {\r",
									"\r",
									"    const root = jsonData.objects[companyObj_index].schema.properties.authorisedUsers.items;\r",
									"\r",
									"    const notifySelf_actual = JSON.stringify(root.notifySelf);\r",
									"    const reversePropertyName_actual = root.reversePropertyName;\r",
									"    const reverseRelationship_actual = JSON.stringify(root.reverseRelationship);\r",
									"    const type_actual = root.type;\r",
									"    const validate_actual = JSON.stringify(root.validate);\r",
									"\r",
									"    const notifySelf_expected = pm.collectionVariables.get(\"companyObj_property_authorisedUsers_items_notifySelf\");\r",
									"    const reversePropertyName_expected = pm.collectionVariables.get(\"companyObj_property_authorisedUsers_items_reversePropertyName\");\r",
									"    const reverseRelationship_expected = pm.collectionVariables.get(\"companyObj_property_authorisedUsers_items_reverseRelationship\");\r",
									"    const type_expected = pm.collectionVariables.get(\"companyObj_property_authorisedUsers_items_type\");\r",
									"    const validate_expected = pm.collectionVariables.get(\"companyObj_property_authorisedUsers_items_validate\");\r",
									"\r",
									"    pm.expect(notifySelf_expected).to.be.eql(notifySelf_actual);\r",
									"    pm.expect(reversePropertyName_expected).to.be.eql(reversePropertyName_actual);\r",
									"    pm.expect(reverseRelationship_expected).to.be.eql(reverseRelationship_actual);\r",
									"    pm.expect(type_expected).to.be.eql(type_actual);\r",
									"    pm.expect(validate_expected).to.be.eql(validate_actual);\r",
									"\r",
									"});\r",
									"\r",
									"//validating properties `authorised User -> Items -> properties` values of company object \r",
									"pm.test(\"validate company object property `authorised User -> Items -> properties` config \", () => {\r",
									"\r",
									"    const root = jsonData.objects[companyObj_index].schema.properties.authorisedUsers.items.properties;\r",
									"\r",
									"    const _ref_type_actual = root._ref.type;\r",
									"    const _refProperties_type_actual = root._refProperties.type;\r",
									"\r",
									"    //Actual ID property\r",
									"    const _refProperties_properties_id_propName_actual = root._refProperties.properties._id.propName;\r",
									"    const _refProperties_properties_id_required_actual = JSON.stringify(root._refProperties.properties._id.required);\r",
									"    const _refProperties_properties_id_type_actual = root._refProperties.properties._id.type;\r",
									"\r",
									"    //Actual Permission Admin property\r",
									"    const _refProperties_properties_permissionAdmin_label_actual = root._refProperties.properties.permissionAdmin.label;\r",
									"    const _refProperties_properties_permissionAdmin_propName_actual = root._refProperties.properties.permissionAdmin.propName;\r",
									"    const _refProperties_properties_permissionAdmin_required_actual = JSON.stringify(root._refProperties.properties.permissionAdmin.required);\r",
									"    const _refProperties_properties_permissionAdmin_type_actual = root._refProperties.properties.permissionAdmin.type;\r",
									"\r",
									"    //Actual Permission Filling property\r",
									"    const _refProperties_properties_permissionFilling_label_actual = root._refProperties.properties.permissionFiling.label;\r",
									"    const _refProperties_properties_permissionFilling_propName_actual = root._refProperties.properties.permissionFiling.propName;\r",
									"    const _refProperties_properties_permissionFilling_required_actual = JSON.stringify(root._refProperties.properties.permissionFiling.required);\r",
									"    const _refProperties_properties_permissionFilling_type_actual = root._refProperties.properties.permissionFiling.type;\r",
									"\r",
									"    //Actual Permission Update property \r",
									"    const _refProperties_properties_permissionUpdate_label_actual = root._refProperties.properties.permissionUpdate.label;\r",
									"    const _refProperties_properties_permissionUpdate_propName_actual = root._refProperties.properties.permissionUpdate.propName;\r",
									"    const _refProperties_properties_permissionUpdate_required_actual = JSON.stringify(root._refProperties.properties.permissionUpdate.required);\r",
									"    const _refProperties_properties_permissionUpdate_type_actual = root._refProperties.properties.permissionUpdate.type;\r",
									"\r",
									"\r",
									"    const _ref_type_expected = pm.collectionVariables.get(\"companyObj_property_authorisedUsers_items_properties_ref_type\");\r",
									"    const _refProperties_type_expected = pm.collectionVariables.get(\"companyObj_property_authorisedUsers_items_properties_refProperties_type\");\r",
									"\r",
									"    //Expected ID property\r",
									"    const _refProperties_properties_id_propName_expected = pm.collectionVariables.get(\"companyObj_property_authorisedUsers_items_properties_refProperties_Properties_id_PropName\");\r",
									"    const _refProperties_properties_id_required_expected = pm.collectionVariables.get(\"companyObj_property_authorisedUsers_items_properties_refProperties_Properties_id_required\");\r",
									"    const _refProperties_properties_id_type_expected = pm.collectionVariables.get(\"companyObj_property_authorisedUsers_items_properties_refProperties_Properties_id_type\");\r",
									"\r",
									"    //Expected Permission Admin property\r",
									"    const _refProperties_properties_permissionAdmin_label_expected = pm.collectionVariables.get(\"companyObj_property_authorisedUsers_items_properties_refProperties_Properties_permissionAdmin_label\");\r",
									"    const _refProperties_properties_permissionAdmin_propName_expected = pm.collectionVariables.get(\"companyObj_property_authorisedUsers_items_properties_refProperties_Properties_permissionAdmin_propName\");\r",
									"    const _refProperties_properties_permissionAdmin_required_expected = pm.collectionVariables.get(\"companyObj_property_authorisedUsers_items_properties_refProperties_Properties_permissionAdmin_required\");\r",
									"    const _refProperties_properties_permissionAdmin_type_expected = pm.collectionVariables.get(\"companyObj_property_authorisedUsers_items_properties_refProperties_Properties_permissionFiling_type\");\r",
									"\r",
									"    //Expected Permission Filling property\r",
									"    const _refProperties_properties_permissionFilling_label_expected = pm.collectionVariables.get(\"companyObj_property_authorisedUsers_items_properties_refProperties_Properties_permissionFiling_label\");\r",
									"    const _refProperties_properties_permissionFilling_propName_expected = pm.collectionVariables.get(\"companyObj_property_authorisedUsers_items_properties_refProperties_Properties_permissionFiling_propName\");\r",
									"    const _refProperties_properties_permissionFilling_required_expected = pm.collectionVariables.get(\"companyObj_property_authorisedUsers_items_properties_refProperties_Properties_permissionFiling_required\");\r",
									"    const _refProperties_properties_permissionFilling_type_expected = pm.collectionVariables.get(\"companyObj_property_authorisedUsers_items_properties_refProperties_Properties_permissionFiling_type\");\r",
									"\r",
									"    //Expected Permission Update property \r",
									"    const _refProperties_properties_permissionUpdate_label_expected = pm.collectionVariables.get(\"companyObj_property_authorisedUsers_items_properties_refProperties_Properties_permissionUpdate_label\");\r",
									"    const _refProperties_properties_permissionUpdate_propName_expected = pm.collectionVariables.get(\"companyObj_property_authorisedUsers_items_properties_refProperties_Properties_permissionUpdate_propName\");\r",
									"    const _refProperties_properties_permissionUpdate_required_expected = pm.collectionVariables.get(\"companyObj_property_authorisedUsers_items_properties_refProperties_Properties_permissionUpdate_required\");\r",
									"    const _refProperties_properties_permissionUpdate_type_expected = pm.collectionVariables.get(\"companyObj_property_authorisedUsers_items_properties_refProperties_Properties_permissionUpdate_type\");\r",
									"\r",
									"\r",
									"\r",
									"    pm.expect(_ref_type_expected).to.be.eql(_ref_type_actual);\r",
									"    pm.expect(_refProperties_type_expected).to.be.eql(_refProperties_type_actual);\r",
									"\r",
									"    //ID\r",
									"    pm.expect(_refProperties_properties_id_propName_expected).to.be.eql(_refProperties_properties_id_propName_actual);\r",
									"    pm.expect(_refProperties_properties_id_required_expected).to.be.eql(_refProperties_properties_id_required_actual);\r",
									"    pm.expect(_refProperties_properties_id_type_expected).to.be.eql(_refProperties_properties_id_type_actual);\r",
									"\r",
									"    //Permission Admin\r",
									"    pm.expect(_refProperties_properties_permissionAdmin_label_expected).to.be.eql(_refProperties_properties_permissionAdmin_label_actual);\r",
									"    pm.expect(_refProperties_properties_permissionAdmin_propName_expected).to.be.eql(_refProperties_properties_permissionAdmin_propName_actual);\r",
									"    pm.expect(_refProperties_properties_permissionAdmin_required_expected).to.be.eql(_refProperties_properties_permissionAdmin_required_actual);\r",
									"    pm.expect(_refProperties_properties_permissionAdmin_type_expected).to.be.eql(_refProperties_properties_permissionAdmin_type_actual);\r",
									"\r",
									"    //Permission Filing\r",
									"    pm.expect(_refProperties_properties_permissionFilling_label_expected).to.be.eql(_refProperties_properties_permissionFilling_label_actual);\r",
									"    pm.expect(_refProperties_properties_permissionFilling_propName_expected).to.be.eql(_refProperties_properties_permissionFilling_propName_actual);\r",
									"    pm.expect(_refProperties_properties_permissionFilling_required_expected).to.be.eql(_refProperties_properties_permissionFilling_required_actual);\r",
									"    pm.expect(_refProperties_properties_permissionFilling_type_expected).to.be.eql(_refProperties_properties_permissionFilling_type_actual);\r",
									"\r",
									"    //Permission Update\r",
									"    pm.expect(_refProperties_properties_permissionUpdate_label_expected).to.be.eql(_refProperties_properties_permissionUpdate_label_actual);\r",
									"    pm.expect(_refProperties_properties_permissionUpdate_propName_expected).to.be.eql(_refProperties_properties_permissionUpdate_propName_actual);\r",
									"    pm.expect(_refProperties_properties_permissionUpdate_required_expected).to.be.eql(_refProperties_properties_permissionUpdate_required_actual);\r",
									"    pm.expect(_refProperties_properties_permissionUpdate_type_expected).to.be.eql(_refProperties_properties_permissionUpdate_type_actual);\r",
									"\r",
									"});\r",
									"\r",
									"//validating properties `authorised User -> Items` values of company object \r",
									"// pm.test(\"validate company object property `authorised User -> Items` config \", () => {\r",
									"\r",
									"\r",
									"//validating company object attribute listing order \r",
									"pm.test(\"validate company object attributes `listing order`\", () => {\r",
									"    const companyObj_attribute_order_actual = jsonData.objects[companyObj_index].schema.order;\r",
									"    const companyObj_attribute_order_expected = JSON.parse(\"[\" + pm.collectionVariables.get(\"companyObj_schema_order\") + \"]\");\r",
									"\r",
									"    for (let attributes_index = 0; attributes_index < companyObj_attribute_order_actual.length; attributes_index++) {\r",
									"        pm.expect(companyObj_attribute_order_actual[attributes_index]).to.be.eql(companyObj_attribute_order_expected[attributes_index]);\r",
									"    }\r",
									"});\r",
									"\r",
									"//validating the required attributes in the company object \r",
									"pm.test(\"Verify correct company attributes are marked as `required`\", () => {\r",
									"    const companyObj_required_attributes_length = jsonData.objects[companyObj_index].schema.required.length;\r",
									"    const companyObj_required_attributes_list = JSON.parse(\"[\" + pm.collectionVariables.get(\"companyObj_required_attribute\") + \"]\");\r",
									"\r",
									"    for (var counter = 0; counter < companyObj_required_attributes_length; counter++) {\r",
									"        pm.expect(jsonData.objects[companyObj_index].schema.required[counter]).to.be.oneOf(companyObj_required_attributes_list);\r",
									"    }\r",
									"});\r",
									"\r",
									"//validating company object type\r",
									"pm.test(\"validate company object's `type`\", () => {\r",
									"    const type_actual = jsonData.objects[companyObj_index].type;\r",
									"    const type_expected = pm.collectionVariables.get(\"companyObj_type\");\r",
									"\r",
									"    pm.expect(type_actual).to.be.eql(type_expected);\r",
									"});\r",
									"\r",
									"\r",
									"//validating alpha user object's `type` and `name`\r",
									"pm.test(\"validate alpha_user object's `type` and `name`\", () => {\r",
									"\r",
									"    const type_actual = jsonData.objects[alpha_user_Obj_index].type;\r",
									"    const name_actual = jsonData.objects[alpha_user_Obj_index].name\r",
									"\r",
									"    const type_expected = pm.collectionVariables.get(\"alpha_user_Obj_type\");\r",
									"    const name_expected = pm.collectionVariables.get(\"alpha_user_Obj_name\");\r",
									"\r",
									"    pm.expect(type_expected).to.be.eql(type_actual);\r",
									"    pm.expect(name_expected).to.be.eql(name_actual);\r",
									"});\r",
									"\r",
									"//validating alpha user object's `meta data`\r",
									"pm.test(\"validate alpha_user object's `meta data`\", () => {\r",
									"\r",
									"    const root = jsonData.objects[alpha_user_Obj_index].meta\r",
									"\r",
									"    const resourceCollection_actual = root.resourceCollection;\r",
									"    const trackedProperties_actual = root.trackedProperties;\r",
									"\r",
									"    const resourceCollection_expected = pm.collectionVariables.get(\"alpha_user_Obj_meta_resourceCollection\");\r",
									"    const trackedProperties_expected = JSON.parse(\"[\" + pm.collectionVariables.get(\"alpha_user_Obj_meta_trackedProperties\") + \"]\");\r",
									"\r",
									"    for (var counter = 0; counter < trackedProperties_actual.length; counter++) {\r",
									"        pm.expect(trackedProperties_actual[counter]).to.be.oneOf(trackedProperties_expected);\r",
									"    }\r",
									"\r",
									"    pm.expect(resourceCollection_expected).to.be.eql(resourceCollection_actual);\r",
									"});\r",
									"\r",
									"\r",
									"//validating alpha user object's `notifications`\r",
									"pm.test(\"validate alpha_user object's `notifications`\", () => {\r",
									"\r",
									"    const root = jsonData.objects[alpha_user_Obj_index].notifications\r",
									"\r",
									"    const notifications_actual = root;\r",
									"    const notifications_length_expected = pm.collectionVariables.get(\"alpha_user_Obj_notifications_length\");\r",
									"\r",
									"    if (notifications_length_expected == 0)\r",
									"        pm.expect(notifications_actual).to.be.empty;\r",
									"});\r",
									"\r",
									"\r",
									"//validating alpha user object's `OnCreate` config\r",
									"pm.test(\"validate alpha_user object's `OnCreate` config\", () => {\r",
									"\r",
									"    const root = jsonData.objects[alpha_user_Obj_index].onCreate\r",
									"\r",
									"    const source_actual = root.source;\r",
									"    const type_actual = root.type;\r",
									"\r",
									"    const source_expected = pm.collectionVariables.get(\"alpha_user_Obj_onCreate_source\");\r",
									"    const type_expected = pm.collectionVariables.get(\"alpha_user_Obj_onCreate_type\");\r",
									"\r",
									"    pm.expect(source_expected).to.be.eql(source_actual);\r",
									"    pm.expect(type_expected).to.be.eql(type_actual);\r",
									"});\r",
									"\r",
									"//validating alpha user object's `OnUpdate` config\r",
									"pm.test(\"validate alpha_user object's `OnUpdate` config\", () => {\r",
									"\r",
									"    const root = jsonData.objects[alpha_user_Obj_index].onUpdate\r",
									"\r",
									"    const source_actual = root.source;\r",
									"    const type_actual = root.type;\r",
									"\r",
									"    const source_expected = pm.collectionVariables.get(\"alpha_user_Obj_onUpdate_source\");\r",
									"    const type_expected = pm.collectionVariables.get(\"alpha_user_Obj_onUpdate_type\");\r",
									"\r",
									"    pm.expect(source_expected).to.be.eql(source_actual);\r",
									"    pm.expect(type_expected).to.be.eql(type_actual);\r",
									"});\r",
									"\r",
									"//validating alpha user object's schema config\r",
									"pm.test(\"validate alpha_user object's `schema's` config\", () => {\r",
									"\r",
									"    const root = jsonData.objects[alpha_user_Obj_index].schema\r",
									"\r",
									"    const description_actual = root.description;\r",
									"    const title_actual = root.title;\r",
									"    const type_actual = root.type;\r",
									"\r",
									"\r",
									"    const description_expected = pm.collectionVariables.get(\"alpha_user_Obj_schema_description\");\r",
									"    const title_expected = pm.collectionVariables.get(\"alpha_user_Obj_schema_title\");\r",
									"    const type_expected = pm.collectionVariables.get(\"alpha_user_Obj_schema_type\");\r",
									"\r",
									"    //if description is empty\r",
									"    if (!description_actual)\r",
									"        pm.expect(description_expected).to.be.empty;\r",
									"    else\r",
									"        pm.expect(description_expected, \"description did not match\").to.be.eql(description_actual);\r",
									"\r",
									"    pm.expect(title_expected, \"title did not match\").to.be.eql(title_actual);\r",
									"    pm.expect(type_expected, \"type did not match\").to.be.eql(type_actual);\r",
									"});\r",
									"\r",
									"//validate aplpha user schema attributes order\r",
									"pm.test(\"validate alpha_user objects schema's attributes order \", () => {\r",
									"\r",
									"    const root = jsonData.objects[alpha_user_Obj_index].schema\r",
									"\r",
									"    const order_actual = root.order;\r",
									"    const order_expected = JSON.parse(\"[\" + pm.collectionVariables.get(\"alpha_user_Obj_schema_order\") + \"]\");\r",
									"\r",
									"    for (let index = 0; index < order_actual.length; index++) {\r",
									"        pm.expect(order_expected[index]).to.be.eql(order_actual[index]);\r",
									"    }\r",
									"\r",
									"});\r",
									"\r",
									"//validate aplpha user schema property - id\r",
									"pm.test(\"validate alpha_user objects schema's property `_id` config \", () => {\r",
									"\r",
									"    const root = jsonData.objects[alpha_user_Obj_index].schema.properties._id\r",
									"\r",
									"    const deleteQueryConfig_actual = JSON.stringify(root.deleteQueryConfig);\r",
									"    const description_actual = root.description;\r",
									"    const isPersonal_actual = JSON.stringify(root.isPersonal);\r",
									"    const isVirtual_actual = JSON.stringify(root.isVirtual);\r",
									"    const policies_actual = root.policies;\r",
									"    const searchable_actual = JSON.stringify(root.searchable);\r",
									"    const title_actual = root.title;\r",
									"    const type_actual = root.type;\r",
									"    const usageDescription_actual = root.usageDescription;\r",
									"    const userEditable_actual = JSON.stringify(root.userEditable);\r",
									"    const viewable_actual = JSON.stringify(root.viewable);\r",
									"\r",
									"    const deleteQueryConfig_expected = pm.collectionVariables.get(\"alpha_user_Obj_schema_property_id_deleteQueryConfig\");\r",
									"    const description_expected = pm.collectionVariables.get(\"alpha_user_Obj_schema_properties_description\");\r",
									"    const isPersonal_expected = pm.collectionVariables.get(\"alpha_user_Obj_schema_property_id_isPersonal\");\r",
									"    const isVirtual_expected = pm.collectionVariables.get(\"alpha_user_Obj_schema_property_id_isVirtual\");\r",
									"    const policies_expected = JSON.parse(\"[\" + pm.collectionVariables.get(\"alpha_user_Obj_schema_property_id_policies\") + \"]\");\r",
									"    const searchable_expected = pm.collectionVariables.get(\"alpha_user_Obj_schema_property_id_searchable\");\r",
									"    const title_expected = pm.collectionVariables.get(\"alpha_user_Obj_schema_property_id_title\");\r",
									"    const type_expected = pm.collectionVariables.get(\"alpha_user_Obj_schema_property_id_type\");\r",
									"    const usageDescription_expected = pm.collectionVariables.get(\"alpha_user_Obj_schema_property_id_usageDescription\")\r",
									"    const userEditable_expected = pm.collectionVariables.get(\"alpha_user_Obj_schema_property_id_userEditable\")\r",
									"    const viewable_expected = pm.collectionVariables.get(\"alpha_user_Obj_schema_property_id_viewable\")\r",
									"\r",
									"\r",
									"    pm.expect(deleteQueryConfig_expected, \"Id deleteQueryConfig values did not match\").to.be.eql(deleteQueryConfig_actual);\r",
									"    pm.expect(description_expected, \"Id description values did not match\").to.be.eql(description_actual);\r",
									"    pm.expect(isPersonal_expected, \"Id isPersonal values did not match\").to.be.eql(isPersonal_actual);\r",
									"    pm.expect(isVirtual_expected, \"Id isVirtual values did not match\").to.be.eql(isVirtual_actual);\r",
									"    pm.expect(searchable_expected, \"Id searchable values did not match\").to.be.eql(searchable_actual);\r",
									"\r",
									"    if (title_actual)\r",
									"        pm.expect(title_expected, \"Id title values did not match\").to.be.eql(title_actual);\r",
									"    else\r",
									"        pm.expect(title_expected, \"Id title values did not match\").to.be.empty\r",
									"\r",
									"    pm.expect(type_expected, \"Id type values did not match\").to.be.eql(type_actual);\r",
									"\r",
									"    if (usageDescription_actual)\r",
									"        pm.expect(usageDescription_expected, \"Id usageDescription values did not match\").to.be.eql(usageDescription_actual);\r",
									"    else\r",
									"        pm.expect(usageDescription_expected, \"Id usageDescription values did not match\").to.be.empty\r",
									"\r",
									"    pm.expect(userEditable_expected, \"Id userEditable values did not match\").to.be.eql(userEditable_actual);\r",
									"    pm.expect(viewable_expected, \"Id viewable values did not match\").to.be.eql(viewable_actual);\r",
									"\r",
									"\r",
									"    if (policies_expected.length == policies_actual.length) {\r",
									"        for (let index = 0; index < policies_actual.length; index++) {\r",
									"            pm.expect(deepEqual(policies_actual[index], policies_expected[index]), 'policies objects did not match').to.be.true;\r",
									"        }\r",
									"    }\r",
									"    else\r",
									"        pm.expect(policies_expected.length, \"policies array of different size\").to.be.eql(policies_actual.length);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"//validate aplpha user schema attributes order property - account status  \r",
									"pm.test(\"validate alpha_user objects schema's property `accountStatus` config \", () => {\r",
									"\r",
									"    const root = jsonData.objects[alpha_user_Obj_index].schema.properties.accountStatus\r",
									"\r",
									"    const deleteQueryConfig_actual = JSON.stringify(root.deleteQueryConfig);\r",
									"    const description_actual = root.description;\r",
									"    const isPersonal_actual = JSON.stringify(root.isPersonal);\r",
									"    const searchable_actual = JSON.stringify(root.searchable);\r",
									"    const title_actual = root.title;\r",
									"    const type_actual = root.type;\r",
									"    const usageDescription_actual = root.usageDescription;\r",
									"    const isVirtual_actual = JSON.stringify(root.isVirtual);\r",
									"    const userEditable_actual = JSON.stringify(root.userEditable);\r",
									"    const viewable_actual = JSON.stringify(root.viewable);\r",
									"\r",
									"    const deleteQueryConfig_expected = pm.collectionVariables.get(\"alpha_user_Obj_schema_property_accountStatus_deleteQueryConfig\");\r",
									"    const description_expected = pm.collectionVariables.get(\"alpha_user_Obj_schema_property_accountStatus_description\");\r",
									"    const isPersonal_expected = pm.collectionVariables.get(\"alpha_user_Obj_schema_property_accountStatus_isPersonal\");\r",
									"    const isVirtual_expected = pm.collectionVariables.get(\"alpha_user_Obj_schema_property_accountStatus_isVirtual\");\r",
									"    const searchable_expected = pm.collectionVariables.get(\"alpha_user_Obj_schema_property_accountStatus_searchable\");\r",
									"    const title_expected = pm.collectionVariables.get(\"alpha_user_Obj_schema_property_accountStatus_title\");\r",
									"    const type_expected = pm.collectionVariables.get(\"alpha_user_Obj_schema_property_accountStatus_type\");\r",
									"    const usageDescription_expected = pm.collectionVariables.get(\"alpha_user_Obj_schema_property_accountStatus_usageDescription\")\r",
									"    const userEditable_expected = pm.collectionVariables.get(\"alpha_user_Obj_schema_property_accountStatus_userEditable\")\r",
									"    const viewable_expected = pm.collectionVariables.get(\"alpha_user_Obj_schema_property_accountStatus_viewable\")\r",
									"\r",
									"   // pm.expect(deleteQueryConfig_expected, \"account status deleteQueryConfig values did not match\").to.be.eql(deleteQueryConfig_actual);\r",
									"    pm.expect(description_expected, \"account status description values did not match\").to.be.eql(description_actual);\r",
									"    pm.expect(isPersonal_expected, \"account status isPersonal values did not match\").to.be.eql(isPersonal_actual);\r",
									"   // pm.expect(isVirtual_expected, \"account status isVirtual values did not match\").to.be.eql(isVirtual_actual);\r",
									"    pm.expect(searchable_expected, \"account status searchable values did not match\").to.be.eql(searchable_actual);\r",
									"\r",
									"    if (title_actual)\r",
									"        pm.expect(title_expected, \"account status title values did not match\").to.be.eql(title_actual);\r",
									"    else\r",
									"        pm.expect(title_expected, \"account status title values did not match\").to.be.empty\r",
									"\r",
									"    pm.expect(type_expected, \"account status type values did not match\").to.be.eql(type_actual);\r",
									"\r",
									"    if (usageDescription_actual)\r",
									"        pm.expect(usageDescription_expected, \"account status usageDescription values did not match\").to.be.eql(usageDescription_actual);\r",
									"    else\r",
									"        pm.expect(usageDescription_expected, \"account status usageDescription values did not match\").to.be.empty\r",
									"\r",
									"    pm.expect(userEditable_expected, \"account status userEditable values did not match\").to.be.eql(userEditable_actual);\r",
									"    pm.expect(viewable_expected, \"account status viewable values did not match\").to.be.eql(viewable_actual);\r",
									"});\r",
									"\r",
									"//validate aplpha user schema attributes order property - aliasList\r",
									"pm.test(\"validate alpha_user objects schema's property `aliasList` config \", () => {\r",
									"\r",
									"    const root = jsonData.objects[alpha_user_Obj_index].schema.properties.aliasList\r",
									"\r",
									"    const description_actual = root.description;\r",
									"    const isVirtual_actual = JSON.stringify(root.isVirtual);\r",
									"    const item_title_actual = root.items.title;\r",
									"    const item_type_actual = root.items.type;\r",
									"    const returnByDefault_actual = JSON.stringify(root.returnByDefault);\r",
									"    const searchable_actual = JSON.stringify(root.searchable);\r",
									"    const title_actual = root.title;\r",
									"    const type_actual = root.type;\r",
									"    const userEditable_actual = JSON.stringify(root.userEditable);\r",
									"    const viewable_actual = JSON.stringify(root.viewable);\r",
									"\r",
									"    const description_expected = pm.collectionVariables.get(\"alpha_user_Obj_schema_property_aliasList_description\");\r",
									"    const isVirtual_expected = pm.collectionVariables.get(\"alpha_user_Obj_schema_property_aliasList_isVirtual\");\r",
									"    const item_title_expected = pm.collectionVariables.get(\"alpha_user_Obj_schema_property_aliasList_items_title\");\r",
									"    const item_type_expected = pm.collectionVariables.get(\"alpha_user_Obj_schema_property_aliasList_items_type\");\r",
									"    const returnByDefault_expected = pm.collectionVariables.get(\"alpha_user_Obj_schema_property_aliasList_returnByDefault\");\r",
									"    const searchable_expected = pm.collectionVariables.get(\"alpha_user_Obj_schema_property_aliasList_searchable\");\r",
									"    const title_expected = pm.collectionVariables.get(\"alpha_user_Obj_schema_property_aliasList_title\");\r",
									"    const type_expected = pm.collectionVariables.get(\"alpha_user_Obj_schema_property_aliasList_type\")\r",
									"    const userEditable_expected = pm.collectionVariables.get(\"alpha_user_Obj_schema_property_aliasList_userEditable\")\r",
									"    const viewable_expected = pm.collectionVariables.get(\"alpha_user_Obj_schema_property_aliasList_viewable\")\r",
									"\r",
									"\r",
									"    pm.expect(description_expected, \"aliasList description values did not match\").to.be.eql(description_actual);\r",
									"    pm.expect(isVirtual_expected, \"aliasList isVirtual values did not match\").to.be.eql(isVirtual_actual);\r",
									"    pm.expect(item_title_expected, \"aliasList - item->title values did not match\").to.be.eql(item_title_actual);\r",
									"    pm.expect(item_type_expected, \"aliasList item->type values did not match\").to.be.eql(item_type_expected);\r",
									"    pm.expect(returnByDefault_expected, \"aliasList returnByDefault values did not match\").to.be.eql(returnByDefault_actual);\r",
									"    pm.expect(searchable_expected, \"aliasList searchable values did not match\").to.be.eql(searchable_actual);\r",
									"\r",
									"    if (title_actual)\r",
									"        pm.expect(title_expected, \"aliasList title values did not match\").to.be.eql(title_actual);\r",
									"    else\r",
									"        pm.expect(title_expected, \"aliasList title values did not match\").to.be.empty\r",
									"\r",
									"    pm.expect(type_expected, \"aliasList type values did not match\").to.be.eql(type_actual);\r",
									"    pm.expect(userEditable_expected, \"aliasList userEditable values did not match\").to.be.eql(userEditable_actual);\r",
									"    pm.expect(viewable_expected, \"aliasList viewable values did not match\").to.be.eql(viewable_actual);\r",
									"});\r",
									"\r",
									"//validate aplpha user schema attributes order property - authzRoles\r",
									"pm.test(\"validate alpha_user objects schema's property `authzRoles` config \", () => {\r",
									"\r",
									"    const root = jsonData.objects[alpha_user_Obj_index].schema.properties.authzRoles\r",
									"\r",
									"    //actual values\r",
									"    const description_actual = root.description;\r",
									"    const id_actual = root.id;\r",
									"    const isPersonal_actual = JSON.stringify(root.isPersonal);\r",
									"    const item_id_actual = root.items.id;\r",
									"\r",
									"    const item_ref_description_actual = root.items.properties._ref.description;\r",
									"    const item_ref_type_actual = root.items.properties._ref.type;\r",
									"\r",
									"    const item_refProperties_description_actual = root.items.properties._refProperties.description;\r",
									"    const item_refProperties_title_actual = root.items.properties._refProperties.title;\r",
									"    const item_refProperties_type_actual = root.items.properties._refProperties.type;\r",
									"    const item_refProperties_Properties_id_desc_actual = root.items.properties._refProperties.properties._id.description;\r",
									"    const item_refProperties_Properties_id_type_actual = root.items.properties._refProperties.properties._id.type;\r",
									"\r",
									"    const item_resourceCollection_actual = root.items.resourceCollection;\r",
									"    const item_reversePropertyName_actual = root.items.reversePropertyName;\r",
									"    const item_reverseRelationship_actual = JSON.stringify(root.items.reverseRelationship);\r",
									"    const item_title_actual = root.items.title;\r",
									"    const item_type_actual = root.items.type;\r",
									"    const item_validate_actual = JSON.stringify(root.items.validate);\r",
									"\r",
									"    const returnByDefault_actual = JSON.stringify(root.returnByDefault);\r",
									"    const title_actual = root.title;\r",
									"    const type_actual = root.type;\r",
									"    const usageDescription_actual = root.usageDescription;\r",
									"    const userEditable_actual = JSON.stringify(root.userEditable);\r",
									"    const viewable_actual = JSON.stringify(root.viewable);\r",
									"\r",
									"    //expected values\r",
									"    const description_expected = pm.collectionVariables.get(\"alpha_user_Obj_schema_property_authzRoles_description\");\r",
									"    const id_expected = pm.collectionVariables.get(\"alpha_user_Obj_schema_property_authzRoles_id\");\r",
									"    const isPersonal_expected = pm.collectionVariables.get(\"alpha_user_Obj_schema_property_authzRoles_isPersonal\");\r",
									"    const item_id_expected = pm.collectionVariables.get(\"alpha_user_Obj_schema_property_authzRoles_items_id\");\r",
									"\r",
									"    const item_ref_description_expected = pm.collectionVariables.get(\"alpha_user_Obj_schema_property_authzRoles_items_properties_ref_description\");\r",
									"    const item_ref_type_expected = pm.collectionVariables.get(\"alpha_user_Obj_schema_property_authzRoles_items_properties_ref_type\");\r",
									"\r",
									"    const item_refProperties_description_expected = pm.collectionVariables.get(\"alpha_user_Obj_schema_property_authzRoles_items_properties__refProperties_description\");\r",
									"    const item_refProperties_title_expected = pm.collectionVariables.get(\"alpha_user_Obj_schema_property_authzRoles_items_properties__refProperties_title\");\r",
									"    const item_refProperties_type_expected = pm.collectionVariables.get(\"alpha_user_Obj_schema_property_authzRoles_items_properties__refProperties_type\");\r",
									"    const item_refProperties_Properties_id_desc_expected = pm.collectionVariables.get(\"alpha_user_Obj_schema_property_authzRoles_items_properties__refProperties_properties_id_description\");\r",
									"    const item_refProperties_Properties_id_type_expected = pm.collectionVariables.get(\"alpha_user_Obj_schema_property_authzRoles_items_properties__refProperties_properties_id_type\");\r",
									"\r",
									"    const item_resourceCollection_expected = JSON.parse(\"[\" + pm.collectionVariables.get(\"alpha_user_Obj_schema_property_authzRoles_items_resourceCollection\") + \"]\");\r",
									"    const item_reversePropertyName_expected = pm.collectionVariables.get(\"alpha_user_Obj_schema_property_authzRoles_items_reversePropertyName\");\r",
									"    const item_reverseRelationship_expected = pm.collectionVariables.get(\"alpha_user_Obj_schema_property_authzRoles_items_reverseRelationship\");\r",
									"    const item_title_expected = pm.collectionVariables.get(\"alpha_user_Obj_schema_property_authzRoles_items_title\");\r",
									"    const item_type_expected = pm.collectionVariables.get(\"alpha_user_Obj_schema_property_authzRoles_items_type\");\r",
									"    const item_validate_expected = pm.collectionVariables.get(\"alpha_user_Obj_schema_property_authzRoles_items_validate\");\r",
									"\r",
									"    const returnByDefault_expected = pm.collectionVariables.get(\"alpha_user_Obj_schema_property_authzRoles_returnByDefault\");\r",
									"    const title_expected = pm.collectionVariables.get(\"alpha_user_Obj_schema_property_authzRoles_title\");\r",
									"    const type_expected = pm.collectionVariables.get(\"alpha_user_Obj_schema_property_authzRoles_type\");\r",
									"    const usageDescription_expected = pm.collectionVariables.get(\"alpha_user_Obj_schema_property_authzRoles_usageDescription\");\r",
									"    const userEditable_expected = pm.collectionVariables.get(\"alpha_user_Obj_schema_property_authzRoles_userEditable\");\r",
									"    const viewable_expected = pm.collectionVariables.get(\"alpha_user_Obj_schema_property_authzRoles_viewable\");\r",
									"\r",
									"\r",
									"    pm.expect(description_expected, \"authzRoles description values did not match\").to.be.eql(description_actual);\r",
									"    pm.expect(id_expected, \"authzRoles id values did not match\").to.be.eql(id_actual);\r",
									"    pm.expect(isPersonal_expected, \"authzRoles isPersonal values did not match\").to.be.eql(isPersonal_actual);\r",
									"    pm.expect(item_id_expected, \"authzRoles->item->id values did not match\").to.be.eql(item_id_actual);\r",
									"    pm.expect(item_ref_description_expected, \"authzRoles->item->ref->description values did not match\").to.be.eql(item_ref_description_actual);\r",
									"    pm.expect(item_ref_type_expected, \"authzRoles->item->ref->type values did not match\").to.be.eql(item_ref_type_actual);\r",
									"\r",
									"    pm.expect(item_refProperties_description_expected, \"authzRoles->ref property->description values did not match\").to.be.eql(item_refProperties_description_actual);\r",
									"    pm.expect(item_refProperties_title_expected, \"authzRoles->ref property->title values did not match\").to.be.eql(item_refProperties_title_actual);\r",
									"    pm.expect(item_refProperties_type_expected, \"authzRoles->ref property->type values did not match\").to.be.eql(item_refProperties_type_actual);\r",
									"    pm.expect(item_refProperties_Properties_id_desc_expected, \"authzRoles->ref property->id->description values did not match\").to.be.eql(item_refProperties_Properties_id_desc_actual);\r",
									"    pm.expect(item_refProperties_Properties_id_type_expected, \"authzRoles->ref property->property->id->type values did not match\").to.be.eql(item_refProperties_Properties_id_type_actual);\r",
									"\r",
									"    if (item_resourceCollection_expected.length == item_resourceCollection_actual.length) {\r",
									"        for (let index = 0; index < item_resourceCollection_actual.length; index++) {\r",
									"            pm.expect(deepEqual(item_resourceCollection_expected[index], item_resourceCollection_actual[index]), 'resourceCollection object did not match').to.be.true;\r",
									"        }\r",
									"    }\r",
									"    else\r",
									"        pm.expect(item_resourceCollection_expected.length, 'resourceCollection object did not match').to.be.eql(item_resourceCollection_actual.length)\r",
									"\r",
									"    pm.expect(item_reversePropertyName_expected, \"authzRoles->item->reversePropertyName values did not match\").to.be.eql(item_reversePropertyName_actual);\r",
									"    pm.expect(item_reverseRelationship_expected, \"authzRoles->item->reverseRelationship values did not match\").to.be.eql(item_reverseRelationship_actual);\r",
									"    pm.expect(item_title_expected, \"authzRoles->item->title values did not match\").to.be.eql(item_title_actual);\r",
									"    pm.expect(item_type_expected, \"authzRoles->item->type values did not match\").to.be.eql(item_type_actual);\r",
									"\r",
									"    pm.expect(item_validate_expected, \"authzRoles->item->validate values did not match\").to.be.eql(item_validate_actual);\r",
									"    pm.expect(returnByDefault_expected, \"authzRoles->returnByDefault values did not match\").to.be.eql(returnByDefault_actual);\r",
									"\r",
									"    if (title_actual)\r",
									"        pm.expect(title_expected, \"authzRoles title values did not match\").to.be.eql(title_actual);\r",
									"    else\r",
									"        pm.expect(title_expected, \"authzRoles title values did not match\").to.be.empty\r",
									"\r",
									"    pm.expect(type_expected, \"authzRoles->type values did not match\").to.be.eql(type_expected);\r",
									"\r",
									"    if (usageDescription_actual)\r",
									"        pm.expect(usageDescription_expected, \"authzRoles -> usageDescription values did not match\").to.be.eql(usageDescription_actual);\r",
									"    else\r",
									"        pm.expect(usageDescription_expected, \"authzRoles -> usageDescription values did not match\").to.be.empty\r",
									"\r",
									"    pm.expect(userEditable_expected, \"authzRoles userEditable values did not match\").to.be.eql(userEditable_actual);\r",
									"    pm.expect(viewable_expected, \"authzRoles viewable values did not match\").to.be.eql(viewable_actual);\r",
									"});\r",
									"\r",
									"\r",
									"//validate aplpha user schema attributes order property - city\r",
									"pm.test(\"validate alpha_user objects schema's property `city` config \", () => {\r",
									"\r",
									"    const cityObj_actual = jsonData.objects[alpha_user_Obj_index].schema.properties.city;\r",
									"    const cityObj_expected = JSON.parse(pm.collectionVariables.get(\"alpha_user_Obj_schema_property_city\"));\r",
									"\r",
									"    pm.expect(deepEqual(cityObj_actual, cityObj_expected), `alpha user property city object did not match\r",
									"    Actual => ${JSON.stringify(cityObj_actual)}\r",
									"    expected => ${JSON.stringify(cityObj_expected)}`).to.be.true;\r",
									"});\r",
									"\r",
									"//validate aplpha user schema attributes order property - common name\r",
									"pm.test(\"validate alpha_user objects schema's property `cn` config \", () => {\r",
									"\r",
									"    const cnObj_actual = jsonData.objects[alpha_user_Obj_index].schema.properties.cn;\r",
									"    const cnObj_expected = JSON.parse(pm.collectionVariables.get(\"alpha_user_Obj_schema_property_cn\"));\r",
									"\r",
									"    pm.expect(deepEqual(cnObj_actual, cnObj_expected),  `alpha user property cn object did not match\r",
									"    Actual => ${JSON.stringify(cnObj_actual)}\r",
									"    expected => ${JSON.stringify(cnObj_expected)}`).to.be.true;\r",
									"});\r",
									"\r",
									"//validate aplpha user schema attributes order property - consentedMappings\r",
									"pm.test(\"validate alpha_user objects schema's property `consentedMappings` config \", () => {\r",
									"\r",
									"    const consentedMappingsObj_actual = jsonData.objects[alpha_user_Obj_index].schema.properties.consentedMappings;\r",
									"    const consentedMappingsObj_expected = JSON.parse(pm.collectionVariables.get(\"alpha_user_Obj_schema_property_consentedMappings\"));\r",
									"\r",
									"    pm.expect(deepEqual(consentedMappingsObj_actual, consentedMappingsObj_expected),  `alpha user property consentedMappings object did not match\r",
									"    Actual => ${JSON.stringify(consentedMappingsObj_actual)}\r",
									"    expected => ${JSON.stringify(consentedMappingsObj_expected)}`).to.be.true;\r",
									"});\r",
									"\r",
									"//validate aplpha user schema attributes order property - country\r",
									"pm.test(\"validate alpha_user objects schema's property `country` config \", () => {\r",
									"\r",
									"    const countryObj_actual = jsonData.objects[alpha_user_Obj_index].schema.properties.country;\r",
									"    const countryObj_expected = JSON.parse(pm.collectionVariables.get(\"alpha_user_Obj_schema_property_country\"));\r",
									"\r",
									"    pm.expect(deepEqual(countryObj_actual, countryObj_expected), `alpha user property country object did not match\r",
									"    Actual => ${JSON.stringify(countryObj_actual)}\r",
									"    expected => ${JSON.stringify(countryObj_expected)}`).to.be.true;\r",
									"});\r",
									"\r",
									"//validate aplpha user schema attributes order property - description\r",
									"pm.test(\"validate alpha_user objects schema's property `description` config \", () => {\r",
									"\r",
									"    const descriptionObj_actual = jsonData.objects[alpha_user_Obj_index].schema.properties.description;\r",
									"    const descriptionObj_expected = JSON.parse(pm.collectionVariables.get(\"alpha_user_Obj_schema_property_description\"));\r",
									"\r",
									"    pm.expect(deepEqual(descriptionObj_actual, descriptionObj_expected), `alpha user property description object did not match\r",
									"    Actual => ${JSON.stringify(descriptionObj_actual)}\r",
									"    expected => ${JSON.stringify(descriptionObj_expected)}`).to.be.true;\r",
									"});\r",
									"\r",
									"//validate aplpha user schema attributes order property - effectiveAssignments\r",
									"pm.test(\"validate alpha_user objects schema's property `effectiveAssignments` config \", () => {\r",
									"\r",
									"    const effectiveAssignmentsObj_actual = jsonData.objects[alpha_user_Obj_index].schema.properties.effectiveAssignments;\r",
									"    const effectiveAssignmentsObj_expected = JSON.parse(pm.collectionVariables.get(\"alpha_user_Obj_schema_property_effectiveAssignments\"));\r",
									"\r",
									"    pm.expect(deepEqual(effectiveAssignmentsObj_actual, effectiveAssignmentsObj_expected), `alpha user property effectiveAssignments object did not match\r",
									"    Actual => ${JSON.stringify(effectiveAssignmentsObj_actual)}\r",
									"    expected => ${JSON.stringify(effectiveAssignmentsObj_expected)}`).to.be.true;\r",
									"});\r",
									"\r",
									"//validate aplpha user schema attributes order property - effectiveRoles\r",
									"pm.test(\"validate alpha_user objects schema's property `effectiveRoles` config \", () => {\r",
									"\r",
									"    const effectiveRolesObj_actual = jsonData.objects[alpha_user_Obj_index].schema.properties.effectiveRoles;\r",
									"    const effectiveRolesObj_expected = JSON.parse(pm.collectionVariables.get(\"alpha_user_Obj_schema_property_effectiveRoles\"));\r",
									"\r",
									"    pm.expect(deepEqual(effectiveRolesObj_actual, effectiveRolesObj_expected), `alpha user property effectiveRoles object did not match\r",
									"    Actual => ${JSON.stringify(effectiveRolesObj_actual)}\r",
									"    expected => ${JSON.stringify(effectiveRolesObj_expected)}`).to.be.true;\r",
									"});\r",
									"\r",
									"//validate aplpha user schema attributes order property - givenName\r",
									"pm.test(\"validate alpha_user objects schema's property `givenName` config \", () => {\r",
									"\r",
									"    const givenNameObj_actual = jsonData.objects[alpha_user_Obj_index].schema.properties.givenName;\r",
									"    const givenNameObj_expected = JSON.parse(pm.collectionVariables.get(\"alpha_user_Obj_schema_property_givenName\"));\r",
									"\r",
									"    pm.expect(deepEqual(givenNameObj_actual, givenNameObj_expected), `alpha user property givenName object did not match\r",
									"    Actual => ${JSON.stringify(givenNameObj_actual)}\r",
									"    expected => ${JSON.stringify(givenNameObj_expected)}`).to.be.true;\r",
									"});\r",
									"\r",
									"//validate aplpha user schema attributes order property - isAuthorisedUserOf\r",
									"pm.test(\"validate alpha_user objects schema's property `isAuthorisedUserOf` config \", () => {\r",
									"\r",
									"    const isAuthorisedUserOfObj_actual = jsonData.objects[alpha_user_Obj_index].schema.properties.isAuthorisedUserOf;\r",
									"    const isAuthorisedUserOfObj_expected = JSON.parse(pm.collectionVariables.get(\"alpha_user_Obj_schema_property_isAuthorisedUserOf\"));\r",
									"\r",
									"    pm.expect(deepEqual(isAuthorisedUserOfObj_actual, isAuthorisedUserOfObj_expected), `alpha user property isAuthorisedUserOf object did not match\r",
									"    Actual => ${JSON.stringify(isAuthorisedUserOfObj_actual)}\r",
									"    expected => ${JSON.stringify(isAuthorisedUserOfObj_expected)}`).to.be.true;\r",
									"});\r",
									"\r",
									"//validate aplpha user schema attributes order property - kbaInfo\r",
									"pm.test(\"validate alpha_user objects schema's property `kbaInfo` config \", () => {\r",
									"\r",
									"    const kbaInfoObj_actual = jsonData.objects[alpha_user_Obj_index].schema.properties.kbaInfo;\r",
									"    const kbaInfoObj_expected = JSON.parse(pm.collectionVariables.get(\"alpha_user_Obj_schema_property_kbaInfo\"));\r",
									"\r",
									"    pm.expect(deepEqual(kbaInfoObj_actual, kbaInfoObj_expected), `alpha user property kbaInfo object did not match\r",
									"    Actual => ${JSON.stringify(kbaInfoObj_actual)}\r",
									"    expected => ${JSON.stringify(kbaInfoObj_expected)}`).to.be.true;\r",
									"});\r",
									"\r",
									"//validate aplpha user schema attributes order property - lastSync\r",
									"pm.test(\"validate alpha_user objects schema's property `lastSync` config \", () => {\r",
									"\r",
									"    const lastSyncObj_actual = jsonData.objects[alpha_user_Obj_index].schema.properties.lastSync;\r",
									"    const lastSyncObj_expected = JSON.parse(pm.collectionVariables.get(\"alpha_user_Obj_schema_property_lastSync\"));\r",
									"\r",
									"    pm.expect(deepEqual(lastSyncObj_actual, lastSyncObj_expected), `alpha user property lastSync object did not match\r",
									"    Actual => ${JSON.stringify(lastSyncObj_actual)}\r",
									"    expected => ${JSON.stringify(lastSyncObj_expected)}`).to.be.true;\r",
									"});\r",
									"\r",
									"//validate aplpha user schema attributes order property - mail\r",
									"pm.test(\"validate alpha_user objects schema's property `mail` config \", () => {\r",
									"\r",
									"    const mailObj_actual = jsonData.objects[alpha_user_Obj_index].schema.properties.mail;\r",
									"    const mailObj_expected = JSON.parse(pm.collectionVariables.get(\"alpha_user_Obj_schema_property_mail\"));\r",
									"\r",
									"    pm.expect(deepEqual(mailObj_actual, mailObj_expected), `alpha user property mail object did not match\r",
									"    Actual => ${JSON.stringify(mailObj_actual)}\r",
									"    expected => ${JSON.stringify(mailObj_expected)}`).to.be.true;\r",
									"});\r",
									"\r",
									"//validate aplpha user schema attributes order property - manager\r",
									"pm.test(\"validate alpha_user objects schema's property `manager` config \", () => {\r",
									"\r",
									"    const managerObj_actual = jsonData.objects[alpha_user_Obj_index].schema.properties.manager;\r",
									"    const managerObj_expected = JSON.parse(pm.collectionVariables.get(\"alpha_user_Obj_schema_property_manager\"));\r",
									"\r",
									"    pm.expect(deepEqual(managerObj_actual, managerObj_expected), `alpha user property manager object did not match\r",
									"    Actual => ${JSON.stringify(managerObj_actual)}\r",
									"    expected => ${JSON.stringify(managerObj_expected)}`).to.be.true;\r",
									"});\r",
									"\r",
									"\r",
									"//validate aplpha user schema attributes order property - password\r",
									"pm.test(\"validate alpha_user objects schema's property `password` config \", () => {\r",
									"\r",
									"    const passwordObj_actual = jsonData.objects[alpha_user_Obj_index].schema.properties.password;\r",
									"    const passwordObj_expected = JSON.parse(pm.collectionVariables.get(\"alpha_user_Obj_schema_property_password\"));\r",
									"\r",
									"    pm.expect(deepEqual(passwordObj_actual, passwordObj_expected), `alpha user property password object did not match\r",
									"    Actual => ${JSON.stringify(passwordObj_actual)}\r",
									"    expected => ${JSON.stringify(passwordObj_expected)}`).to.be.true;\r",
									"});\r",
									"\r",
									"//validate aplpha user schema attributes order property - postalAddress\r",
									"pm.test(\"validate alpha_user objects schema's property `postalAddress` config \", () => {\r",
									"\r",
									"    const postalAddressObj_actual = jsonData.objects[alpha_user_Obj_index].schema.properties.postalAddress;\r",
									"    const postalAddressObj_expected = JSON.parse(pm.collectionVariables.get(\"alpha_user_Obj_schema_property_postalAddress\"));\r",
									"\r",
									"    pm.expect(deepEqual(postalAddressObj_actual, postalAddressObj_expected),`alpha user property postalAddress object did not match\r",
									"    Actual => ${JSON.stringify(postalAddressObj_actual)}\r",
									"    expected => ${JSON.stringify(postalAddressObj_expected)}`).to.be.true;\r",
									"});\r",
									"\r",
									"//validate aplpha user schema attributes order property - postalCode\r",
									"pm.test(\"validate alpha_user objects schema's property `postalCode` config \", () => {\r",
									"\r",
									"    const postalCodeObj_actual = jsonData.objects[alpha_user_Obj_index].schema.properties.postalCode;\r",
									"    const postalCodeObj_expected = JSON.parse(pm.collectionVariables.get(\"alpha_user_Obj_schema_property_postalCode\"));\r",
									"\r",
									"    pm.expect(deepEqual(postalCodeObj_actual, postalCodeObj_expected),`alpha user property postalCode object did not match\r",
									"    Actual => ${JSON.stringify(postalCodeObj_actual)}\r",
									"    expected => ${JSON.stringify(postalCodeObj_expected)}`).to.be.true;\r",
									"});\r",
									"\r",
									"//validate aplpha user schema attributes order property - preferences\r",
									"pm.test(\"validate alpha_user objects schema's property `preferences` config \", () => {\r",
									"\r",
									"    const preferencesObj_actual = jsonData.objects[alpha_user_Obj_index].schema.properties.preferences;\r",
									"    const preferencesObj_expected = JSON.parse(pm.collectionVariables.get(\"alpha_user_Obj_schema_property_preferences\"));\r",
									"\r",
									"    pm.expect(deepEqual(preferencesObj_actual, preferencesObj_expected),`alpha user property preferences object did not match\r",
									"    Actual => ${JSON.stringify(preferencesObj_actual)}\r",
									"    expected => ${JSON.stringify(preferencesObj_expected)}`).to.be.true;\r",
									"});\r",
									"\r",
									"//validate aplpha user schema attributes order property - reports\r",
									"pm.test(\"validate alpha_user objects schema's property `reports` config \", () => {\r",
									"\r",
									"    const reportsObj_actual = jsonData.objects[alpha_user_Obj_index].schema.properties.reports;\r",
									"    const reportsObj_expected = JSON.parse(pm.collectionVariables.get(\"alpha_user_Obj_schema_property_reports\"));\r",
									"\r",
									"    pm.expect(deepEqual(reportsObj_actual, reportsObj_expected), `alpha user property reports object did not match\r",
									"    Actual => ${JSON.stringify(reportsObj_actual)}\r",
									"    expected => ${JSON.stringify(reportsObj_expected)}`).to.be.true;\r",
									"});\r",
									"\r",
									"//validate aplpha user schema attributes order property - roles\r",
									"pm.test(\"validate alpha_user objects schema's property `roles` config \", () => {\r",
									"\r",
									"    const rolesObj_actual = jsonData.objects[alpha_user_Obj_index].schema.properties.roles;\r",
									"    const rolesObj_expected = JSON.parse(pm.collectionVariables.get(\"alpha_user_Obj_schema_property_roles\"));\r",
									"\r",
									"    pm.expect(deepEqual(rolesObj_actual, rolesObj_expected), `alpha user property roles object did not match\r",
									"    Actual => ${JSON.stringify(rolesObj_actual)}\r",
									"    expected => ${JSON.stringify(rolesObj_expected)}`).to.be.true;\r",
									"});\r",
									"\r",
									"//validate aplpha user schema attributes order property - sn\r",
									"pm.test(\"validate alpha_user objects schema's property `sn` config \", () => {\r",
									"\r",
									"    const snObj_actual = jsonData.objects[alpha_user_Obj_index].schema.properties.sn;\r",
									"    const snObj_expected = JSON.parse(pm.collectionVariables.get(\"alpha_user_Obj_schema_property_sn\"));\r",
									"\r",
									"    pm.expect(deepEqual(snObj_actual, snObj_expected), `alpha user property sn object did not match \r",
									"    Actual => ${JSON.stringify(snObj_actual)}\r",
									"    expected => ${JSON.stringify(snObj_expected)}`).to.be.true;  \r",
									"});\r",
									"\r",
									"//validate aplpha user schema attributes order property - stateProvince\r",
									"pm.test(\"validate alpha_user objects schema's property `stateProvince` config \", () => {\r",
									"\r",
									"    const stateProvinceObj_actual = jsonData.objects[alpha_user_Obj_index].schema.properties.stateProvince;\r",
									"    const stateProvinceObj_expected = JSON.parse(pm.collectionVariables.get(\"alpha_user_Obj_schema_property_stateProvince\"));\r",
									"\r",
									"    pm.expect(deepEqual(stateProvinceObj_actual, stateProvinceObj_expected), `alpha user property stateProvince object did not match \r",
									"    Actual => ${JSON.stringify(stateProvinceObj_actual)}\r",
									"    expected => ${JSON.stringify(stateProvinceObj_expected)}`).to.be.true;\r",
									"});\r",
									"\r",
									"//validate aplpha user schema attributes order property - telephoneNumber\r",
									"pm.test(\"validate alpha_user objects schema's property `telephoneNumber` config \", () => {\r",
									"\r",
									"    const telephoneNumberObj_actual = jsonData.objects[alpha_user_Obj_index].schema.properties.telephoneNumber;\r",
									"    const telephoneNumberObj_expected = JSON.parse(pm.collectionVariables.get(\"alpha_user_Obj_schema_property_telephoneNumber\"));\r",
									"\r",
									"    pm.expect(deepEqual(telephoneNumberObj_actual, telephoneNumberObj_expected), `alpha user property telephoneNumber object did not match\r",
									"    Actual => ${JSON.stringify(telephoneNumberObj_actual)}\r",
									"    Expected => ${JSON.stringify(telephoneNumberObj_expected)}`).to.be.true;\r",
									"});\r",
									"\r",
									"//validate aplpha user schema attributes order property - userName\r",
									"pm.test(\"validate alpha_user objects schema's property `userName` config \", () => {\r",
									"\r",
									"    const userNameObj_actual = jsonData.objects[alpha_user_Obj_index].schema.properties.userName;\r",
									"    const userNameObj_expected = JSON.parse(pm.collectionVariables.get(\"alpha_user_Obj_schema_property_userName\"));\r",
									"\r",
									"    pm.expect(deepEqual(userNameObj_actual, userNameObj_expected), `alpha user property userName object did not match \r",
									"    Actual => ${JSON.stringify(userNameObj_actual)}\r",
									"    expected => ${JSON.stringify(userNameObj_expected)}`).to.be.true;\r",
									"});\r",
									"\r",
									"//validate aplpha user - correct fields are marked as required\r",
									"pm.test(\"validate alpha_user -> correct fields are marked as required \", () => {\r",
									"\r",
									"    const requiredFields_actual = jsonData.objects[alpha_user_Obj_index].schema.required;\r",
									"    const requiredFields_expected = JSON.parse(\"[\" + pm.collectionVariables.get(\"alpha_user_Obj_schema_requiredFields\") + \"]\");\r",
									"\r",
									"    for (index = 0; index < requiredFields_actual.length; index++) {\r",
									"       \r",
									"        pm.expect(requiredFields_actual[index], `alpha user -> incorrect fields are marked as required \\n\r",
									"        Actual => ${requiredFields_actual} \\n\r",
									"        Expected => ${requiredFields_expected} \\n`).to.be.eql(requiredFields_expected[index]);\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"// console.log(jsonData.objects[6].schema.required)\r",
									"\r",
									"\r",
									"// //pm.expect(jsonData.objects[6].schema.required[0]).include(\"name,number\")\r",
									"// const company_required_attributes_length = jsonData.objects[6].schema.required.length;\r",
									"\r",
									"// for (var counter = 0; counter < company_required_attributes_length; counter++) {\r",
									"\r",
									"\r",
									"//     pm.expect(\"name,number\").contains(jsonData.objects[6].schema.required[counter]);\r",
									"\r",
									"// }\r",
									"\r",
									"// pm.expect(\"name,number\").contains(jsonData.objects[6].schema.required[0])\r",
									"\r",
									"\r",
									"//    pm.globals.set(\"test1\", JSON.stringify(cnObj_actual));\r",
									"//    pm.globals.set(\"test2\", JSON.stringify(cnObj_expected));\r",
									"\r",
									"\r",
									"// pm.globals.set(\"test\", jsonData.objects[alpha_user_Obj_index].type);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {
							"content-type": true,
							"content-length": true,
							"connection": true,
							"accept-encoding": true,
							"accept": true,
							"user-agent": true,
							"host": true
						}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{platformUrl}}/openidm/config/managed",
							"host": [
								"{{platformUrl}}"
							],
							"path": [
								"openidm",
								"config",
								"managed"
							]
						}
					},
					"response": [
						{
							"name": "Get Config  Copy",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{platformUrl}}/openidm/config/managed",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"openidm",
										"config",
										"managed"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "date",
									"value": "Sat, 06 Feb 2021 06:02:59 GMT"
								},
								{
									"key": "cache-control",
									"value": "no-store"
								},
								{
									"key": "content-api-version",
									"value": "protocol=2.1,resource=1.0"
								},
								{
									"key": "content-type",
									"value": "application/json;charset=utf-8"
								},
								{
									"key": "expires",
									"value": "0"
								},
								{
									"key": "pragma",
									"value": "no-cache"
								},
								{
									"key": "x-content-type-options",
									"value": "nosniff"
								},
								{
									"key": "transfer-encoding",
									"value": "chunked"
								},
								{
									"key": "strict-transport-security",
									"value": "max-age=31536000; includeSubDomains; preload;"
								},
								{
									"key": "Via",
									"value": "1.1 google"
								},
								{
									"key": "Alt-Svc",
									"value": "clear"
								}
							],
							"cookie": [],
							"body": "{\n    \"_id\": \"managed\",\n    \"objects\": [\n        {\n            \"iconClass\": \"fa fa-database\",\n            \"name\": \"alpha_assignment\",\n            \"schema\": {\n                \"$schema\": \"http://forgerock.org/json-schema#\",\n                \"description\": \"A role assignment\",\n                \"icon\": \"fa-key\",\n                \"id\": \"urn:jsonschema:org:forgerock:openidm:managed:api:Assignment\",\n                \"mat-icon\": \"vpn_key\",\n                \"order\": [\n                    \"_id\",\n                    \"name\",\n                    \"description\",\n                    \"mapping\",\n                    \"attributes\",\n                    \"linkQualifiers\",\n                    \"roles\"\n                ],\n                \"properties\": {\n                    \"_id\": {\n                        \"description\": \"The assignment ID\",\n                        \"searchable\": false,\n                        \"title\": \"Name\",\n                        \"type\": \"string\",\n                        \"viewable\": false\n                    },\n                    \"attributes\": {\n                        \"description\": \"The attributes operated on by this assignment.\",\n                        \"items\": {\n                            \"order\": [\n                                \"assignmentOperation\",\n                                \"unassignmentOperation\",\n                                \"name\",\n                                \"value\"\n                            ],\n                            \"properties\": {\n                                \"assignmentOperation\": {\n                                    \"description\": \"Assignment operation\",\n                                    \"type\": \"string\"\n                                },\n                                \"name\": {\n                                    \"description\": \"Name\",\n                                    \"type\": \"string\"\n                                },\n                                \"unassignmentOperation\": {\n                                    \"description\": \"Unassignment operation\",\n                                    \"type\": \"string\"\n                                },\n                                \"value\": {\n                                    \"description\": \"Value\",\n                                    \"type\": \"string\"\n                                }\n                            },\n                            \"required\": [],\n                            \"title\": \"Assignment Attributes Items\",\n                            \"type\": \"object\"\n                        },\n                        \"notifyRelationships\": [\n                            \"roles\"\n                        ],\n                        \"title\": \"Assignment Attributes\",\n                        \"type\": \"array\",\n                        \"viewable\": true\n                    },\n                    \"description\": {\n                        \"description\": \"The assignment description, used for display purposes.\",\n                        \"searchable\": true,\n                        \"title\": \"Description\",\n                        \"type\": \"string\",\n                        \"viewable\": true\n                    },\n                    \"linkQualifiers\": {\n                        \"description\": \"Conditional link qualifiers to restrict this assignment to.\",\n                        \"items\": {\n                            \"title\": \"Link Qualifiers Items\",\n                            \"type\": \"string\"\n                        },\n                        \"title\": \"Link Qualifiers\",\n                        \"type\": \"array\",\n                        \"viewable\": true\n                    },\n                    \"mapping\": {\n                        \"description\": \"The name of the mapping this assignment applies to\",\n                        \"policies\": [\n                            {\n                                \"policyId\": \"mapping-exists\"\n                            }\n                        ],\n                        \"searchable\": true,\n                        \"title\": \"Mapping\",\n                        \"type\": \"string\",\n                        \"viewable\": true\n                    },\n                    \"name\": {\n                        \"description\": \"The assignment name, used for display purposes.\",\n                        \"searchable\": true,\n                        \"title\": \"Name\",\n                        \"type\": \"string\",\n                        \"viewable\": true\n                    },\n                    \"roles\": {\n                        \"description\": \"Managed Roles\",\n                        \"items\": {\n                            \"id\": \"urn:jsonschema:org:forgerock:openidm:managed:api:Assignment:roles:items\",\n                            \"properties\": {\n                                \"_ref\": {\n                                    \"description\": \"References a relationship from a managed object\",\n                                    \"type\": \"string\"\n                                },\n                                \"_refProperties\": {\n                                    \"description\": \"Supports metadata within the relationship\",\n                                    \"properties\": {\n                                        \"_id\": {\n                                            \"description\": \"_refProperties object ID\",\n                                            \"type\": \"string\"\n                                        }\n                                    },\n                                    \"title\": \"Managed Roles Items _refProperties\",\n                                    \"type\": \"object\"\n                                }\n                            },\n                            \"resourceCollection\": [\n                                {\n                                    \"label\": \"Role\",\n                                    \"notify\": true,\n                                    \"path\": \"managed/alpha_role\",\n                                    \"query\": {\n                                        \"fields\": [\n                                            \"name\"\n                                        ],\n                                        \"queryFilter\": \"true\"\n                                    }\n                                }\n                            ],\n                            \"reversePropertyName\": \"assignments\",\n                            \"reverseRelationship\": true,\n                            \"title\": \"Managed Roles Items\",\n                            \"type\": \"relationship\",\n                            \"validate\": true\n                        },\n                        \"returnByDefault\": false,\n                        \"title\": \"Managed Roles\",\n                        \"type\": \"array\",\n                        \"userEditable\": false,\n                        \"viewable\": true\n                    }\n                },\n                \"required\": [\n                    \"name\",\n                    \"description\",\n                    \"mapping\"\n                ],\n                \"title\": \"Alpha realm - Assignment\",\n                \"type\": \"object\"\n            },\n            \"type\": \"Managed Object\"\n        },\n        {\n            \"iconClass\": \"fa fa-database\",\n            \"name\": \"alpha_role\",\n            \"onDelete\": {\n                \"file\": \"roles/onDelete-roles.js\",\n                \"type\": \"text/javascript\"\n            },\n            \"postCreate\": {\n                \"source\": \"require('roles/postOperation-roles').manageTemporalConstraints(resourceName);\",\n                \"type\": \"text/javascript\"\n            },\n            \"postDelete\": {\n                \"source\": \"require('roles/postOperation-roles').manageTemporalConstraints(resourceName);\",\n                \"type\": \"text/javascript\"\n            },\n            \"postUpdate\": {\n                \"source\": \"require('roles/postOperation-roles').manageTemporalConstraints(resourceName);\",\n                \"type\": \"text/javascript\"\n            },\n            \"schema\": {\n                \"$schema\": \"http://forgerock.org/json-schema#\",\n                \"description\": \"\",\n                \"icon\": \"fa-check-square-o\",\n                \"id\": \"urn:jsonschema:org:forgerock:openidm:managed:api:Role\",\n                \"mat-icon\": \"assignment_ind\",\n                \"order\": [\n                    \"_id\",\n                    \"name\",\n                    \"description\",\n                    \"members\",\n                    \"assignments\",\n                    \"condition\",\n                    \"temporalConstraints\"\n                ],\n                \"properties\": {\n                    \"_id\": {\n                        \"description\": \"Role ID\",\n                        \"searchable\": false,\n                        \"title\": \"Name\",\n                        \"type\": \"string\",\n                        \"viewable\": false\n                    },\n                    \"assignments\": {\n                        \"description\": \"Managed Assignments\",\n                        \"items\": {\n                            \"id\": \"urn:jsonschema:org:forgerock:openidm:managed:api:Role:assignments:items\",\n                            \"notifySelf\": true,\n                            \"properties\": {\n                                \"_ref\": {\n                                    \"description\": \"References a relationship from a managed object\",\n                                    \"type\": \"string\"\n                                },\n                                \"_refProperties\": {\n                                    \"description\": \"Supports metadata within the relationship\",\n                                    \"properties\": {\n                                        \"_id\": {\n                                            \"description\": \"_refProperties object ID\",\n                                            \"type\": \"string\"\n                                        }\n                                    },\n                                    \"title\": \"Managed Assignments Items _refProperties\",\n                                    \"type\": \"object\"\n                                }\n                            },\n                            \"resourceCollection\": [\n                                {\n                                    \"label\": \"Assignment\",\n                                    \"path\": \"managed/alpha_assignment\",\n                                    \"query\": {\n                                        \"fields\": [\n                                            \"name\"\n                                        ],\n                                        \"queryFilter\": \"true\"\n                                    }\n                                }\n                            ],\n                            \"reversePropertyName\": \"roles\",\n                            \"reverseRelationship\": true,\n                            \"title\": \"Managed Assignments Items\",\n                            \"type\": \"relationship\",\n                            \"validate\": true\n                        },\n                        \"notifyRelationships\": [\n                            \"members\"\n                        ],\n                        \"returnByDefault\": false,\n                        \"title\": \"Managed Assignments\",\n                        \"type\": \"array\",\n                        \"viewable\": true\n                    },\n                    \"condition\": {\n                        \"description\": \"A conditional filter for this role\",\n                        \"isConditional\": true,\n                        \"searchable\": false,\n                        \"title\": \"Condition\",\n                        \"type\": \"string\",\n                        \"viewable\": false\n                    },\n                    \"description\": {\n                        \"description\": \"The role description, used for display purposes.\",\n                        \"searchable\": true,\n                        \"title\": \"Description\",\n                        \"type\": \"string\",\n                        \"viewable\": true\n                    },\n                    \"members\": {\n                        \"description\": \"Role Members\",\n                        \"items\": {\n                            \"id\": \"urn:jsonschema:org:forgerock:openidm:managed:api:Role:members:items\",\n                            \"properties\": {\n                                \"_ref\": {\n                                    \"description\": \"References a relationship from a managed object\",\n                                    \"type\": \"string\"\n                                },\n                                \"_refProperties\": {\n                                    \"description\": \"Supports metadata within the relationship\",\n                                    \"properties\": {\n                                        \"_grantType\": {\n                                            \"description\": \"Grant Type\",\n                                            \"label\": \"Grant Type\",\n                                            \"type\": \"string\"\n                                        },\n                                        \"_id\": {\n                                            \"description\": \"_refProperties object ID\",\n                                            \"type\": \"string\"\n                                        }\n                                    },\n                                    \"title\": \"Role Members Items _refProperties\",\n                                    \"type\": \"object\"\n                                }\n                            },\n                            \"resourceCollection\": [\n                                {\n                                    \"conditionalAssociation\": true,\n                                    \"label\": \"User\",\n                                    \"notify\": true,\n                                    \"path\": \"managed/alpha_user\",\n                                    \"query\": {\n                                        \"fields\": [\n                                            \"userName\",\n                                            \"givenName\",\n                                            \"sn\"\n                                        ],\n                                        \"queryFilter\": \"true\"\n                                    }\n                                }\n                            ],\n                            \"reversePropertyName\": \"roles\",\n                            \"reverseRelationship\": true,\n                            \"title\": \"Role Members Items\",\n                            \"type\": \"relationship\",\n                            \"validate\": true\n                        },\n                        \"relationshipGrantTemporalConstraintsEnforced\": true,\n                        \"returnByDefault\": false,\n                        \"title\": \"Role Members\",\n                        \"type\": \"array\",\n                        \"viewable\": true\n                    },\n                    \"name\": {\n                        \"description\": \"The role name, used for display purposes.\",\n                        \"searchable\": true,\n                        \"title\": \"Name\",\n                        \"type\": \"string\",\n                        \"viewable\": true\n                    },\n                    \"temporalConstraints\": {\n                        \"description\": \"An array of temporal constraints for a role\",\n                        \"isTemporalConstraint\": true,\n                        \"items\": {\n                            \"order\": [\n                                \"duration\"\n                            ],\n                            \"properties\": {\n                                \"duration\": {\n                                    \"description\": \"Duration\",\n                                    \"type\": \"string\"\n                                }\n                            },\n                            \"required\": [\n                                \"duration\"\n                            ],\n                            \"title\": \"Temporal Constraints Items\",\n                            \"type\": \"object\"\n                        },\n                        \"notifyRelationships\": [\n                            \"members\"\n                        ],\n                        \"returnByDefault\": true,\n                        \"title\": \"Temporal Constraints\",\n                        \"type\": \"array\",\n                        \"viewable\": false\n                    }\n                },\n                \"required\": [\n                    \"name\"\n                ],\n                \"title\": \"Alpha realm - Role\",\n                \"type\": \"object\"\n            },\n            \"type\": \"Managed Object\"\n        },\n        {\n            \"iconClass\": \"fa fa-database\",\n            \"meta\": {\n                \"property\": \"_meta\",\n                \"resourceCollection\": \"managed/alpha_usermeta\",\n                \"trackedProperties\": [\n                    \"createDate\",\n                    \"lastChanged\"\n                ]\n            },\n            \"name\": \"alpha_user\",\n            \"notifications\": {},\n            \"onCreate\": {\n                \"source\": \"require('onCreateUser').setDefaultFields(object);\",\n                \"type\": \"text/javascript\"\n            },\n            \"onUpdate\": {\n                \"source\": \"require('onUpdateUser').preserveLastSync(object, oldObject, request);\",\n                \"type\": \"text/javascript\"\n            },\n            \"schema\": {\n                \"$schema\": \"http://forgerock.org/json-schema#\",\n                \"description\": null,\n                \"icon\": \"fa-user\",\n                \"order\": [\n                    \"_id\",\n                    \"userName\",\n                    \"password\",\n                    \"givenName\",\n                    \"cn\",\n                    \"sn\",\n                    \"mail\",\n                    \"description\",\n                    \"accountStatus\",\n                    \"telephoneNumber\",\n                    \"postalAddress\",\n                    \"city\",\n                    \"postalCode\",\n                    \"country\",\n                    \"stateProvince\",\n                    \"roles\",\n                    \"manager\",\n                    \"authzRoles\",\n                    \"reports\",\n                    \"effectiveRoles\",\n                    \"effectiveAssignments\",\n                    \"lastSync\",\n                    \"kbaInfo\",\n                    \"preferences\",\n                    \"consentedMappings\",\n                    \"frIndexedString1\",\n                    \"frIndexedString2\",\n                    \"frIndexedString3\",\n                    \"frIndexedString4\",\n                    \"frIndexedString5\",\n                    \"frUnindexedString1\",\n                    \"frUnindexedString2\",\n                    \"frUnindexedString3\",\n                    \"frUnindexedString4\",\n                    \"frUnindexedString5\",\n                    \"frIndexedMultivalued1\",\n                    \"frIndexedMultivalued2\",\n                    \"frIndexedMultivalued3\",\n                    \"frIndexedMultivalued4\",\n                    \"frIndexedMultivalued5\",\n                    \"frUnindexedMultivalued1\",\n                    \"frUnindexedMultivalued2\",\n                    \"frUnindexedMultivalued3\",\n                    \"frUnindexedMultivalued4\",\n                    \"frUnindexedMultivalued5\",\n                    \"frIndexedDate1\",\n                    \"frIndexedDate2\",\n                    \"frIndexedDate3\",\n                    \"frIndexedDate4\",\n                    \"frIndexedDate5\",\n                    \"frUnindexedDate1\",\n                    \"frUnindexedDate2\",\n                    \"frUnindexedDate3\",\n                    \"frUnindexedDate4\",\n                    \"frUnindexedDate5\",\n                    \"frIndexedInteger1\",\n                    \"frIndexedInteger2\",\n                    \"frIndexedInteger3\",\n                    \"frIndexedInteger4\",\n                    \"frIndexedInteger5\",\n                    \"frUnindexedInteger1\",\n                    \"frUnindexedInteger2\",\n                    \"frUnindexedInteger3\",\n                    \"frUnindexedInteger4\",\n                    \"frUnindexedInteger5\",\n                    \"aliasList\",\n                    \"isAuthorisedUserOf\"\n                ],\n                \"properties\": {\n                    \"_id\": {\n                        \"deleteQueryConfig\": false,\n                        \"description\": \"User ID\",\n                        \"isPersonal\": false,\n                        \"isVirtual\": false,\n                        \"policies\": [\n                            {\n                                \"params\": {\n                                    \"forbiddenChars\": [\n                                        \"/\"\n                                    ]\n                                },\n                                \"policyId\": \"cannot-contain-characters\"\n                            }\n                        ],\n                        \"searchable\": false,\n                        \"title\": null,\n                        \"type\": \"string\",\n                        \"usageDescription\": null,\n                        \"userEditable\": false,\n                        \"viewable\": false\n                    },\n                    \"accountStatus\": {\n                        \"description\": \"Status\",\n                        \"isPersonal\": false,\n                        \"searchable\": true,\n                        \"title\": \"Status\",\n                        \"type\": \"string\",\n                        \"usageDescription\": null,\n                        \"userEditable\": false,\n                        \"viewable\": true\n                    },\n                    \"aliasList\": {\n                        \"description\": \"List of identity aliases used primarily to record social IdP subjects for this user\",\n                        \"isVirtual\": false,\n                        \"items\": {\n                            \"title\": \"User Alias Names Items\",\n                            \"type\": \"string\"\n                        },\n                        \"returnByDefault\": false,\n                        \"searchable\": false,\n                        \"title\": \"User Alias Names List\",\n                        \"type\": \"array\",\n                        \"userEditable\": true,\n                        \"viewable\": false\n                    },\n                    \"authzRoles\": {\n                        \"description\": \"Authorization Roles\",\n                        \"id\": \"urn:jsonschema:org:forgerock:openidm:managed:api:User:authzRoles\",\n                        \"isPersonal\": false,\n                        \"items\": {\n                            \"id\": \"urn:jsonschema:org:forgerock:openidm:managed:api:User:authzRoles:items\",\n                            \"properties\": {\n                                \"_ref\": {\n                                    \"description\": \"References a relationship from a managed object\",\n                                    \"type\": \"string\"\n                                },\n                                \"_refProperties\": {\n                                    \"description\": \"Supports metadata within the relationship\",\n                                    \"properties\": {\n                                        \"_id\": {\n                                            \"description\": \"_refProperties object ID\",\n                                            \"type\": \"string\"\n                                        }\n                                    },\n                                    \"title\": \"Authorization Roles Items _refProperties\",\n                                    \"type\": \"object\"\n                                }\n                            },\n                            \"resourceCollection\": [\n                                {\n                                    \"conditionalAssociationField\": \"condition\",\n                                    \"label\": \"Internal Role\",\n                                    \"path\": \"internal/role\",\n                                    \"query\": {\n                                        \"fields\": [\n                                            \"name\"\n                                        ],\n                                        \"queryFilter\": \"true\"\n                                    }\n                                }\n                            ],\n                            \"reversePropertyName\": \"authzMembers\",\n                            \"reverseRelationship\": true,\n                            \"title\": \"Authorization Roles Items\",\n                            \"type\": \"relationship\",\n                            \"validate\": true\n                        },\n                        \"returnByDefault\": false,\n                        \"title\": \"Authorization Roles\",\n                        \"type\": \"array\",\n                        \"usageDescription\": null,\n                        \"userEditable\": false,\n                        \"viewable\": true\n                    },\n                    \"city\": {\n                        \"description\": \"City\",\n                        \"isPersonal\": false,\n                        \"title\": \"City\",\n                        \"type\": \"string\",\n                        \"usageDescription\": null,\n                        \"userEditable\": true,\n                        \"viewable\": true\n                    },\n                    \"cn\": {\n                        \"description\": \"Common Name\",\n                        \"isPersonal\": true,\n                        \"isVirtual\": true,\n                        \"onStore\": {\n                            \"source\": \"object.cn || (object.givenName + ' ' + object.sn)\",\n                            \"type\": \"text/javascript\"\n                        },\n                        \"scope\": \"private\",\n                        \"searchable\": false,\n                        \"title\": \"Common Name\",\n                        \"type\": \"string\",\n                        \"userEditable\": false,\n                        \"viewable\": false\n                    },\n                    \"consentedMappings\": {\n                        \"description\": \"Consented Mappings\",\n                        \"isPersonal\": false,\n                        \"isVirtual\": false,\n                        \"items\": {\n                            \"items\": {\n                                \"order\": [\n                                    \"mapping\",\n                                    \"consentDate\"\n                                ],\n                                \"properties\": {\n                                    \"consentDate\": {\n                                        \"description\": \"Consent Date\",\n                                        \"searchable\": true,\n                                        \"title\": \"Consent Date\",\n                                        \"type\": \"string\",\n                                        \"userEditable\": true,\n                                        \"viewable\": true\n                                    },\n                                    \"mapping\": {\n                                        \"description\": \"Mapping\",\n                                        \"searchable\": true,\n                                        \"title\": \"Mapping\",\n                                        \"type\": \"string\",\n                                        \"userEditable\": true,\n                                        \"viewable\": true\n                                    }\n                                },\n                                \"required\": [\n                                    \"mapping\",\n                                    \"consentDate\"\n                                ],\n                                \"title\": \"Consented Mappings Item\",\n                                \"type\": \"object\"\n                            },\n                            \"title\": \"Consented Mappings Items\",\n                            \"type\": \"array\"\n                        },\n                        \"returnByDefault\": false,\n                        \"searchable\": false,\n                        \"title\": \"Consented Mappings\",\n                        \"type\": \"array\",\n                        \"usageDescription\": null,\n                        \"userEditable\": true,\n                        \"viewable\": false\n                    },\n                    \"country\": {\n                        \"description\": \"Country\",\n                        \"isPersonal\": false,\n                        \"title\": \"Country\",\n                        \"type\": \"string\",\n                        \"usageDescription\": null,\n                        \"userEditable\": true,\n                        \"viewable\": true\n                    },\n                    \"description\": {\n                        \"description\": \"Description\",\n                        \"isPersonal\": false,\n                        \"searchable\": true,\n                        \"title\": \"Description\",\n                        \"type\": \"string\",\n                        \"usageDescription\": null,\n                        \"userEditable\": true,\n                        \"viewable\": true\n                    },\n                    \"effectiveAssignments\": {\n                        \"description\": \"Effective Assignments\",\n                        \"isPersonal\": false,\n                        \"isVirtual\": true,\n                        \"items\": {\n                            \"title\": \"Effective Assignments Items\",\n                            \"type\": \"object\"\n                        },\n                        \"queryConfig\": {\n                            \"referencedObjectFields\": [\n                                \"*\"\n                            ],\n                            \"referencedRelationshipFields\": [\n                                \"roles\",\n                                \"assignments\"\n                            ]\n                        },\n                        \"returnByDefault\": true,\n                        \"title\": \"Effective Assignments\",\n                        \"type\": \"array\",\n                        \"usageDescription\": null,\n                        \"viewable\": false\n                    },\n                    \"effectiveRoles\": {\n                        \"description\": \"Effective Roles\",\n                        \"isPersonal\": false,\n                        \"isVirtual\": true,\n                        \"items\": {\n                            \"title\": \"Effective Roles Items\",\n                            \"type\": \"object\"\n                        },\n                        \"queryConfig\": {\n                            \"referencedRelationshipFields\": [\n                                \"roles\"\n                            ]\n                        },\n                        \"returnByDefault\": true,\n                        \"title\": \"Effective Roles\",\n                        \"type\": \"array\",\n                        \"usageDescription\": null,\n                        \"viewable\": false\n                    },\n                    \"frIndexedDate1\": {\n                        \"description\": \"Generic Indexed Date 1\",\n                        \"isPersonal\": false,\n                        \"title\": \"Generic Indexed Date 1\",\n                        \"type\": \"string\",\n                        \"usageDescription\": null,\n                        \"userEditable\": true,\n                        \"viewable\": true\n                    },\n                    \"frIndexedDate2\": {\n                        \"description\": \"Generic Indexed Date 2\",\n                        \"isPersonal\": false,\n                        \"title\": \"Generic Indexed Date 2\",\n                        \"type\": \"string\",\n                        \"usageDescription\": null,\n                        \"userEditable\": true,\n                        \"viewable\": true\n                    },\n                    \"frIndexedDate3\": {\n                        \"description\": \"Generic Indexed Date 3\",\n                        \"isPersonal\": false,\n                        \"title\": \"Generic Indexed Date 3\",\n                        \"type\": \"string\",\n                        \"usageDescription\": null,\n                        \"userEditable\": true,\n                        \"viewable\": true\n                    },\n                    \"frIndexedDate4\": {\n                        \"description\": \"Generic Indexed Date 4\",\n                        \"isPersonal\": false,\n                        \"title\": \"Generic Indexed Date 4\",\n                        \"type\": \"string\",\n                        \"usageDescription\": null,\n                        \"userEditable\": true,\n                        \"viewable\": true\n                    },\n                    \"frIndexedDate5\": {\n                        \"description\": \"Generic Indexed Date 5\",\n                        \"isPersonal\": false,\n                        \"title\": \"Generic Indexed Date 5\",\n                        \"type\": \"string\",\n                        \"usageDescription\": null,\n                        \"userEditable\": true,\n                        \"viewable\": true\n                    },\n                    \"frIndexedInteger1\": {\n                        \"description\": \"Generic Indexed Integer 1\",\n                        \"isPersonal\": false,\n                        \"title\": \"Generic Indexed Integer 1\",\n                        \"type\": \"number\",\n                        \"usageDescription\": null,\n                        \"userEditable\": true,\n                        \"viewable\": true\n                    },\n                    \"frIndexedInteger2\": {\n                        \"description\": \"Generic Indexed Integer 2\",\n                        \"isPersonal\": false,\n                        \"title\": \"Generic Indexed Integer 2\",\n                        \"type\": \"number\",\n                        \"usageDescription\": null,\n                        \"userEditable\": true,\n                        \"viewable\": true\n                    },\n                    \"frIndexedInteger3\": {\n                        \"description\": \"Generic Indexed Integer 3\",\n                        \"isPersonal\": false,\n                        \"title\": \"Generic Indexed Integer 3\",\n                        \"type\": \"number\",\n                        \"usageDescription\": null,\n                        \"userEditable\": true,\n                        \"viewable\": true\n                    },\n                    \"frIndexedInteger4\": {\n                        \"description\": \"Generic Indexed Integer 4\",\n                        \"isPersonal\": false,\n                        \"title\": \"Generic Indexed Integer 4\",\n                        \"type\": \"number\",\n                        \"usageDescription\": null,\n                        \"userEditable\": true,\n                        \"viewable\": true\n                    },\n                    \"frIndexedInteger5\": {\n                        \"description\": \"Generic Indexed Integer 5\",\n                        \"isPersonal\": false,\n                        \"title\": \"Generic Indexed Integer 5\",\n                        \"type\": \"number\",\n                        \"usageDescription\": null,\n                        \"userEditable\": true,\n                        \"viewable\": true\n                    },\n                    \"frIndexedMultivalued1\": {\n                        \"description\": \"Generic Indexed Multivalue 1\",\n                        \"isPersonal\": false,\n                        \"items\": {\n                            \"type\": \"string\"\n                        },\n                        \"title\": \"Generic Indexed Multivalue 1\",\n                        \"type\": \"array\",\n                        \"usageDescription\": null,\n                        \"userEditable\": true,\n                        \"viewable\": true\n                    },\n                    \"frIndexedMultivalued2\": {\n                        \"description\": \"Generic Indexed Multivalue 2\",\n                        \"isPersonal\": false,\n                        \"items\": {\n                            \"type\": \"string\"\n                        },\n                        \"title\": \"Generic Indexed Multivalue 2\",\n                        \"type\": \"array\",\n                        \"usageDescription\": null,\n                        \"userEditable\": true,\n                        \"viewable\": true\n                    },\n                    \"frIndexedMultivalued3\": {\n                        \"description\": \"Generic Indexed Multivalue 3\",\n                        \"isPersonal\": false,\n                        \"items\": {\n                            \"type\": \"string\"\n                        },\n                        \"title\": \"Generic Indexed Multivalue 3\",\n                        \"type\": \"array\",\n                        \"usageDescription\": null,\n                        \"userEditable\": true,\n                        \"viewable\": true\n                    },\n                    \"frIndexedMultivalued4\": {\n                        \"description\": \"Generic Indexed Multivalue 4\",\n                        \"isPersonal\": false,\n                        \"items\": {\n                            \"type\": \"string\"\n                        },\n                        \"title\": \"Generic Indexed Multivalue 4\",\n                        \"type\": \"array\",\n                        \"usageDescription\": null,\n                        \"userEditable\": true,\n                        \"viewable\": true\n                    },\n                    \"frIndexedMultivalued5\": {\n                        \"description\": \"Generic Indexed Multivalue 5\",\n                        \"isPersonal\": false,\n                        \"items\": {\n                            \"type\": \"string\"\n                        },\n                        \"title\": \"Generic Indexed Multivalue 5\",\n                        \"type\": \"array\",\n                        \"usageDescription\": null,\n                        \"userEditable\": true,\n                        \"viewable\": true\n                    },\n                    \"frIndexedString1\": {\n                        \"deleteQueryConfig\": false,\n                        \"description\": \"User Type\",\n                        \"isPersonal\": false,\n                        \"isVirtual\": false,\n                        \"searchable\": true,\n                        \"title\": \"User Type\",\n                        \"type\": \"string\",\n                        \"usageDescription\": \"Set to 'internal' for CH support Users, or to 'external' for company users\",\n                        \"userEditable\": false,\n                        \"viewable\": true\n                    },\n                    \"frIndexedString2\": {\n                        \"description\": \"Generic Indexed String 2\",\n                        \"isPersonal\": false,\n                        \"title\": \"Generic Indexed String 2\",\n                        \"type\": \"string\",\n                        \"usageDescription\": null,\n                        \"userEditable\": true,\n                        \"viewable\": true\n                    },\n                    \"frIndexedString3\": {\n                        \"description\": \"Generic Indexed String 3\",\n                        \"isPersonal\": false,\n                        \"title\": \"Generic Indexed String 3\",\n                        \"type\": \"string\",\n                        \"usageDescription\": null,\n                        \"userEditable\": true,\n                        \"viewable\": true\n                    },\n                    \"frIndexedString4\": {\n                        \"description\": \"Generic Indexed String 4\",\n                        \"isPersonal\": false,\n                        \"title\": \"Generic Indexed String 4\",\n                        \"type\": \"string\",\n                        \"usageDescription\": null,\n                        \"userEditable\": true,\n                        \"viewable\": true\n                    },\n                    \"frIndexedString5\": {\n                        \"description\": \"Generic Indexed String 5\",\n                        \"isPersonal\": false,\n                        \"title\": \"Generic Indexed String 5\",\n                        \"type\": \"string\",\n                        \"usageDescription\": null,\n                        \"userEditable\": true,\n                        \"viewable\": true\n                    },\n                    \"frUnindexedDate1\": {\n                        \"description\": \"Generic Unindexed Date 1\",\n                        \"isPersonal\": false,\n                        \"title\": \"Generic Unindexed Date 1\",\n                        \"type\": \"string\",\n                        \"usageDescription\": null,\n                        \"userEditable\": true,\n                        \"viewable\": true\n                    },\n                    \"frUnindexedDate2\": {\n                        \"description\": \"Generic Unindexed Date 2\",\n                        \"isPersonal\": false,\n                        \"title\": \"Generic Unindexed Date 2\",\n                        \"type\": \"string\",\n                        \"usageDescription\": null,\n                        \"userEditable\": true,\n                        \"viewable\": true\n                    },\n                    \"frUnindexedDate3\": {\n                        \"description\": \"Generic Unindexed Date 3\",\n                        \"isPersonal\": false,\n                        \"title\": \"Generic Unindexed Date 3\",\n                        \"type\": \"string\",\n                        \"usageDescription\": null,\n                        \"userEditable\": true,\n                        \"viewable\": true\n                    },\n                    \"frUnindexedDate4\": {\n                        \"description\": \"Generic Unindexed Date 4\",\n                        \"isPersonal\": false,\n                        \"title\": \"Generic Unindexed Date 4\",\n                        \"type\": \"string\",\n                        \"usageDescription\": null,\n                        \"userEditable\": true,\n                        \"viewable\": true\n                    },\n                    \"frUnindexedDate5\": {\n                        \"description\": \"Generic Unindexed Date 5\",\n                        \"isPersonal\": false,\n                        \"title\": \"Generic Unindexed Date 5\",\n                        \"type\": \"string\",\n                        \"usageDescription\": null,\n                        \"userEditable\": true,\n                        \"viewable\": true\n                    },\n                    \"frUnindexedInteger1\": {\n                        \"description\": \"Generic Unindexed Integer 1\",\n                        \"isPersonal\": false,\n                        \"title\": \"Generic Unindexed Integer 1\",\n                        \"type\": \"number\",\n                        \"usageDescription\": null,\n                        \"userEditable\": true,\n                        \"viewable\": true\n                    },\n                    \"frUnindexedInteger2\": {\n                        \"description\": \"Generic Unindexed Integer 2\",\n                        \"isPersonal\": false,\n                        \"title\": \"Generic Unindexed Integer 2\",\n                        \"type\": \"number\",\n                        \"usageDescription\": null,\n                        \"userEditable\": true,\n                        \"viewable\": true\n                    },\n                    \"frUnindexedInteger3\": {\n                        \"description\": \"Generic Unindexed Integer 3\",\n                        \"isPersonal\": false,\n                        \"title\": \"Generic Unindexed Integer 3\",\n                        \"type\": \"number\",\n                        \"usageDescription\": null,\n                        \"userEditable\": true,\n                        \"viewable\": true\n                    },\n                    \"frUnindexedInteger4\": {\n                        \"description\": \"Generic Unindexed Integer 4\",\n                        \"isPersonal\": false,\n                        \"title\": \"Generic Unindexed Integer 4\",\n                        \"type\": \"number\",\n                        \"usageDescription\": null,\n                        \"userEditable\": true,\n                        \"viewable\": true\n                    },\n                    \"frUnindexedInteger5\": {\n                        \"description\": \"Generic Unindexed Integer 5\",\n                        \"isPersonal\": false,\n                        \"title\": \"Generic Unindexed Integer 5\",\n                        \"type\": \"number\",\n                        \"usageDescription\": null,\n                        \"userEditable\": true,\n                        \"viewable\": true\n                    },\n                    \"frUnindexedMultivalued1\": {\n                        \"description\": \"Generic Unindexed Multivalue 1\",\n                        \"isPersonal\": false,\n                        \"items\": {\n                            \"type\": \"string\"\n                        },\n                        \"title\": \"Generic Unindexed Multivalue 1\",\n                        \"type\": \"array\",\n                        \"usageDescription\": null,\n                        \"userEditable\": true,\n                        \"viewable\": true\n                    },\n                    \"frUnindexedMultivalued2\": {\n                        \"description\": \"Generic Unindexed Multivalue 2\",\n                        \"isPersonal\": false,\n                        \"items\": {\n                            \"type\": \"string\"\n                        },\n                        \"title\": \"Generic Unindexed Multivalue 2\",\n                        \"type\": \"array\",\n                        \"usageDescription\": null,\n                        \"userEditable\": true,\n                        \"viewable\": true\n                    },\n                    \"frUnindexedMultivalued3\": {\n                        \"description\": \"Generic Unindexed Multivalue 3\",\n                        \"isPersonal\": false,\n                        \"items\": {\n                            \"type\": \"string\"\n                        },\n                        \"title\": \"Generic Unindexed Multivalue 3\",\n                        \"type\": \"array\",\n                        \"usageDescription\": null,\n                        \"userEditable\": true,\n                        \"viewable\": true\n                    },\n                    \"frUnindexedMultivalued4\": {\n                        \"description\": \"Generic Unindexed Multivalue 4\",\n                        \"isPersonal\": false,\n                        \"items\": {\n                            \"type\": \"string\"\n                        },\n                        \"title\": \"Generic Unindexed Multivalue 4\",\n                        \"type\": \"array\",\n                        \"usageDescription\": null,\n                        \"userEditable\": true,\n                        \"viewable\": true\n                    },\n                    \"frUnindexedMultivalued5\": {\n                        \"description\": \"Generic Unindexed Multivalue 5\",\n                        \"isPersonal\": false,\n                        \"items\": {\n                            \"type\": \"string\"\n                        },\n                        \"title\": \"Generic Unindexed Multivalue 5\",\n                        \"type\": \"array\",\n                        \"usageDescription\": null,\n                        \"userEditable\": true,\n                        \"viewable\": true\n                    },\n                    \"frUnindexedString1\": {\n                        \"deleteQueryConfig\": false,\n                        \"description\": \"Generic Unindexed String 1\",\n                        \"isPersonal\": false,\n                        \"isVirtual\": false,\n                        \"searchable\": false,\n                        \"title\": \"Generic Unindexed String 1\",\n                        \"type\": \"string\",\n                        \"usageDescription\": null,\n                        \"userEditable\": true,\n                        \"viewable\": true\n                    },\n                    \"frUnindexedString2\": {\n                        \"deleteQueryConfig\": false,\n                        \"description\": \"Generic Unindexed String 2\",\n                        \"isPersonal\": false,\n                        \"isVirtual\": false,\n                        \"searchable\": false,\n                        \"title\": \"Generic Unindexed String 2\",\n                        \"type\": \"string\",\n                        \"usageDescription\": null,\n                        \"userEditable\": true,\n                        \"viewable\": true\n                    },\n                    \"frUnindexedString3\": {\n                        \"deleteQueryConfig\": false,\n                        \"description\": \"Generic Unindexed String 3\",\n                        \"isPersonal\": false,\n                        \"isVirtual\": false,\n                        \"searchable\": false,\n                        \"title\": \"Generic Unindexed String 3\",\n                        \"type\": \"string\",\n                        \"usageDescription\": null,\n                        \"userEditable\": true,\n                        \"viewable\": true\n                    },\n                    \"frUnindexedString4\": {\n                        \"deleteQueryConfig\": false,\n                        \"description\": \"Generic Unindexed String 4\",\n                        \"isPersonal\": false,\n                        \"isVirtual\": false,\n                        \"searchable\": false,\n                        \"title\": \"initCode\",\n                        \"type\": \"string\",\n                        \"usageDescription\": null,\n                        \"userEditable\": true,\n                        \"viewable\": true\n                    },\n                    \"frUnindexedString5\": {\n                        \"description\": \"Generic Unindexed String 5\",\n                        \"isPersonal\": false,\n                        \"title\": \"Generic Unindexed String 5\",\n                        \"type\": \"string\",\n                        \"usageDescription\": null,\n                        \"userEditable\": true,\n                        \"viewable\": true\n                    },\n                    \"givenName\": {\n                        \"description\": \"First Name\",\n                        \"isPersonal\": true,\n                        \"searchable\": true,\n                        \"title\": \"First Name\",\n                        \"type\": \"string\",\n                        \"usageDescription\": null,\n                        \"userEditable\": true,\n                        \"viewable\": true\n                    },\n                    \"isAuthorisedUserOf\": {\n                        \"deleteQueryConfig\": false,\n                        \"description\": \"Authorised Users are Users that are associated with a Company\",\n                        \"isVirtual\": false,\n                        \"items\": {\n                            \"notifySelf\": false,\n                            \"properties\": {\n                                \"_ref\": {\n                                    \"type\": \"string\"\n                                },\n                                \"_refProperties\": {\n                                    \"properties\": {\n                                        \"_id\": {\n                                            \"propName\": \"_id\",\n                                            \"required\": false,\n                                            \"type\": \"string\"\n                                        },\n                                        \"permissionAdmin\": {\n                                            \"label\": \"Administer the Company\",\n                                            \"propName\": \"permissionAdmin\",\n                                            \"required\": false,\n                                            \"type\": \"string\"\n                                        },\n                                        \"permissionFiling\": {\n                                            \"label\": \"File Financial Statments\",\n                                            \"propName\": \"permissionFiling\",\n                                            \"required\": false,\n                                            \"type\": \"string\"\n                                        },\n                                        \"permissionUpdate\": {\n                                            \"label\": \"Update company details\",\n                                            \"propName\": \"permissionUpdate\",\n                                            \"required\": false,\n                                            \"type\": \"string\"\n                                        }\n                                    },\n                                    \"type\": \"object\"\n                                }\n                            },\n                            \"resourceCollection\": [\n                                {\n                                    \"label\": \"Company\",\n                                    \"notify\": false,\n                                    \"path\": \"managed/Company\",\n                                    \"query\": {\n                                        \"fields\": [\n                                            \"name\",\n                                            \"number\"\n                                        ],\n                                        \"queryFilter\": \"true\",\n                                        \"sortKeys\": []\n                                    }\n                                }\n                            ],\n                            \"reversePropertyName\": \"authorisedUsers\",\n                            \"reverseRelationship\": true,\n                            \"type\": \"relationship\",\n                            \"validate\": false\n                        },\n                        \"referencedObjectFields\": null,\n                        \"referencedRelationshipFields\": null,\n                        \"requiredByParent\": false,\n                        \"returnByDefault\": false,\n                        \"searchable\": false,\n                        \"title\": \"Authorised User Of\",\n                        \"type\": \"array\",\n                        \"userEditable\": false,\n                        \"viewable\": true\n                    },\n                    \"kbaInfo\": {\n                        \"description\": \"KBA Info\",\n                        \"isPersonal\": true,\n                        \"items\": {\n                            \"order\": [\n                                \"answer\",\n                                \"customQuestion\",\n                                \"questionId\"\n                            ],\n                            \"properties\": {\n                                \"answer\": {\n                                    \"description\": \"Answer\",\n                                    \"type\": \"string\"\n                                },\n                                \"customQuestion\": {\n                                    \"description\": \"Custom question\",\n                                    \"type\": \"string\"\n                                },\n                                \"questionId\": {\n                                    \"description\": \"Question ID\",\n                                    \"type\": \"string\"\n                                }\n                            },\n                            \"required\": [],\n                            \"title\": \"KBA Info Items\",\n                            \"type\": \"object\"\n                        },\n                        \"type\": \"array\",\n                        \"usageDescription\": null,\n                        \"userEditable\": true,\n                        \"viewable\": false\n                    },\n                    \"lastSync\": {\n                        \"description\": \"Last Sync timestamp\",\n                        \"isPersonal\": false,\n                        \"order\": [\n                            \"effectiveAssignments\",\n                            \"timestamp\"\n                        ],\n                        \"properties\": {\n                            \"effectiveAssignments\": {\n                                \"description\": \"Effective Assignments\",\n                                \"items\": {\n                                    \"title\": \"Effective Assignments Items\",\n                                    \"type\": \"object\"\n                                },\n                                \"title\": \"Effective Assignments\",\n                                \"type\": \"array\"\n                            },\n                            \"timestamp\": {\n                                \"description\": \"Timestamp\",\n                                \"type\": \"string\"\n                            }\n                        },\n                        \"scope\": \"private\",\n                        \"searchable\": false,\n                        \"title\": \"Last Sync timestamp\",\n                        \"type\": \"object\",\n                        \"usageDescription\": null,\n                        \"viewable\": false\n                    },\n                    \"mail\": {\n                        \"description\": \"Email Address\",\n                        \"isPersonal\": true,\n                        \"policies\": [\n                            {\n                                \"policyId\": \"valid-email-address-format\"\n                            }\n                        ],\n                        \"searchable\": true,\n                        \"title\": \"Email Address\",\n                        \"type\": \"string\",\n                        \"usageDescription\": null,\n                        \"userEditable\": true,\n                        \"viewable\": true\n                    },\n                    \"manager\": {\n                        \"description\": \"Manager\",\n                        \"isPersonal\": false,\n                        \"properties\": {\n                            \"_ref\": {\n                                \"description\": \"References a relationship from a managed object\",\n                                \"type\": \"string\"\n                            },\n                            \"_refProperties\": {\n                                \"description\": \"Supports metadata within the relationship\",\n                                \"properties\": {\n                                    \"_id\": {\n                                        \"description\": \"_refProperties object ID\",\n                                        \"type\": \"string\"\n                                    }\n                                },\n                                \"title\": \"Manager _refProperties\",\n                                \"type\": \"object\"\n                            }\n                        },\n                        \"resourceCollection\": [\n                            {\n                                \"label\": \"User\",\n                                \"path\": \"managed/alpha_user\",\n                                \"query\": {\n                                    \"fields\": [\n                                        \"userName\",\n                                        \"givenName\",\n                                        \"sn\"\n                                    ],\n                                    \"queryFilter\": \"true\"\n                                }\n                            }\n                        ],\n                        \"reversePropertyName\": \"reports\",\n                        \"reverseRelationship\": true,\n                        \"searchable\": false,\n                        \"title\": \"Manager\",\n                        \"type\": \"relationship\",\n                        \"usageDescription\": null,\n                        \"userEditable\": false,\n                        \"validate\": true,\n                        \"viewable\": true\n                    },\n                    \"password\": {\n                        \"description\": \"Password\",\n                        \"isPersonal\": false,\n                        \"isProtected\": true,\n                        \"scope\": \"private\",\n                        \"searchable\": false,\n                        \"title\": \"Password\",\n                        \"type\": \"string\",\n                        \"usageDescription\": null,\n                        \"userEditable\": true,\n                        \"viewable\": false\n                    },\n                    \"postalAddress\": {\n                        \"description\": \"Address 1\",\n                        \"isPersonal\": true,\n                        \"title\": \"Address 1\",\n                        \"type\": \"string\",\n                        \"usageDescription\": null,\n                        \"userEditable\": true,\n                        \"viewable\": true\n                    },\n                    \"postalCode\": {\n                        \"description\": \"Postal Code\",\n                        \"isPersonal\": false,\n                        \"title\": \"Postal Code\",\n                        \"type\": \"string\",\n                        \"usageDescription\": null,\n                        \"userEditable\": true,\n                        \"viewable\": true\n                    },\n                    \"preferences\": {\n                        \"description\": \"Preferences\",\n                        \"isPersonal\": false,\n                        \"order\": [\n                            \"updates\",\n                            \"marketing\"\n                        ],\n                        \"properties\": {\n                            \"marketing\": {\n                                \"description\": \"Send me special offers and services\",\n                                \"type\": \"boolean\"\n                            },\n                            \"updates\": {\n                                \"description\": \"Send me news and updates\",\n                                \"type\": \"boolean\"\n                            }\n                        },\n                        \"searchable\": false,\n                        \"title\": \"Preferences\",\n                        \"type\": \"object\",\n                        \"usageDescription\": null,\n                        \"userEditable\": true,\n                        \"viewable\": true\n                    },\n                    \"reports\": {\n                        \"description\": \"Direct Reports\",\n                        \"isPersonal\": false,\n                        \"items\": {\n                            \"id\": \"urn:jsonschema:org:forgerock:openidm:managed:api:User:reports:items\",\n                            \"properties\": {\n                                \"_ref\": {\n                                    \"description\": \"References a relationship from a managed object\",\n                                    \"type\": \"string\"\n                                },\n                                \"_refProperties\": {\n                                    \"description\": \"Supports metadata within the relationship\",\n                                    \"properties\": {\n                                        \"_id\": {\n                                            \"description\": \"_refProperties object ID\",\n                                            \"type\": \"string\"\n                                        }\n                                    },\n                                    \"title\": \"Direct Reports Items _refProperties\",\n                                    \"type\": \"object\"\n                                }\n                            },\n                            \"resourceCollection\": [\n                                {\n                                    \"label\": \"User\",\n                                    \"path\": \"managed/alpha_user\",\n                                    \"query\": {\n                                        \"fields\": [\n                                            \"userName\",\n                                            \"givenName\",\n                                            \"sn\"\n                                        ],\n                                        \"queryFilter\": \"true\"\n                                    }\n                                }\n                            ],\n                            \"reversePropertyName\": \"manager\",\n                            \"reverseRelationship\": true,\n                            \"title\": \"Direct Reports Items\",\n                            \"type\": \"relationship\",\n                            \"validate\": true\n                        },\n                        \"returnByDefault\": false,\n                        \"title\": \"Direct Reports\",\n                        \"type\": \"array\",\n                        \"usageDescription\": null,\n                        \"userEditable\": false,\n                        \"viewable\": true\n                    },\n                    \"roles\": {\n                        \"description\": \"Provisioning Roles\",\n                        \"id\": \"urn:jsonschema:org:forgerock:openidm:managed:api:User:roles\",\n                        \"isPersonal\": false,\n                        \"items\": {\n                            \"id\": \"urn:jsonschema:org:forgerock:openidm:managed:api:User:roles:items\",\n                            \"notifySelf\": true,\n                            \"properties\": {\n                                \"_ref\": {\n                                    \"description\": \"References a relationship from a managed object\",\n                                    \"type\": \"string\"\n                                },\n                                \"_refProperties\": {\n                                    \"description\": \"Supports metadata within the relationship\",\n                                    \"properties\": {\n                                        \"_grantType\": {\n                                            \"description\": \"Grant Type\",\n                                            \"label\": \"Grant Type\",\n                                            \"type\": \"string\"\n                                        },\n                                        \"_id\": {\n                                            \"description\": \"_refProperties object ID\",\n                                            \"type\": \"string\"\n                                        }\n                                    },\n                                    \"title\": \"Provisioning Roles Items _refProperties\",\n                                    \"type\": \"object\"\n                                }\n                            },\n                            \"resourceCollection\": [\n                                {\n                                    \"conditionalAssociationField\": \"condition\",\n                                    \"label\": \"Role\",\n                                    \"path\": \"managed/alpha_role\",\n                                    \"query\": {\n                                        \"fields\": [\n                                            \"name\"\n                                        ],\n                                        \"queryFilter\": \"true\"\n                                    }\n                                }\n                            ],\n                            \"reversePropertyName\": \"members\",\n                            \"reverseRelationship\": true,\n                            \"title\": \"Provisioning Roles Items\",\n                            \"type\": \"relationship\",\n                            \"validate\": true\n                        },\n                        \"relationshipGrantTemporalConstraintsEnforced\": true,\n                        \"returnByDefault\": false,\n                        \"title\": \"Provisioning Roles\",\n                        \"type\": \"array\",\n                        \"usageDescription\": null,\n                        \"userEditable\": false,\n                        \"viewable\": true\n                    },\n                    \"sn\": {\n                        \"description\": \"Last Name\",\n                        \"isPersonal\": true,\n                        \"searchable\": true,\n                        \"title\": \"Last Name\",\n                        \"type\": \"string\",\n                        \"usageDescription\": null,\n                        \"userEditable\": true,\n                        \"viewable\": true\n                    },\n                    \"stateProvince\": {\n                        \"description\": \"State/Province\",\n                        \"isPersonal\": false,\n                        \"title\": \"State/Province\",\n                        \"type\": \"string\",\n                        \"usageDescription\": null,\n                        \"userEditable\": true,\n                        \"viewable\": true\n                    },\n                    \"telephoneNumber\": {\n                        \"deleteQueryConfig\": false,\n                        \"description\": \"Telephone Number\",\n                        \"isPersonal\": true,\n                        \"isVirtual\": false,\n                        \"pattern\": \"^\\\\+?([0-9\\\\- \\\\(\\\\)])*$\",\n                        \"searchable\": false,\n                        \"title\": \"Telephone Number\",\n                        \"type\": \"string\",\n                        \"usageDescription\": null,\n                        \"userEditable\": true,\n                        \"viewable\": true\n                    },\n                    \"userName\": {\n                        \"description\": \"Username\",\n                        \"isPersonal\": true,\n                        \"minLength\": 1,\n                        \"policies\": [\n                            {\n                                \"policyId\": \"valid-username\"\n                            },\n                            {\n                                \"params\": {\n                                    \"forbiddenChars\": [\n                                        \"/\"\n                                    ]\n                                },\n                                \"policyId\": \"cannot-contain-characters\"\n                            },\n                            {\n                                \"params\": {\n                                    \"minLength\": 1\n                                },\n                                \"policyId\": \"minimum-length\"\n                            },\n                            {\n                                \"params\": {\n                                    \"maxLength\": 255\n                                },\n                                \"policyId\": \"maximum-length\"\n                            }\n                        ],\n                        \"searchable\": true,\n                        \"title\": \"Username\",\n                        \"type\": \"string\",\n                        \"usageDescription\": null,\n                        \"userEditable\": true,\n                        \"viewable\": true\n                    }\n                },\n                \"required\": [\n                    \"userName\",\n                    \"givenName\",\n                    \"sn\",\n                    \"mail\"\n                ],\n                \"title\": \"Alpha realm - User\",\n                \"type\": \"object\"\n            },\n            \"type\": \"Managed Object\"\n        },\n        {\n            \"iconClass\": \"fa fa-database\",\n            \"name\": \"bravo_assignment\",\n            \"schema\": {\n                \"$schema\": \"http://forgerock.org/json-schema#\",\n                \"description\": \"A role assignment\",\n                \"icon\": \"fa-key\",\n                \"id\": \"urn:jsonschema:org:forgerock:openidm:managed:api:Assignment\",\n                \"mat-icon\": \"vpn_key\",\n                \"order\": [\n                    \"_id\",\n                    \"name\",\n                    \"description\",\n                    \"mapping\",\n                    \"attributes\",\n                    \"linkQualifiers\",\n                    \"roles\"\n                ],\n                \"properties\": {\n                    \"_id\": {\n                        \"description\": \"The assignment ID\",\n                        \"searchable\": false,\n                        \"title\": \"Name\",\n                        \"type\": \"string\",\n                        \"viewable\": false\n                    },\n                    \"attributes\": {\n                        \"description\": \"The attributes operated on by this assignment.\",\n                        \"items\": {\n                            \"order\": [\n                                \"assignmentOperation\",\n                                \"unassignmentOperation\",\n                                \"name\",\n                                \"value\"\n                            ],\n                            \"properties\": {\n                                \"assignmentOperation\": {\n                                    \"description\": \"Assignment operation\",\n                                    \"type\": \"string\"\n                                },\n                                \"name\": {\n                                    \"description\": \"Name\",\n                                    \"type\": \"string\"\n                                },\n                                \"unassignmentOperation\": {\n                                    \"description\": \"Unassignment operation\",\n                                    \"type\": \"string\"\n                                },\n                                \"value\": {\n                                    \"description\": \"Value\",\n                                    \"type\": \"string\"\n                                }\n                            },\n                            \"required\": [],\n                            \"title\": \"Assignment Attributes Items\",\n                            \"type\": \"object\"\n                        },\n                        \"notifyRelationships\": [\n                            \"roles\"\n                        ],\n                        \"title\": \"Assignment Attributes\",\n                        \"type\": \"array\",\n                        \"viewable\": true\n                    },\n                    \"description\": {\n                        \"description\": \"The assignment description, used for display purposes.\",\n                        \"searchable\": true,\n                        \"title\": \"Description\",\n                        \"type\": \"string\",\n                        \"viewable\": true\n                    },\n                    \"linkQualifiers\": {\n                        \"description\": \"Conditional link qualifiers to restrict this assignment to.\",\n                        \"items\": {\n                            \"title\": \"Link Qualifiers Items\",\n                            \"type\": \"string\"\n                        },\n                        \"title\": \"Link Qualifiers\",\n                        \"type\": \"array\",\n                        \"viewable\": true\n                    },\n                    \"mapping\": {\n                        \"description\": \"The name of the mapping this assignment applies to\",\n                        \"policies\": [\n                            {\n                                \"policyId\": \"mapping-exists\"\n                            }\n                        ],\n                        \"searchable\": true,\n                        \"title\": \"Mapping\",\n                        \"type\": \"string\",\n                        \"viewable\": true\n                    },\n                    \"name\": {\n                        \"description\": \"The assignment name, used for display purposes.\",\n                        \"searchable\": true,\n                        \"title\": \"Name\",\n                        \"type\": \"string\",\n                        \"viewable\": true\n                    },\n                    \"roles\": {\n                        \"description\": \"Managed Roles\",\n                        \"items\": {\n                            \"id\": \"urn:jsonschema:org:forgerock:openidm:managed:api:Assignment:roles:items\",\n                            \"properties\": {\n                                \"_ref\": {\n                                    \"description\": \"References a relationship from a managed object\",\n                                    \"type\": \"string\"\n                                },\n                                \"_refProperties\": {\n                                    \"description\": \"Supports metadata within the relationship\",\n                                    \"properties\": {\n                                        \"_id\": {\n                                            \"description\": \"_refProperties object ID\",\n                                            \"type\": \"string\"\n                                        }\n                                    },\n                                    \"title\": \"Managed Roles Items _refProperties\",\n                                    \"type\": \"object\"\n                                }\n                            },\n                            \"resourceCollection\": [\n                                {\n                                    \"label\": \"Role\",\n                                    \"notify\": true,\n                                    \"path\": \"managed/bravo_role\",\n                                    \"query\": {\n                                        \"fields\": [\n                                            \"name\"\n                                        ],\n                                        \"queryFilter\": \"true\"\n                                    }\n                                }\n                            ],\n                            \"reversePropertyName\": \"assignments\",\n                            \"reverseRelationship\": true,\n                            \"title\": \"Managed Roles Items\",\n                            \"type\": \"relationship\",\n                            \"validate\": true\n                        },\n                        \"returnByDefault\": false,\n                        \"title\": \"Managed Roles\",\n                        \"type\": \"array\",\n                        \"userEditable\": false,\n                        \"viewable\": true\n                    }\n                },\n                \"required\": [\n                    \"name\",\n                    \"description\",\n                    \"mapping\"\n                ],\n                \"title\": \"Bravo realm - Assignment\",\n                \"type\": \"object\"\n            },\n            \"type\": \"Managed Object\"\n        },\n        {\n            \"iconClass\": \"fa fa-database\",\n            \"name\": \"bravo_role\",\n            \"onDelete\": {\n                \"file\": \"roles/onDelete-roles.js\",\n                \"type\": \"text/javascript\"\n            },\n            \"postCreate\": {\n                \"source\": \"require('roles/postOperation-roles').manageTemporalConstraints(resourceName);\",\n                \"type\": \"text/javascript\"\n            },\n            \"postDelete\": {\n                \"source\": \"require('roles/postOperation-roles').manageTemporalConstraints(resourceName);\",\n                \"type\": \"text/javascript\"\n            },\n            \"postUpdate\": {\n                \"source\": \"require('roles/postOperation-roles').manageTemporalConstraints(resourceName);\",\n                \"type\": \"text/javascript\"\n            },\n            \"schema\": {\n                \"$schema\": \"http://forgerock.org/json-schema#\",\n                \"description\": \"\",\n                \"icon\": \"fa-check-square-o\",\n                \"id\": \"urn:jsonschema:org:forgerock:openidm:managed:api:Role\",\n                \"mat-icon\": \"assignment_ind\",\n                \"order\": [\n                    \"_id\",\n                    \"name\",\n                    \"description\",\n                    \"members\",\n                    \"assignments\",\n                    \"condition\",\n                    \"temporalConstraints\"\n                ],\n                \"properties\": {\n                    \"_id\": {\n                        \"description\": \"Role ID\",\n                        \"searchable\": false,\n                        \"title\": \"Name\",\n                        \"type\": \"string\",\n                        \"viewable\": false\n                    },\n                    \"assignments\": {\n                        \"description\": \"Managed Assignments\",\n                        \"items\": {\n                            \"id\": \"urn:jsonschema:org:forgerock:openidm:managed:api:Role:assignments:items\",\n                            \"notifySelf\": true,\n                            \"properties\": {\n                                \"_ref\": {\n                                    \"description\": \"References a relationship from a managed object\",\n                                    \"type\": \"string\"\n                                },\n                                \"_refProperties\": {\n                                    \"description\": \"Supports metadata within the relationship\",\n                                    \"properties\": {\n                                        \"_id\": {\n                                            \"description\": \"_refProperties object ID\",\n                                            \"type\": \"string\"\n                                        }\n                                    },\n                                    \"title\": \"Managed Assignments Items _refProperties\",\n                                    \"type\": \"object\"\n                                }\n                            },\n                            \"resourceCollection\": [\n                                {\n                                    \"label\": \"Assignment\",\n                                    \"path\": \"managed/bravo_assignment\",\n                                    \"query\": {\n                                        \"fields\": [\n                                            \"name\"\n                                        ],\n                                        \"queryFilter\": \"true\"\n                                    }\n                                }\n                            ],\n                            \"reversePropertyName\": \"roles\",\n                            \"reverseRelationship\": true,\n                            \"title\": \"Managed Assignments Items\",\n                            \"type\": \"relationship\",\n                            \"validate\": true\n                        },\n                        \"notifyRelationships\": [\n                            \"members\"\n                        ],\n                        \"returnByDefault\": false,\n                        \"title\": \"Managed Assignments\",\n                        \"type\": \"array\",\n                        \"viewable\": true\n                    },\n                    \"condition\": {\n                        \"description\": \"A conditional filter for this role\",\n                        \"isConditional\": true,\n                        \"searchable\": false,\n                        \"title\": \"Condition\",\n                        \"type\": \"string\",\n                        \"viewable\": false\n                    },\n                    \"description\": {\n                        \"description\": \"The role description, used for display purposes.\",\n                        \"searchable\": true,\n                        \"title\": \"Description\",\n                        \"type\": \"string\",\n                        \"viewable\": true\n                    },\n                    \"members\": {\n                        \"description\": \"Role Members\",\n                        \"items\": {\n                            \"id\": \"urn:jsonschema:org:forgerock:openidm:managed:api:Role:members:items\",\n                            \"properties\": {\n                                \"_ref\": {\n                                    \"description\": \"References a relationship from a managed object\",\n                                    \"type\": \"string\"\n                                },\n                                \"_refProperties\": {\n                                    \"description\": \"Supports metadata within the relationship\",\n                                    \"properties\": {\n                                        \"_grantType\": {\n                                            \"description\": \"Grant Type\",\n                                            \"label\": \"Grant Type\",\n                                            \"type\": \"string\"\n                                        },\n                                        \"_id\": {\n                                            \"description\": \"_refProperties object ID\",\n                                            \"type\": \"string\"\n                                        }\n                                    },\n                                    \"title\": \"Role Members Items _refProperties\",\n                                    \"type\": \"object\"\n                                }\n                            },\n                            \"resourceCollection\": [\n                                {\n                                    \"conditionalAssociation\": true,\n                                    \"label\": \"User\",\n                                    \"notify\": true,\n                                    \"path\": \"managed/bravo_user\",\n                                    \"query\": {\n                                        \"fields\": [\n                                            \"userName\",\n                                            \"givenName\",\n                                            \"sn\"\n                                        ],\n                                        \"queryFilter\": \"true\"\n                                    }\n                                }\n                            ],\n                            \"reversePropertyName\": \"roles\",\n                            \"reverseRelationship\": true,\n                            \"title\": \"Role Members Items\",\n                            \"type\": \"relationship\",\n                            \"validate\": true\n                        },\n                        \"relationshipGrantTemporalConstraintsEnforced\": true,\n                        \"returnByDefault\": false,\n                        \"title\": \"Role Members\",\n                        \"type\": \"array\",\n                        \"viewable\": true\n                    },\n                    \"name\": {\n                        \"description\": \"The role name, used for display purposes.\",\n                        \"searchable\": true,\n                        \"title\": \"Name\",\n                        \"type\": \"string\",\n                        \"viewable\": true\n                    },\n                    \"temporalConstraints\": {\n                        \"description\": \"An array of temporal constraints for a role\",\n                        \"isTemporalConstraint\": true,\n                        \"items\": {\n                            \"order\": [\n                                \"duration\"\n                            ],\n                            \"properties\": {\n                                \"duration\": {\n                                    \"description\": \"Duration\",\n                                    \"type\": \"string\"\n                                }\n                            },\n                            \"required\": [\n                                \"duration\"\n                            ],\n                            \"title\": \"Temporal Constraints Items\",\n                            \"type\": \"object\"\n                        },\n                        \"notifyRelationships\": [\n                            \"members\"\n                        ],\n                        \"returnByDefault\": true,\n                        \"title\": \"Temporal Constraints\",\n                        \"type\": \"array\",\n                        \"viewable\": false\n                    }\n                },\n                \"required\": [\n                    \"name\"\n                ],\n                \"title\": \"Bravo realm - Role\",\n                \"type\": \"object\"\n            },\n            \"type\": \"Managed Object\"\n        },\n        {\n            \"iconClass\": \"fa fa-database\",\n            \"meta\": {\n                \"property\": \"_meta\",\n                \"resourceCollection\": \"managed/bravo_usermeta\",\n                \"trackedProperties\": [\n                    \"createDate\",\n                    \"lastChanged\"\n                ]\n            },\n            \"name\": \"bravo_user\",\n            \"notifications\": {},\n            \"onCreate\": {\n                \"source\": \"require('onCreateUser').setDefaultFields(object);\",\n                \"type\": \"text/javascript\"\n            },\n            \"onUpdate\": {\n                \"source\": \"require('onUpdateUser').preserveLastSync(object, oldObject, request);\",\n                \"type\": \"text/javascript\"\n            },\n            \"schema\": {\n                \"$schema\": \"http://json-schema.org/draft-03/schema\",\n                \"icon\": \"fa-user\",\n                \"id\": \"urn:jsonschema:org:forgerock:openidm:managed:api:User\",\n                \"mat-icon\": \"people\",\n                \"order\": [\n                    \"_id\",\n                    \"userName\",\n                    \"password\",\n                    \"givenName\",\n                    \"cn\",\n                    \"sn\",\n                    \"mail\",\n                    \"description\",\n                    \"accountStatus\",\n                    \"telephoneNumber\",\n                    \"postalAddress\",\n                    \"city\",\n                    \"postalCode\",\n                    \"country\",\n                    \"stateProvince\",\n                    \"roles\",\n                    \"manager\",\n                    \"authzRoles\",\n                    \"reports\",\n                    \"effectiveRoles\",\n                    \"effectiveAssignments\",\n                    \"lastSync\",\n                    \"kbaInfo\",\n                    \"preferences\",\n                    \"consentedMappings\",\n                    \"frIndexedString1\",\n                    \"frIndexedString2\",\n                    \"frIndexedString3\",\n                    \"frIndexedString4\",\n                    \"frIndexedString5\",\n                    \"frUnindexedString1\",\n                    \"frUnindexedString2\",\n                    \"frUnindexedString3\",\n                    \"frUnindexedString4\",\n                    \"frUnindexedString5\",\n                    \"frIndexedMultivalued1\",\n                    \"frIndexedMultivalued2\",\n                    \"frIndexedMultivalued3\",\n                    \"frIndexedMultivalued4\",\n                    \"frIndexedMultivalued5\",\n                    \"frUnindexedMultivalued1\",\n                    \"frUnindexedMultivalued2\",\n                    \"frUnindexedMultivalued3\",\n                    \"frUnindexedMultivalued4\",\n                    \"frUnindexedMultivalued5\",\n                    \"frIndexedDate1\",\n                    \"frIndexedDate2\",\n                    \"frIndexedDate3\",\n                    \"frIndexedDate4\",\n                    \"frIndexedDate5\",\n                    \"frUnindexedDate1\",\n                    \"frUnindexedDate2\",\n                    \"frUnindexedDate3\",\n                    \"frUnindexedDate4\",\n                    \"frUnindexedDate5\",\n                    \"frIndexedInteger1\",\n                    \"frIndexedInteger2\",\n                    \"frIndexedInteger3\",\n                    \"frIndexedInteger4\",\n                    \"frIndexedInteger5\",\n                    \"frUnindexedInteger1\",\n                    \"frUnindexedInteger2\",\n                    \"frUnindexedInteger3\",\n                    \"frUnindexedInteger4\",\n                    \"frUnindexedInteger5\"\n                ],\n                \"properties\": {\n                    \"_id\": {\n                        \"description\": \"User ID\",\n                        \"isPersonal\": false,\n                        \"policies\": [\n                            {\n                                \"params\": {\n                                    \"forbiddenChars\": [\n                                        \"/\"\n                                    ]\n                                },\n                                \"policyId\": \"cannot-contain-characters\"\n                            }\n                        ],\n                        \"searchable\": false,\n                        \"type\": \"string\",\n                        \"usageDescription\": \"\",\n                        \"userEditable\": false,\n                        \"viewable\": false\n                    },\n                    \"accountStatus\": {\n                        \"description\": \"Status\",\n                        \"isPersonal\": false,\n                        \"searchable\": true,\n                        \"title\": \"Status\",\n                        \"type\": \"string\",\n                        \"usageDescription\": \"\",\n                        \"userEditable\": false,\n                        \"viewable\": true\n                    },\n                    \"aliasList\": {\n                        \"description\": \"List of identity aliases used primarily to record social IdP subjects for this user\",\n                        \"isVirtual\": false,\n                        \"items\": {\n                            \"title\": \"User Alias Names Items\",\n                            \"type\": \"string\"\n                        },\n                        \"returnByDefault\": false,\n                        \"searchable\": false,\n                        \"title\": \"User Alias Names List\",\n                        \"type\": \"array\",\n                        \"userEditable\": true,\n                        \"viewable\": false\n                    },\n                    \"authzRoles\": {\n                        \"description\": \"Authorization Roles\",\n                        \"id\": \"urn:jsonschema:org:forgerock:openidm:managed:api:User:authzRoles\",\n                        \"isPersonal\": false,\n                        \"items\": {\n                            \"id\": \"urn:jsonschema:org:forgerock:openidm:managed:api:User:authzRoles:items\",\n                            \"properties\": {\n                                \"_ref\": {\n                                    \"description\": \"References a relationship from a managed object\",\n                                    \"type\": \"string\"\n                                },\n                                \"_refProperties\": {\n                                    \"description\": \"Supports metadata within the relationship\",\n                                    \"properties\": {\n                                        \"_id\": {\n                                            \"description\": \"_refProperties object ID\",\n                                            \"type\": \"string\"\n                                        }\n                                    },\n                                    \"title\": \"Authorization Roles Items _refProperties\",\n                                    \"type\": \"object\"\n                                }\n                            },\n                            \"resourceCollection\": [\n                                {\n                                    \"conditionalAssociationField\": \"condition\",\n                                    \"label\": \"Internal Role\",\n                                    \"path\": \"internal/role\",\n                                    \"query\": {\n                                        \"fields\": [\n                                            \"name\"\n                                        ],\n                                        \"queryFilter\": \"true\"\n                                    }\n                                }\n                            ],\n                            \"reversePropertyName\": \"authzMembers\",\n                            \"reverseRelationship\": true,\n                            \"title\": \"Authorization Roles Items\",\n                            \"type\": \"relationship\",\n                            \"validate\": true\n                        },\n                        \"returnByDefault\": false,\n                        \"title\": \"Authorization Roles\",\n                        \"type\": \"array\",\n                        \"usageDescription\": \"\",\n                        \"userEditable\": false,\n                        \"viewable\": true\n                    },\n                    \"city\": {\n                        \"description\": \"City\",\n                        \"isPersonal\": false,\n                        \"title\": \"City\",\n                        \"type\": \"string\",\n                        \"usageDescription\": \"\",\n                        \"userEditable\": true,\n                        \"viewable\": true\n                    },\n                    \"cn\": {\n                        \"description\": \"Common Name\",\n                        \"isPersonal\": true,\n                        \"isVirtual\": true,\n                        \"onStore\": {\n                            \"source\": \"object.cn || (object.givenName + ' ' + object.sn)\",\n                            \"type\": \"text/javascript\"\n                        },\n                        \"scope\": \"private\",\n                        \"searchable\": false,\n                        \"title\": \"Common Name\",\n                        \"type\": \"string\",\n                        \"userEditable\": false,\n                        \"viewable\": false\n                    },\n                    \"consentedMappings\": {\n                        \"description\": \"Consented Mappings\",\n                        \"isPersonal\": false,\n                        \"isVirtual\": false,\n                        \"items\": {\n                            \"items\": {\n                                \"order\": [\n                                    \"mapping\",\n                                    \"consentDate\"\n                                ],\n                                \"properties\": {\n                                    \"consentDate\": {\n                                        \"description\": \"Consent Date\",\n                                        \"searchable\": true,\n                                        \"title\": \"Consent Date\",\n                                        \"type\": \"string\",\n                                        \"userEditable\": true,\n                                        \"viewable\": true\n                                    },\n                                    \"mapping\": {\n                                        \"description\": \"Mapping\",\n                                        \"searchable\": true,\n                                        \"title\": \"Mapping\",\n                                        \"type\": \"string\",\n                                        \"userEditable\": true,\n                                        \"viewable\": true\n                                    }\n                                },\n                                \"required\": [\n                                    \"mapping\",\n                                    \"consentDate\"\n                                ],\n                                \"title\": \"Consented Mappings Item\",\n                                \"type\": \"object\"\n                            },\n                            \"title\": \"Consented Mappings Items\",\n                            \"type\": \"array\"\n                        },\n                        \"returnByDefault\": false,\n                        \"searchable\": false,\n                        \"title\": \"Consented Mappings\",\n                        \"type\": \"array\",\n                        \"usageDescription\": \"\",\n                        \"userEditable\": true,\n                        \"viewable\": false\n                    },\n                    \"country\": {\n                        \"description\": \"Country\",\n                        \"isPersonal\": false,\n                        \"title\": \"Country\",\n                        \"type\": \"string\",\n                        \"usageDescription\": \"\",\n                        \"userEditable\": true,\n                        \"viewable\": true\n                    },\n                    \"description\": {\n                        \"description\": \"Description\",\n                        \"isPersonal\": false,\n                        \"searchable\": true,\n                        \"title\": \"Description\",\n                        \"type\": \"string\",\n                        \"usageDescription\": \"\",\n                        \"userEditable\": true,\n                        \"viewable\": true\n                    },\n                    \"effectiveAssignments\": {\n                        \"description\": \"Effective Assignments\",\n                        \"isPersonal\": false,\n                        \"isVirtual\": true,\n                        \"items\": {\n                            \"title\": \"Effective Assignments Items\",\n                            \"type\": \"object\"\n                        },\n                        \"queryConfig\": {\n                            \"referencedObjectFields\": [\n                                \"*\"\n                            ],\n                            \"referencedRelationshipFields\": [\n                                \"roles\",\n                                \"assignments\"\n                            ]\n                        },\n                        \"returnByDefault\": true,\n                        \"title\": \"Effective Assignments\",\n                        \"type\": \"array\",\n                        \"usageDescription\": \"\",\n                        \"viewable\": false\n                    },\n                    \"effectiveRoles\": {\n                        \"description\": \"Effective Roles\",\n                        \"isPersonal\": false,\n                        \"isVirtual\": true,\n                        \"items\": {\n                            \"title\": \"Effective Roles Items\",\n                            \"type\": \"object\"\n                        },\n                        \"queryConfig\": {\n                            \"referencedRelationshipFields\": [\n                                \"roles\"\n                            ]\n                        },\n                        \"returnByDefault\": true,\n                        \"title\": \"Effective Roles\",\n                        \"type\": \"array\",\n                        \"usageDescription\": \"\",\n                        \"viewable\": false\n                    },\n                    \"frIndexedDate1\": {\n                        \"description\": \"Generic Indexed Date 1\",\n                        \"isPersonal\": false,\n                        \"title\": \"Generic Indexed Date 1\",\n                        \"type\": \"string\",\n                        \"usageDescription\": \"\",\n                        \"userEditable\": true,\n                        \"viewable\": true\n                    },\n                    \"frIndexedDate2\": {\n                        \"description\": \"Generic Indexed Date 2\",\n                        \"isPersonal\": false,\n                        \"title\": \"Generic Indexed Date 2\",\n                        \"type\": \"string\",\n                        \"usageDescription\": \"\",\n                        \"userEditable\": true,\n                        \"viewable\": true\n                    },\n                    \"frIndexedDate3\": {\n                        \"description\": \"Generic Indexed Date 3\",\n                        \"isPersonal\": false,\n                        \"title\": \"Generic Indexed Date 3\",\n                        \"type\": \"string\",\n                        \"usageDescription\": \"\",\n                        \"userEditable\": true,\n                        \"viewable\": true\n                    },\n                    \"frIndexedDate4\": {\n                        \"description\": \"Generic Indexed Date 4\",\n                        \"isPersonal\": false,\n                        \"title\": \"Generic Indexed Date 4\",\n                        \"type\": \"string\",\n                        \"usageDescription\": \"\",\n                        \"userEditable\": true,\n                        \"viewable\": true\n                    },\n                    \"frIndexedDate5\": {\n                        \"description\": \"Generic Indexed Date 5\",\n                        \"isPersonal\": false,\n                        \"title\": \"Generic Indexed Date 5\",\n                        \"type\": \"string\",\n                        \"usageDescription\": \"\",\n                        \"userEditable\": true,\n                        \"viewable\": true\n                    },\n                    \"frIndexedInteger1\": {\n                        \"description\": \"Generic Indexed Integer 1\",\n                        \"isPersonal\": false,\n                        \"title\": \"Generic Indexed Integer 1\",\n                        \"type\": \"number\",\n                        \"usageDescription\": \"\",\n                        \"userEditable\": true,\n                        \"viewable\": true\n                    },\n                    \"frIndexedInteger2\": {\n                        \"description\": \"Generic Indexed Integer 2\",\n                        \"isPersonal\": false,\n                        \"title\": \"Generic Indexed Integer 2\",\n                        \"type\": \"number\",\n                        \"usageDescription\": \"\",\n                        \"userEditable\": true,\n                        \"viewable\": true\n                    },\n                    \"frIndexedInteger3\": {\n                        \"description\": \"Generic Indexed Integer 3\",\n                        \"isPersonal\": false,\n                        \"title\": \"Generic Indexed Integer 3\",\n                        \"type\": \"number\",\n                        \"usageDescription\": \"\",\n                        \"userEditable\": true,\n                        \"viewable\": true\n                    },\n                    \"frIndexedInteger4\": {\n                        \"description\": \"Generic Indexed Integer 4\",\n                        \"isPersonal\": false,\n                        \"title\": \"Generic Indexed Integer 4\",\n                        \"type\": \"number\",\n                        \"usageDescription\": \"\",\n                        \"userEditable\": true,\n                        \"viewable\": true\n                    },\n                    \"frIndexedInteger5\": {\n                        \"description\": \"Generic Indexed Integer 5\",\n                        \"isPersonal\": false,\n                        \"title\": \"Generic Indexed Integer 5\",\n                        \"type\": \"number\",\n                        \"usageDescription\": \"\",\n                        \"userEditable\": true,\n                        \"viewable\": true\n                    },\n                    \"frIndexedMultivalued1\": {\n                        \"description\": \"Generic Indexed Multivalue 1\",\n                        \"isPersonal\": false,\n                        \"items\": {\n                            \"type\": \"string\"\n                        },\n                        \"title\": \"Generic Indexed Multivalue 1\",\n                        \"type\": \"array\",\n                        \"usageDescription\": \"\",\n                        \"userEditable\": true,\n                        \"viewable\": true\n                    },\n                    \"frIndexedMultivalued2\": {\n                        \"description\": \"Generic Indexed Multivalue 2\",\n                        \"isPersonal\": false,\n                        \"items\": {\n                            \"type\": \"string\"\n                        },\n                        \"title\": \"Generic Indexed Multivalue 2\",\n                        \"type\": \"array\",\n                        \"usageDescription\": \"\",\n                        \"userEditable\": true,\n                        \"viewable\": true\n                    },\n                    \"frIndexedMultivalued3\": {\n                        \"description\": \"Generic Indexed Multivalue 3\",\n                        \"isPersonal\": false,\n                        \"items\": {\n                            \"type\": \"string\"\n                        },\n                        \"title\": \"Generic Indexed Multivalue 3\",\n                        \"type\": \"array\",\n                        \"usageDescription\": \"\",\n                        \"userEditable\": true,\n                        \"viewable\": true\n                    },\n                    \"frIndexedMultivalued4\": {\n                        \"description\": \"Generic Indexed Multivalue 4\",\n                        \"isPersonal\": false,\n                        \"items\": {\n                            \"type\": \"string\"\n                        },\n                        \"title\": \"Generic Indexed Multivalue 4\",\n                        \"type\": \"array\",\n                        \"usageDescription\": \"\",\n                        \"userEditable\": true,\n                        \"viewable\": true\n                    },\n                    \"frIndexedMultivalued5\": {\n                        \"description\": \"Generic Indexed Multivalue 5\",\n                        \"isPersonal\": false,\n                        \"items\": {\n                            \"type\": \"string\"\n                        },\n                        \"title\": \"Generic Indexed Multivalue 5\",\n                        \"type\": \"array\",\n                        \"usageDescription\": \"\",\n                        \"userEditable\": true,\n                        \"viewable\": true\n                    },\n                    \"frIndexedString1\": {\n                        \"description\": \"Generic Indexed String 1\",\n                        \"isPersonal\": false,\n                        \"title\": \"Generic Indexed String 1\",\n                        \"type\": \"string\",\n                        \"usageDescription\": \"\",\n                        \"userEditable\": true,\n                        \"viewable\": true\n                    },\n                    \"frIndexedString2\": {\n                        \"description\": \"Generic Indexed String 2\",\n                        \"isPersonal\": false,\n                        \"title\": \"Generic Indexed String 2\",\n                        \"type\": \"string\",\n                        \"usageDescription\": \"\",\n                        \"userEditable\": true,\n                        \"viewable\": true\n                    },\n                    \"frIndexedString3\": {\n                        \"description\": \"Generic Indexed String 3\",\n                        \"isPersonal\": false,\n                        \"title\": \"Generic Indexed String 3\",\n                        \"type\": \"string\",\n                        \"usageDescription\": \"\",\n                        \"userEditable\": true,\n                        \"viewable\": true\n                    },\n                    \"frIndexedString4\": {\n                        \"description\": \"Generic Indexed String 4\",\n                        \"isPersonal\": false,\n                        \"title\": \"Generic Indexed String 4\",\n                        \"type\": \"string\",\n                        \"usageDescription\": \"\",\n                        \"userEditable\": true,\n                        \"viewable\": true\n                    },\n                    \"frIndexedString5\": {\n                        \"description\": \"Generic Indexed String 5\",\n                        \"isPersonal\": false,\n                        \"title\": \"Generic Indexed String 5\",\n                        \"type\": \"string\",\n                        \"usageDescription\": \"\",\n                        \"userEditable\": true,\n                        \"viewable\": true\n                    },\n                    \"frUnindexedDate1\": {\n                        \"description\": \"Generic Unindexed Date 1\",\n                        \"isPersonal\": false,\n                        \"title\": \"Generic Unindexed Date 1\",\n                        \"type\": \"string\",\n                        \"usageDescription\": \"\",\n                        \"userEditable\": true,\n                        \"viewable\": true\n                    },\n                    \"frUnindexedDate2\": {\n                        \"description\": \"Generic Unindexed Date 2\",\n                        \"isPersonal\": false,\n                        \"title\": \"Generic Unindexed Date 2\",\n                        \"type\": \"string\",\n                        \"usageDescription\": \"\",\n                        \"userEditable\": true,\n                        \"viewable\": true\n                    },\n                    \"frUnindexedDate3\": {\n                        \"description\": \"Generic Unindexed Date 3\",\n                        \"isPersonal\": false,\n                        \"title\": \"Generic Unindexed Date 3\",\n                        \"type\": \"string\",\n                        \"usageDescription\": \"\",\n                        \"userEditable\": true,\n                        \"viewable\": true\n                    },\n                    \"frUnindexedDate4\": {\n                        \"description\": \"Generic Unindexed Date 4\",\n                        \"isPersonal\": false,\n                        \"title\": \"Generic Unindexed Date 4\",\n                        \"type\": \"string\",\n                        \"usageDescription\": \"\",\n                        \"userEditable\": true,\n                        \"viewable\": true\n                    },\n                    \"frUnindexedDate5\": {\n                        \"description\": \"Generic Unindexed Date 5\",\n                        \"isPersonal\": false,\n                        \"title\": \"Generic Unindexed Date 5\",\n                        \"type\": \"string\",\n                        \"usageDescription\": \"\",\n                        \"userEditable\": true,\n                        \"viewable\": true\n                    },\n                    \"frUnindexedInteger1\": {\n                        \"description\": \"Generic Unindexed Integer 1\",\n                        \"isPersonal\": false,\n                        \"title\": \"Generic Unindexed Integer 1\",\n                        \"type\": \"number\",\n                        \"usageDescription\": \"\",\n                        \"userEditable\": true,\n                        \"viewable\": true\n                    },\n                    \"frUnindexedInteger2\": {\n                        \"description\": \"Generic Unindexed Integer 2\",\n                        \"isPersonal\": false,\n                        \"title\": \"Generic Unindexed Integer 2\",\n                        \"type\": \"number\",\n                        \"usageDescription\": \"\",\n                        \"userEditable\": true,\n                        \"viewable\": true\n                    },\n                    \"frUnindexedInteger3\": {\n                        \"description\": \"Generic Unindexed Integer 3\",\n                        \"isPersonal\": false,\n                        \"title\": \"Generic Unindexed Integer 3\",\n                        \"type\": \"number\",\n                        \"usageDescription\": \"\",\n                        \"userEditable\": true,\n                        \"viewable\": true\n                    },\n                    \"frUnindexedInteger4\": {\n                        \"description\": \"Generic Unindexed Integer 4\",\n                        \"isPersonal\": false,\n                        \"title\": \"Generic Unindexed Integer 4\",\n                        \"type\": \"number\",\n                        \"usageDescription\": \"\",\n                        \"userEditable\": true,\n                        \"viewable\": true\n                    },\n                    \"frUnindexedInteger5\": {\n                        \"description\": \"Generic Unindexed Integer 5\",\n                        \"isPersonal\": false,\n                        \"title\": \"Generic Unindexed Integer 5\",\n                        \"type\": \"number\",\n                        \"usageDescription\": \"\",\n                        \"userEditable\": true,\n                        \"viewable\": true\n                    },\n                    \"frUnindexedMultivalued1\": {\n                        \"description\": \"Generic Unindexed Multivalue 1\",\n                        \"isPersonal\": false,\n                        \"items\": {\n                            \"type\": \"string\"\n                        },\n                        \"title\": \"Generic Unindexed Multivalue 1\",\n                        \"type\": \"array\",\n                        \"usageDescription\": \"\",\n                        \"userEditable\": true,\n                        \"viewable\": true\n                    },\n                    \"frUnindexedMultivalued2\": {\n                        \"description\": \"Generic Unindexed Multivalue 2\",\n                        \"isPersonal\": false,\n                        \"items\": {\n                            \"type\": \"string\"\n                        },\n                        \"title\": \"Generic Unindexed Multivalue 2\",\n                        \"type\": \"array\",\n                        \"usageDescription\": \"\",\n                        \"userEditable\": true,\n                        \"viewable\": true\n                    },\n                    \"frUnindexedMultivalued3\": {\n                        \"description\": \"Generic Unindexed Multivalue 3\",\n                        \"isPersonal\": false,\n                        \"items\": {\n                            \"type\": \"string\"\n                        },\n                        \"title\": \"Generic Unindexed Multivalue 3\",\n                        \"type\": \"array\",\n                        \"usageDescription\": \"\",\n                        \"userEditable\": true,\n                        \"viewable\": true\n                    },\n                    \"frUnindexedMultivalued4\": {\n                        \"description\": \"Generic Unindexed Multivalue 4\",\n                        \"isPersonal\": false,\n                        \"items\": {\n                            \"type\": \"string\"\n                        },\n                        \"title\": \"Generic Unindexed Multivalue 4\",\n                        \"type\": \"array\",\n                        \"usageDescription\": \"\",\n                        \"userEditable\": true,\n                        \"viewable\": true\n                    },\n                    \"frUnindexedMultivalued5\": {\n                        \"description\": \"Generic Unindexed Multivalue 5\",\n                        \"isPersonal\": false,\n                        \"items\": {\n                            \"type\": \"string\"\n                        },\n                        \"title\": \"Generic Unindexed Multivalue 5\",\n                        \"type\": \"array\",\n                        \"usageDescription\": \"\",\n                        \"userEditable\": true,\n                        \"viewable\": true\n                    },\n                    \"frUnindexedString1\": {\n                        \"description\": \"Generic Unindexed String 1\",\n                        \"isPersonal\": false,\n                        \"title\": \"Generic Unindexed String 1\",\n                        \"type\": \"string\",\n                        \"usageDescription\": \"\",\n                        \"userEditable\": true,\n                        \"viewable\": true\n                    },\n                    \"frUnindexedString2\": {\n                        \"description\": \"Generic Unindexed String 2\",\n                        \"isPersonal\": false,\n                        \"title\": \"Generic Unindexed String 2\",\n                        \"type\": \"string\",\n                        \"usageDescription\": \"\",\n                        \"userEditable\": true,\n                        \"viewable\": true\n                    },\n                    \"frUnindexedString3\": {\n                        \"description\": \"Generic Unindexed String 3\",\n                        \"isPersonal\": false,\n                        \"title\": \"Generic Unindexed String 3\",\n                        \"type\": \"string\",\n                        \"usageDescription\": \"\",\n                        \"userEditable\": true,\n                        \"viewable\": true\n                    },\n                    \"frUnindexedString4\": {\n                        \"description\": \"Generic Unindexed String 4\",\n                        \"isPersonal\": false,\n                        \"title\": \"Generic Unindexed String 4\",\n                        \"type\": \"string\",\n                        \"usageDescription\": \"\",\n                        \"userEditable\": true,\n                        \"viewable\": true\n                    },\n                    \"frUnindexedString5\": {\n                        \"description\": \"Generic Unindexed String 5\",\n                        \"isPersonal\": false,\n                        \"title\": \"Generic Unindexed String 5\",\n                        \"type\": \"string\",\n                        \"usageDescription\": \"\",\n                        \"userEditable\": true,\n                        \"viewable\": true\n                    },\n                    \"givenName\": {\n                        \"description\": \"First Name\",\n                        \"isPersonal\": true,\n                        \"searchable\": true,\n                        \"title\": \"First Name\",\n                        \"type\": \"string\",\n                        \"usageDescription\": \"\",\n                        \"userEditable\": true,\n                        \"viewable\": true\n                    },\n                    \"kbaInfo\": {\n                        \"description\": \"KBA Info\",\n                        \"isPersonal\": true,\n                        \"items\": {\n                            \"order\": [\n                                \"answer\",\n                                \"customQuestion\",\n                                \"questionId\"\n                            ],\n                            \"properties\": {\n                                \"answer\": {\n                                    \"description\": \"Answer\",\n                                    \"type\": \"string\"\n                                },\n                                \"customQuestion\": {\n                                    \"description\": \"Custom question\",\n                                    \"type\": \"string\"\n                                },\n                                \"questionId\": {\n                                    \"description\": \"Question ID\",\n                                    \"type\": \"string\"\n                                }\n                            },\n                            \"required\": [],\n                            \"title\": \"KBA Info Items\",\n                            \"type\": \"object\"\n                        },\n                        \"type\": \"array\",\n                        \"usageDescription\": \"\",\n                        \"userEditable\": true,\n                        \"viewable\": false\n                    },\n                    \"lastSync\": {\n                        \"description\": \"Last Sync timestamp\",\n                        \"isPersonal\": false,\n                        \"order\": [\n                            \"effectiveAssignments\",\n                            \"timestamp\"\n                        ],\n                        \"properties\": {\n                            \"effectiveAssignments\": {\n                                \"description\": \"Effective Assignments\",\n                                \"items\": {\n                                    \"title\": \"Effective Assignments Items\",\n                                    \"type\": \"object\"\n                                },\n                                \"title\": \"Effective Assignments\",\n                                \"type\": \"array\"\n                            },\n                            \"timestamp\": {\n                                \"description\": \"Timestamp\",\n                                \"type\": \"string\"\n                            }\n                        },\n                        \"required\": [],\n                        \"scope\": \"private\",\n                        \"searchable\": false,\n                        \"title\": \"Last Sync timestamp\",\n                        \"type\": \"object\",\n                        \"usageDescription\": \"\",\n                        \"viewable\": false\n                    },\n                    \"mail\": {\n                        \"description\": \"Email Address\",\n                        \"isPersonal\": true,\n                        \"policies\": [\n                            {\n                                \"policyId\": \"valid-email-address-format\"\n                            }\n                        ],\n                        \"searchable\": true,\n                        \"title\": \"Email Address\",\n                        \"type\": \"string\",\n                        \"usageDescription\": \"\",\n                        \"userEditable\": true,\n                        \"viewable\": true\n                    },\n                    \"manager\": {\n                        \"description\": \"Manager\",\n                        \"isPersonal\": false,\n                        \"properties\": {\n                            \"_ref\": {\n                                \"description\": \"References a relationship from a managed object\",\n                                \"type\": \"string\"\n                            },\n                            \"_refProperties\": {\n                                \"description\": \"Supports metadata within the relationship\",\n                                \"properties\": {\n                                    \"_id\": {\n                                        \"description\": \"_refProperties object ID\",\n                                        \"type\": \"string\"\n                                    }\n                                },\n                                \"title\": \"Manager _refProperties\",\n                                \"type\": \"object\"\n                            }\n                        },\n                        \"resourceCollection\": [\n                            {\n                                \"label\": \"User\",\n                                \"path\": \"managed/bravo_user\",\n                                \"query\": {\n                                    \"fields\": [\n                                        \"userName\",\n                                        \"givenName\",\n                                        \"sn\"\n                                    ],\n                                    \"queryFilter\": \"true\"\n                                }\n                            }\n                        ],\n                        \"reversePropertyName\": \"reports\",\n                        \"reverseRelationship\": true,\n                        \"searchable\": false,\n                        \"title\": \"Manager\",\n                        \"type\": \"relationship\",\n                        \"usageDescription\": \"\",\n                        \"userEditable\": false,\n                        \"validate\": true,\n                        \"viewable\": true\n                    },\n                    \"password\": {\n                        \"description\": \"Password\",\n                        \"isPersonal\": false,\n                        \"isProtected\": true,\n                        \"scope\": \"private\",\n                        \"searchable\": false,\n                        \"title\": \"Password\",\n                        \"type\": \"string\",\n                        \"usageDescription\": \"\",\n                        \"userEditable\": true,\n                        \"viewable\": false\n                    },\n                    \"postalAddress\": {\n                        \"description\": \"Address 1\",\n                        \"isPersonal\": true,\n                        \"title\": \"Address 1\",\n                        \"type\": \"string\",\n                        \"usageDescription\": \"\",\n                        \"userEditable\": true,\n                        \"viewable\": true\n                    },\n                    \"postalCode\": {\n                        \"description\": \"Postal Code\",\n                        \"isPersonal\": false,\n                        \"title\": \"Postal Code\",\n                        \"type\": \"string\",\n                        \"usageDescription\": \"\",\n                        \"userEditable\": true,\n                        \"viewable\": true\n                    },\n                    \"preferences\": {\n                        \"description\": \"Preferences\",\n                        \"isPersonal\": false,\n                        \"order\": [\n                            \"updates\",\n                            \"marketing\"\n                        ],\n                        \"properties\": {\n                            \"marketing\": {\n                                \"description\": \"Send me special offers and services\",\n                                \"type\": \"boolean\"\n                            },\n                            \"updates\": {\n                                \"description\": \"Send me news and updates\",\n                                \"type\": \"boolean\"\n                            }\n                        },\n                        \"required\": [],\n                        \"searchable\": false,\n                        \"title\": \"Preferences\",\n                        \"type\": \"object\",\n                        \"usageDescription\": \"\",\n                        \"userEditable\": true,\n                        \"viewable\": true\n                    },\n                    \"reports\": {\n                        \"description\": \"Direct Reports\",\n                        \"isPersonal\": false,\n                        \"items\": {\n                            \"id\": \"urn:jsonschema:org:forgerock:openidm:managed:api:User:reports:items\",\n                            \"properties\": {\n                                \"_ref\": {\n                                    \"description\": \"References a relationship from a managed object\",\n                                    \"type\": \"string\"\n                                },\n                                \"_refProperties\": {\n                                    \"description\": \"Supports metadata within the relationship\",\n                                    \"properties\": {\n                                        \"_id\": {\n                                            \"description\": \"_refProperties object ID\",\n                                            \"type\": \"string\"\n                                        }\n                                    },\n                                    \"title\": \"Direct Reports Items _refProperties\",\n                                    \"type\": \"object\"\n                                }\n                            },\n                            \"resourceCollection\": [\n                                {\n                                    \"label\": \"User\",\n                                    \"path\": \"managed/bravo_user\",\n                                    \"query\": {\n                                        \"fields\": [\n                                            \"userName\",\n                                            \"givenName\",\n                                            \"sn\"\n                                        ],\n                                        \"queryFilter\": \"true\"\n                                    }\n                                }\n                            ],\n                            \"reversePropertyName\": \"manager\",\n                            \"reverseRelationship\": true,\n                            \"title\": \"Direct Reports Items\",\n                            \"type\": \"relationship\",\n                            \"validate\": true\n                        },\n                        \"returnByDefault\": false,\n                        \"title\": \"Direct Reports\",\n                        \"type\": \"array\",\n                        \"usageDescription\": \"\",\n                        \"userEditable\": false,\n                        \"viewable\": true\n                    },\n                    \"roles\": {\n                        \"description\": \"Provisioning Roles\",\n                        \"id\": \"urn:jsonschema:org:forgerock:openidm:managed:api:User:roles\",\n                        \"isPersonal\": false,\n                        \"items\": {\n                            \"id\": \"urn:jsonschema:org:forgerock:openidm:managed:api:User:roles:items\",\n                            \"notifySelf\": true,\n                            \"properties\": {\n                                \"_ref\": {\n                                    \"description\": \"References a relationship from a managed object\",\n                                    \"type\": \"string\"\n                                },\n                                \"_refProperties\": {\n                                    \"description\": \"Supports metadata within the relationship\",\n                                    \"properties\": {\n                                        \"_grantType\": {\n                                            \"description\": \"Grant Type\",\n                                            \"label\": \"Grant Type\",\n                                            \"type\": \"string\"\n                                        },\n                                        \"_id\": {\n                                            \"description\": \"_refProperties object ID\",\n                                            \"type\": \"string\"\n                                        }\n                                    },\n                                    \"title\": \"Provisioning Roles Items _refProperties\",\n                                    \"type\": \"object\"\n                                }\n                            },\n                            \"resourceCollection\": [\n                                {\n                                    \"conditionalAssociationField\": \"condition\",\n                                    \"label\": \"Role\",\n                                    \"path\": \"managed/bravo_role\",\n                                    \"query\": {\n                                        \"fields\": [\n                                            \"name\"\n                                        ],\n                                        \"queryFilter\": \"true\"\n                                    }\n                                }\n                            ],\n                            \"reversePropertyName\": \"members\",\n                            \"reverseRelationship\": true,\n                            \"title\": \"Provisioning Roles Items\",\n                            \"type\": \"relationship\",\n                            \"validate\": true\n                        },\n                        \"relationshipGrantTemporalConstraintsEnforced\": true,\n                        \"returnByDefault\": false,\n                        \"title\": \"Provisioning Roles\",\n                        \"type\": \"array\",\n                        \"usageDescription\": \"\",\n                        \"userEditable\": false,\n                        \"viewable\": true\n                    },\n                    \"sn\": {\n                        \"description\": \"Last Name\",\n                        \"isPersonal\": true,\n                        \"searchable\": true,\n                        \"title\": \"Last Name\",\n                        \"type\": \"string\",\n                        \"usageDescription\": \"\",\n                        \"userEditable\": true,\n                        \"viewable\": true\n                    },\n                    \"stateProvince\": {\n                        \"description\": \"State/Province\",\n                        \"isPersonal\": false,\n                        \"title\": \"State/Province\",\n                        \"type\": \"string\",\n                        \"usageDescription\": \"\",\n                        \"userEditable\": true,\n                        \"viewable\": true\n                    },\n                    \"telephoneNumber\": {\n                        \"description\": \"Telephone Number\",\n                        \"isPersonal\": true,\n                        \"pattern\": \"^\\\\+?([0-9\\\\- \\\\(\\\\)])*$\",\n                        \"title\": \"Telephone Number\",\n                        \"type\": \"string\",\n                        \"usageDescription\": \"\",\n                        \"userEditable\": true,\n                        \"viewable\": true\n                    },\n                    \"userName\": {\n                        \"description\": \"Username\",\n                        \"isPersonal\": true,\n                        \"minLength\": 1,\n                        \"policies\": [\n                            {\n                                \"policyId\": \"valid-username\"\n                            },\n                            {\n                                \"params\": {\n                                    \"forbiddenChars\": [\n                                        \"/\"\n                                    ]\n                                },\n                                \"policyId\": \"cannot-contain-characters\"\n                            },\n                            {\n                                \"params\": {\n                                    \"minLength\": 1\n                                },\n                                \"policyId\": \"minimum-length\"\n                            },\n                            {\n                                \"params\": {\n                                    \"maxLength\": 255\n                                },\n                                \"policyId\": \"maximum-length\"\n                            }\n                        ],\n                        \"searchable\": true,\n                        \"title\": \"Username\",\n                        \"type\": \"string\",\n                        \"usageDescription\": \"\",\n                        \"userEditable\": true,\n                        \"viewable\": true\n                    }\n                },\n                \"required\": [\n                    \"userName\",\n                    \"givenName\",\n                    \"sn\",\n                    \"mail\"\n                ],\n                \"title\": \"Bravo realm - User\",\n                \"type\": \"object\",\n                \"viewable\": true\n            },\n            \"type\": \"Managed Object\"\n        },\n        {\n            \"iconClass\": \"fa fa-database\",\n            \"name\": \"Company\",\n            \"schema\": {\n                \"$schema\": \"http://forgerock.org/json-schema#\",\n                \"description\": \"A company\",\n                \"icon\": \"fa-building\",\n                \"order\": [\n                    \"name\",\n                    \"number\",\n                    \"type\",\n                    \"status\",\n                    \"authCode\",\n                    \"authorisedUsers\"\n                ],\n                \"properties\": {\n                    \"authCode\": {\n                        \"searchable\": true,\n                        \"title\": \"Authentication Code\",\n                        \"type\": \"string\",\n                        \"userEditable\": true,\n                        \"viewable\": true\n                    },\n                    \"authorisedUsers\": {\n                        \"deleteQueryConfig\": false,\n                        \"description\": \"Authorised Users are Users that are associated with a Company\",\n                        \"isVirtual\": false,\n                        \"items\": {\n                            \"notifySelf\": false,\n                            \"properties\": {\n                                \"_ref\": {\n                                    \"type\": \"string\"\n                                },\n                                \"_refProperties\": {\n                                    \"properties\": {\n                                        \"_id\": {\n                                            \"propName\": \"_id\",\n                                            \"required\": false,\n                                            \"type\": \"string\"\n                                        },\n                                        \"permissionAdmin\": {\n                                            \"label\": \"Administer the Company\",\n                                            \"propName\": \"permissionAdmin\",\n                                            \"required\": false,\n                                            \"type\": \"string\"\n                                        },\n                                        \"permissionFiling\": {\n                                            \"label\": \"File Financial Statments\",\n                                            \"propName\": \"permissionFiling\",\n                                            \"required\": false,\n                                            \"type\": \"string\"\n                                        },\n                                        \"permissionUpdate\": {\n                                            \"label\": \"Update company details\",\n                                            \"propName\": \"permissionUpdate\",\n                                            \"required\": false,\n                                            \"type\": \"string\"\n                                        }\n                                    },\n                                    \"type\": \"object\"\n                                }\n                            },\n                            \"resourceCollection\": [\n                                {\n                                    \"label\": \"Alpha_user\",\n                                    \"notify\": false,\n                                    \"path\": \"managed/alpha_user\",\n                                    \"query\": {\n                                        \"fields\": [\n                                            \"_id\"\n                                        ],\n                                        \"queryFilter\": \"true\",\n                                        \"sortKeys\": []\n                                    }\n                                }\n                            ],\n                            \"reversePropertyName\": \"isAuthorisedUserOf\",\n                            \"reverseRelationship\": true,\n                            \"type\": \"relationship\",\n                            \"validate\": false\n                        },\n                        \"minLength\": null,\n                        \"policies\": [],\n                        \"referencedObjectFields\": null,\n                        \"referencedRelationshipFields\": null,\n                        \"requiredByParent\": false,\n                        \"returnByDefault\": false,\n                        \"searchable\": false,\n                        \"title\": \"Has Authorised User\",\n                        \"type\": \"array\",\n                        \"userEditable\": false,\n                        \"viewable\": true\n                    },\n                    \"name\": {\n                        \"deleteQueryConfig\": false,\n                        \"description\": \"The name of the company\",\n                        \"isVirtual\": false,\n                        \"searchable\": true,\n                        \"title\": \"Company Name\",\n                        \"type\": \"string\",\n                        \"userEditable\": true,\n                        \"viewable\": true\n                    },\n                    \"number\": {\n                        \"deleteQueryConfig\": false,\n                        \"description\": \"The unique number allocated to a company on incorporation\",\n                        \"isVirtual\": false,\n                        \"searchable\": true,\n                        \"title\": \"Company Number\",\n                        \"type\": \"string\",\n                        \"userEditable\": true,\n                        \"viewable\": true\n                    },\n                    \"status\": {\n                        \"searchable\": true,\n                        \"title\": \"Status\",\n                        \"type\": \"string\",\n                        \"userEditable\": true,\n                        \"viewable\": true\n                    },\n                    \"type\": {\n                        \"searchable\": true,\n                        \"title\": \"Type\",\n                        \"type\": \"string\",\n                        \"userEditable\": true,\n                        \"viewable\": true,\n                        \"description\": null,\n                        \"isVirtual\": false,\n                        \"deleteQueryConfig\": false\n                    }\n                },\n                \"required\": [\n                    \"name\",\n                    \"number\"\n                ],\n                \"title\": \"Company\",\n                \"type\": \"object\"\n            },\n            \"type\": \"Managed Object\"\n        }\n    ]\n}"
						}
					]
				}
			],
			"auth": {
				"type": "noauth"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Auth Tree",
			"item": [
				{
					"name": "Authentication to Top-Level Realm",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const JSONResponse = JSON.parse(responseBody);",
									"",
									"// Did request have a callback?",
									"if(JSONResponse.authId && JSONResponse.authId != \"\")",
									"{",
									"  // Set `authId` variable",
									"  pm.environment.set(\"authId\", JSONResponse.authId);",
									"}",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "The media type of the resource.",
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"description": "This collection documents version 2.1 of the authentication resource.",
								"key": "Accept-API-Version",
								"value": "resource=2.1",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{platformUrl}}/am/json/authenticate",
							"host": [
								"{{platformUrl}}"
							],
							"path": [
								"am",
								"json",
								"authenticate"
							]
						},
						"description": "To get started, request the callbacks from the top-level realm."
					},
					"response": []
				},
				{
					"name": "Authenticate as ID Cloud Admin and Get Session Token, and Cookie Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const JSONResponse = JSON.parse(responseBody);",
									"",
									"// Did request return SSO Token?",
									"if(JSONResponse.tokenId && JSONResponse.tokenId != \"\")",
									"{",
									"  // Set `session token` variable",
									"  pm.environment.set(\"session_token\", JSONResponse.tokenId);",
									"",
									"  // Remove `authId` variable",
									"  pm.environment.unset(\"authId\");",
									"",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "Specifies that the `/json/authenticate` endpoint uses JSON format for requests.",
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"description": "Specifies the version of the `/json/authenticate` endpoint to use.",
								"key": "Accept-API-Version",
								"value": "resource=2.1, protocol=1.0",
								"disabled": true
							},
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"authId\": \"{{authId}}\",\n    \"callbacks\": [\n        {\n            \"type\": \"NameCallback\",\n            \"output\": [\n                {\n                    \"name\": \"prompt\",\n                    \"value\": \"User Name\"\n                }\n            ],\n            \"input\": [\n                {\n                    \"name\": \"IDToken1\",\n                    \"value\": \"{{IDCloudAdminUsername}}\"\n                }\n            ],\n            \"_id\": 0\n        },\n        {\n            \"type\": \"PasswordCallback\",\n            \"output\": [\n                {\n                    \"name\": \"prompt\",\n                    \"value\": \"Password\"\n                }\n            ],\n            \"input\": [\n                {\n                    \"name\": \"IDToken2\",\n                    \"value\": \"{{IDCloudAdminPassword}}\"\n                }\n            ],\n            \"_id\": 1\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{platformUrl}}/am/json/authenticate",
							"host": [
								"{{platformUrl}}"
							],
							"path": [
								"am",
								"json",
								"authenticate"
							]
						},
						"description": "Return the callback, specifying the credentials of an administrative user.\nThis request obtains the name used in headers to specify the session token. To manually provide the session token name, in the ID Cloud console, navigate to **Tenant Settings**, and copy the *Cookie Name* value. Use this value in the `cookieName` variable in your Postman Collection."
					},
					"response": []
				},
				{
					"name": "Login Tree",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = JSON.parse(responseBody);\r",
									"\r",
									"\r",
									"//actual\r",
									"const _id_actual = jsonData._id;\r",
									"const description_actual = jsonData.description;\r",
									"const entryNodeId_actual = jsonData.entryNodeId;\r",
									"const identityResource_actual = jsonData.identityResource;\r",
									"const totalNodes_length_actual = Object.keys(jsonData.nodes).length;\r",
									"\r",
									"//expected\r",
									"const _id_expected = pm.collectionVariables.get(\"AuthTree_Login_id\");\r",
									"const description_expected = pm.collectionVariables.get(\"AuthTree_Login_description\");\r",
									"const entryNodeId_expected = pm.collectionVariables.get(\"AuthTree_Login_entryNode\");\r",
									"const identityResource_expected = pm.collectionVariables.get(\"AuthTree_Login_identityResource\");\r",
									"const totalNodes_length_expected = parseInt(pm.collectionVariables.get(\"AuthTree_Login_nodes_count\"));\r",
									"\r",
									"pm.test(\"Auth Tree Login response contains correct id\", () => {\r",
									"    pm.expect(_id_expected, 'Login tree _id did not match').to.be.eql(_id_actual);\r",
									"});\r",
									"\r",
									"pm.test(\"Auth Tree Login response contains correct description\", () => {\r",
									"    pm.expect(description_expected, 'Login tree -> description did not match').to.be.eql(description_actual);\r",
									"});\r",
									"\r",
									"pm.test(\"Auth Tree Login response contains correct entry node Id\", () => {\r",
									"    pm.expect(entryNodeId_expected, 'Login tree -> entry node Id did not match').to.be.eql(entryNodeId_actual);\r",
									"});\r",
									"\r",
									"pm.test(\"Auth Tree Login response contains correct resource Id\", () => {\r",
									"    pm.expect(identityResource_actual, 'Login tree -> identity resource Id did not match').to.be.eql(identityResource_expected);\r",
									"});\r",
									"\r",
									"pm.test(\"Auth Tree Login response contains correctnumber of nodes\", () => {\r",
									"    pm.expect(totalNodes_length_expected, \" Incorrect number of nodes in the auth tree\").to.be.eql(totalNodes_length_actual)\r",
									"});\r",
									"\r",
									"\r",
									"//Login -Data Store \r",
									"const DataStoreDecision_id = pm.collectionVariables.get(\"AuthTree_Login_nodes_DataStore_id\");\r",
									"\r",
									"//actual \r",
									"const dataStore_connection_false_actual = jsonData.nodes[DataStoreDecision_id].connections.false;\r",
									"const dataStore_connection_true_actual = jsonData.nodes[DataStoreDecision_id].connections.true;\r",
									"const dataStore_displayName_actual = jsonData.nodes[DataStoreDecision_id].displayName;\r",
									"const dataStore_nodeType_actual = jsonData.nodes[DataStoreDecision_id].nodeType;\r",
									"\r",
									"//expected \r",
									"const dataStore_connection_false_expected = pm.collectionVariables.get(\"AuthTree_Login_nodes_DataStore_conn_false\");\r",
									"const dataStore_connection_true_expected = pm.collectionVariables.get(\"AuthTree_Login_nodes_DataStore_conn_true\");\r",
									"const dataStore_displayName_expected = pm.collectionVariables.get(\"AuthTree_Login_nodes_DataStore_displayName\");\r",
									"const dataStore_nodeType_expected = pm.collectionVariables.get(\"AuthTree_Login_nodes_DataStore_nodeType\");\r",
									"\r",
									"pm.test(\"Validate auth Tree Login -> Nodes -> DataStore -> conn-> false node \", () => {\r",
									"    pm.expect(dataStore_connection_false_expected, 'Login tree->node->Data store->outcome->true did not match').to.be.eql(dataStore_connection_false_actual);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate auth Tree Login -> Nodes -> DataStore -> conn-> false node \", () => {\r",
									"    pm.expect(dataStore_connection_true_expected, 'Login tree->node->Data store->outcome->false did not match').to.be.eql(dataStore_connection_true_actual);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate auth Tree Login -> Nodes -> DataStore -> display name \", () => {\r",
									"    pm.expect(dataStore_displayName_expected, 'Login tree->node->Data store->display name false did not match').to.be.eql(dataStore_displayName_actual);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate auth Tree Login -> Nodes -> DataStore -> Node Type\", () => {\r",
									"    pm.expect(dataStore_nodeType_expected, 'Login tree->node->Data store->NodeType false did not match').to.be.eql(dataStore_nodeType_actual);\r",
									"});\r",
									"\r",
									"\r",
									"//Login -Inner Tree \r",
									"const InnerTreeEvaluator_id = pm.collectionVariables.get(\"AuthTree_Login_nodes_InnerTree_id\");\r",
									"\r",
									"//Actual \r",
									"const innerTree_connection_false_actual = jsonData.nodes[InnerTreeEvaluator_id].connections.false;\r",
									"const innerTree_connection_true_actual = jsonData.nodes[InnerTreeEvaluator_id].connections.true;\r",
									"const innerTree_displayName_actual = jsonData.nodes[InnerTreeEvaluator_id].displayName;\r",
									"const innerTree_nodeType_actual = jsonData.nodes[InnerTreeEvaluator_id].nodeType;\r",
									"\r",
									"//Expected \r",
									"const innerTree_connection_false_expected = pm.collectionVariables.get(\"AuthTree_Login_nodes_InnerTree_conn_false\");\r",
									"const innerTree_connection_true_expected = pm.collectionVariables.get(\"AuthTree_Login_nodes_InnerTree_conn_true\");\r",
									"const innerTree_displayName_expected = pm.collectionVariables.get(\"AuthTree_Login_nodes_InnerTree_displayName\");\r",
									"const innerTree_nodeType_expected = pm.collectionVariables.get(\"AuthTree_Login_nodes_InnerTree_nodeType\");\r",
									"\r",
									"pm.test(\"Validate auth Tree Login -> Nodes -> Inner Tree -> conn -> false node\", () => {\r",
									"    pm.expect(innerTree_connection_false_expected, 'Login tree->node->Inner tree evaluator->outcome->false did not match').to.be.eql(innerTree_connection_false_actual);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate auth Tree Login -> Nodes -> Inner Tree-> conn -> true node\", () => {\r",
									"    pm.expect(innerTree_connection_true_expected, 'Login tree->node->Inner tree evaluator->outcome->true did not match').to.be.eql(innerTree_connection_true_actual);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate auth Tree Login -> Nodes -> Inner Tree -> display name \", () => {\r",
									"    pm.expect(innerTree_displayName_expected, 'Login tree->node->Inner tree evaluator->display Name did not match').to.be.eql(innerTree_displayName_actual);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate auth Tree Login -> Nodes -> Inner Tree -> Node type \", () => {\r",
									"    pm.expect(innerTree_nodeType_expected, 'Login tree->node->Inner tree evaluator->NodeType did not match').to.be.eql(innerTree_nodeType_actual);\r",
									"});\r",
									"\r",
									"\r",
									"//Login - Page Node\r",
									"const PageNode_id = pm.collectionVariables.get(\"AuthTree_Login_nodes_PageNode_id\");\r",
									"\r",
									"//actual\r",
									"const PageNode_connection_true_actual = jsonData.nodes[PageNode_id].connections.outcome;\r",
									"const PageNode_displayName_actual = jsonData.nodes[PageNode_id].displayName;\r",
									"const PageNode_nodeType_actual = jsonData.nodes[PageNode_id].nodeType;\r",
									"\r",
									"//expected \r",
									"const PageNode_connection_true_expected = pm.collectionVariables.get(\"AuthTree_Login_nodes_PageNode_conn_outcome\");\r",
									"const PageNode_displayName_expected = pm.collectionVariables.get(\"AuthTree_Login_nodes_PageNode_displayName\");\r",
									"const PageNode_nodeType_expected = pm.collectionVariables.get(\"AuthTree_Login_nodes_PageNode_nodeType\");\r",
									"\r",
									"pm.test(\"Validate auth Tree Login -> Nodes -> PageNode -> outcome  -> true node \", () => {\r",
									"    pm.expect(PageNode_connection_true_actual, 'Login tree->node->Page Node->outcome->true did not match').to.be.eql(PageNode_connection_true_expected);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate auth Tree Login -> Nodes -> PageNode -> display name  \", () => {\r",
									"    pm.expect(PageNode_displayName_actual, 'Login tree->node->Page Node->display name did not match').to.be.eql(PageNode_displayName_expected);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate auth Tree Login -> Nodes -> PageNode -> Node type \", () => {\r",
									"    pm.expect(PageNode_nodeType_actual, 'Login tree->node->Page Node->NodeType did not match').to.be.eql(PageNode_nodeType_expected);\r",
									"});\r",
									"\r",
									"\r",
									"//Login -Incremental Login\r",
									"const IncrementLogin_id = pm.collectionVariables.get(\"AuthTree_Login_nodes_IncrementLogin_id\");\r",
									"\r",
									"//actual Increment Login decision \r",
									"const IncrementLogin_connection_true_actual = jsonData.nodes[IncrementLogin_id].connections.outcome;\r",
									"const IncrementLogin_displayName_actual = jsonData.nodes[IncrementLogin_id].displayName;\r",
									"const IncrementLogin_nodeType_actual = jsonData.nodes[IncrementLogin_id].nodeType;\r",
									"\r",
									"//expected Increment Login decision \r",
									"const IncrementLogin_connection_true_expected = pm.collectionVariables.get(\"AuthTree_Login_nodes_IncrementLogin_conn_outcome\");\r",
									"const IncrementLogin_displayName_expected = pm.collectionVariables.get(\"AuthTree_Login_nodes_IncrementLogin_displayName\");\r",
									"const IncrementLogin_nodeType_expected = pm.collectionVariables.get(\"AuthTree_Login_nodes_IncrementLogin_nodeType\");\r",
									"\r",
									"\r",
									"pm.test(\"Validate auth Tree Login -> Nodes -> Increment Login -> outcome -> true node \", () => {\r",
									"    pm.expect(IncrementLogin_connection_true_expected, 'Login tree->node->Increment Login->outcome->true did not match').to.be.eql(IncrementLogin_connection_true_actual);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate auth Tree Login -> Nodes -> Increment Login -> display name \", () => {\r",
									"    pm.expect(IncrementLogin_displayName_expected, 'Login tree->node->Increment Login->display name did not match').to.be.eql(IncrementLogin_displayName_actual);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate auth Tree Login -> Nodes -> Increment Login -> node type \", () => {\r",
									"    pm.expect(IncrementLogin_nodeType_expected, 'Login tree->node->Increment Login->NodeType did not match').to.be.eql(IncrementLogin_nodeType_actual);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "cookie",
								"value": "{{cookie_Name}} = {{session_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{platformUrl}}/am/json/{{realm}}/realm-config/authentication/authenticationtrees/trees/login",
							"host": [
								"{{platformUrl}}"
							],
							"path": [
								"am",
								"json",
								"{{realm}}",
								"realm-config",
								"authentication",
								"authenticationtrees",
								"trees",
								"login"
							]
						}
					},
					"response": [
						{
							"name": "Login Tree",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/realm-config/authentication/authenticationtrees/trees/login",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"realm-config",
										"authentication",
										"authenticationtrees",
										"trees",
										"login"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "x-frame-options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "x-content-type-options",
									"value": "nosniff"
								},
								{
									"key": "x-content-type-options",
									"value": "nosniff"
								},
								{
									"key": "cache-control",
									"value": "private"
								},
								{
									"key": "cache-control",
									"value": "no-store"
								},
								{
									"key": "warning",
									"value": "100 OpenAM REST \"No Accept-API-Version specified\""
								},
								{
									"key": "warning",
									"value": "100 chf \"Accept-API-Version should be included in the request.\""
								},
								{
									"key": "content-api-version",
									"value": "resource=1.0"
								},
								{
									"key": "etag",
									"value": "\"1447717982\""
								},
								{
									"key": "expires",
									"value": "0"
								},
								{
									"key": "pragma",
									"value": "no-cache"
								},
								{
									"key": "content-type",
									"value": "application/json;charset=UTF-8"
								},
								{
									"key": "content-length",
									"value": "1189"
								},
								{
									"key": "date",
									"value": "Sat, 06 Feb 2021 06:03:29 GMT"
								},
								{
									"key": "strict-transport-security",
									"value": "max-age=31536000; includeSubDomains; preload;"
								},
								{
									"key": "Via",
									"value": "1.1 google"
								},
								{
									"key": "Alt-Svc",
									"value": "clear"
								}
							],
							"cookie": [],
							"body": "{\n    \"_id\": \"login\",\n    \"_rev\": \"1447717982\",\n    \"description\": \"Platform Login Tree\",\n    \"entryNodeId\": \"a12bc72f-ad97-4f1e-a789-a1fa3dd566c8\",\n    \"identityResource\": \"managed/alpha_user\",\n    \"nodes\": {\n        \"2998c1c9-f4c8-4a00-b2c6-3426783ee49d\": {\n            \"connections\": {\n                \"false\": \"e301438c-0bd0-429c-ab0c-66126501069a\",\n                \"true\": \"bba3e0d8-8525-4e82-bf48-ac17f7988917\"\n            },\n            \"displayName\": \"Data Store Decision\",\n            \"nodeType\": \"DataStoreDecisionNode\",\n            \"x\": 315,\n            \"y\": 140\n        },\n        \"33b24514-3e50-4180-8f08-ab6f4e51b07e\": {\n            \"connections\": {\n                \"false\": \"e301438c-0bd0-429c-ab0c-66126501069a\",\n                \"true\": \"70e691a5-1e33-4ac3-a356-e7b6d60d92e0\"\n            },\n            \"displayName\": \"Inner Tree Evaluator\",\n            \"nodeType\": \"InnerTreeEvaluatorNode\",\n            \"x\": 815,\n            \"y\": 180\n        },\n        \"a12bc72f-ad97-4f1e-a789-a1fa3dd566c8\": {\n            \"connections\": {\n                \"outcome\": \"2998c1c9-f4c8-4a00-b2c6-3426783ee49d\"\n            },\n            \"displayName\": \"Page Node\",\n            \"nodeType\": \"PageNode\",\n            \"x\": 136,\n            \"y\": 59\n        },\n        \"bba3e0d8-8525-4e82-bf48-ac17f7988917\": {\n            \"connections\": {\n                \"outcome\": \"33b24514-3e50-4180-8f08-ab6f4e51b07e\"\n            },\n            \"displayName\": \"Increment Login Count\",\n            \"nodeType\": \"IncrementLoginCountNode\",\n            \"x\": 564,\n            \"y\": 132\n        }\n    },\n    \"staticNodes\": {\n        \"70e691a5-1e33-4ac3-a356-e7b6d60d92e0\": {\n            \"x\": 1008,\n            \"y\": 186\n        },\n        \"e301438c-0bd0-429c-ab0c-66126501069a\": {\n            \"x\": 624,\n            \"y\": 267\n        },\n        \"startNode\": {\n            \"x\": 50,\n            \"y\": 25\n        }\n    },\n    \"uiConfig\": {}\n}"
						}
					]
				},
				{
					"name": "Login MFA Tree",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = JSON.parse(responseBody);\r",
									"\r",
									"//actual\r",
									"const _id_actual = jsonData._id;\r",
									"const description_actual = jsonData.description\r",
									"const entryNodeId_actual = jsonData.entryNodeId\r",
									"const identityResource_actual = jsonData.identityResource\r",
									"const totalNodes_length_actual = Object.keys(jsonData.nodes).length;\r",
									"\r",
									"//expected\r",
									"const _id_expected = pm.collectionVariables.get(\"AuthTree_Login_MFA_id\");\r",
									"const description_expected = pm.collectionVariables.get(\"AuthTree_Login_MFA_description\");\r",
									"const entryNodeId_expected = pm.collectionVariables.get(\"AuthTree_Login_MFA_entryNode\");\r",
									"const identityResource_expected = pm.collectionVariables.get(\"AuthTree_Login_MFA_identityResource\");\r",
									"const totalNodes_length_expected = parseInt(pm.collectionVariables.get(\"AuthTree_Login_MFA_nodes_count\"));\r",
									"\r",
									"pm.test(\"Auth Tree Login MFA response contains correct id\", () => {\r",
									"    pm.expect(_id_expected, 'Login tree _id did not match').to.be.eql(_id_actual);\r",
									"});\r",
									"\r",
									"pm.test(\"Auth Tree Login MFA response contains correct description\", () => {\r",
									"    pm.expect(description_expected, 'Login tree -> description did not match').to.be.eql(description_actual);\r",
									"});\r",
									"\r",
									"pm.test(\"Auth Tree Login MFA response contains correct Entry Node ID\", () => {\r",
									"    pm.expect(entryNodeId_expected, 'Login tree -> entry node Id did not match').to.be.eql(entryNodeId_actual);\r",
									"});\r",
									"\r",
									"pm.test(\"Auth Tree Login MFA response contains correct identity reasource\", () => {\r",
									"    pm.expect(identityResource_actual, 'Login tree -> identity resource did not match').to.be.eql(identityResource_expected);\r",
									"});\r",
									"\r",
									"pm.test(\"Auth Tree Login MFA response contains correct number of nodes\", () => {\r",
									"    pm.expect(totalNodes_length_expected, \" Incorrect number of nodes in the auth tree\").to.be.eql(totalNodes_length_actual);\r",
									"});\r",
									"\r",
									"\r",
									"//LofinMFA -> Data Store\r",
									"\r",
									"const DataStoreDecision_id = pm.collectionVariables.get(\"AuthTree_Login_MFA_nodes_DataStore_id\");\r",
									"//actual data store decision \r",
									"const dataStore_connection_false_actual = jsonData.nodes[DataStoreDecision_id].connections.false;\r",
									"const dataStore_connection_true_actual = jsonData.nodes[DataStoreDecision_id].connections.true;\r",
									"const dataStore_displayName_actual = jsonData.nodes[DataStoreDecision_id].displayName;\r",
									"const dataStore_nodeType_actual = jsonData.nodes[DataStoreDecision_id].nodeType;\r",
									"\r",
									"//expected data store decision \r",
									"const dataStore_connection_false_expected = pm.collectionVariables.get(\"AuthTree_Login_MFA_nodes_DataStore_conn_false\");\r",
									"const dataStore_connection_true_expected = pm.collectionVariables.get(\"AuthTree_Login_MFA_nodes_DataStore_conn_true\");\r",
									"const dataStore_displayName_expected = pm.collectionVariables.get(\"AuthTree_Login_nodes_MFA_DataStore_displayName\");\r",
									"const dataStore_nodeType_expected = pm.collectionVariables.get(\"AuthTree_Login_nodes_MFA_DataStore_nodeType\");\r",
									"\r",
									"\r",
									"pm.test(\"Validate auth Tree Login MFA -> Node -> DataStore -> conn -> false node \", () => {\r",
									"    pm.expect(dataStore_connection_false_expected, 'Login MFA tree->node->Data store->outcome->true did not match').to.be.eql(dataStore_connection_false_actual);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate auth Tree Login MFA -> Node -> DataStore -> conn -> true node \", () => {\r",
									"    pm.expect(dataStore_connection_true_expected, 'Login MFA tree->node->Data store->outcome->false did not match').to.be.eql(dataStore_connection_true_actual);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate auth Tree Login MFA -> Node -> DataStore -> display name \", () => {\r",
									"    pm.expect(dataStore_displayName_expected, 'Login MFA tree->node->Data store->display name false did not match').to.be.eql(dataStore_displayName_actual);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate auth Tree Login MFA -> Node -> DataStore -> Node Type \", () => {\r",
									"    pm.expect(dataStore_nodeType_expected, 'Login MFA tree->node->Data store->nodeType false did not match').to.be.eql(dataStore_nodeType_actual);\r",
									"});\r",
									"\r",
									"\r",
									"//LofinMFA -> Inner Tree\r",
									"const InnerTreeEvaluator_id = pm.collectionVariables.get(\"AuthTree_Login_MFA_nodes_InnerTree_id\");\r",
									"\r",
									"//actual inner Tree Evaluator decision \r",
									"const innerTree_connection_false_actual = jsonData.nodes[InnerTreeEvaluator_id].connections.false;\r",
									"const innerTree_connection_true_actual = jsonData.nodes[InnerTreeEvaluator_id].connections.true;\r",
									"const innerTree_displayName_actual = jsonData.nodes[InnerTreeEvaluator_id].displayName;\r",
									"const innerTree_nodeType_actual = jsonData.nodes[InnerTreeEvaluator_id].nodeType;\r",
									"\r",
									"//expected inner Tree Evaluator decision \r",
									"const innerTree_connection_false_expected = pm.collectionVariables.get(\"AuthTree_Login_nodes_MFA_InnerTree_conn_false\");\r",
									"const innerTree_connection_true_expected = pm.collectionVariables.get(\"AuthTree_Login_nodes_MFA_InnerTree_conn_true\");\r",
									"const innerTree_displayName_expected = pm.collectionVariables.get(\"AuthTree_Login_nodes_MFA_InnerTree_displayName\");\r",
									"const innerTree_nodeType_expected = pm.collectionVariables.get(\"AuthTree_Login_nodes_MFA_InnerTree_nodeType\");\r",
									"\r",
									"\r",
									"pm.test(\"Validate auth Tree Login MFA -> Node -> Inner Tree Evaluator -> outcome -> false node \", () => {\r",
									"    pm.expect(innerTree_connection_false_expected, 'Login MFA tree->node->Inner tree evaluator->outcome->false did not match').to.be.eql(innerTree_connection_false_actual);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate auth Tree Login MFA -> Node -> Inner Tree Evaluator -> outcome -> true Node \", () => {\r",
									"    pm.expect(innerTree_connection_true_expected, 'Login MFA tree->node->Inner tree evaluator->outcome->true did not match').to.be.eql(innerTree_connection_true_actual);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate auth Tree Login MFA -> Node -> Inner Tree Evaluator -> display name  \", () => {\r",
									"    pm.expect(innerTree_displayName_expected, 'Login MFA tree->node->Inner tree evaluator->display Name did not match').to.be.eql(innerTree_displayName_actual);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate auth Tree Login MFA -> Node -> Inner Tree Evaluator -> Node type \", () => {\r",
									"    pm.expect(innerTree_nodeType_expected, 'Login MFA tree->node->Inner tree evaluator->nodeType did not match').to.be.eql(innerTree_nodeType_actual);\r",
									"});\r",
									"\r",
									"\r",
									"//LofinMFA -> Page Node\r",
									"const PageNode_id = pm.collectionVariables.get(\"AuthTree_Login_MFA_nodes_PageNode_id\");\r",
									"\r",
									"//actual\r",
									"const PageNode_connection_true_actual = jsonData.nodes[PageNode_id].connections.outcome;\r",
									"const PageNode_displayName_actual = jsonData.nodes[PageNode_id].displayName;\r",
									"const PageNode_nodeType_actual = jsonData.nodes[PageNode_id].nodeType;\r",
									"\r",
									"//expected\r",
									"const PageNode_connection_true_expected = pm.collectionVariables.get(\"AuthTree_Login_nodes_MFA_PageNode_conn_outcome\");\r",
									"const PageNode_displayName_expected = pm.collectionVariables.get(\"AuthTree_Login_nodes_MFA_PageNode_displayName\");\r",
									"const PageNode_nodeType_expected = pm.collectionVariables.get(\"AuthTree_Login_nodes_MFA_PageNode_nodeType\");\r",
									"\r",
									"\r",
									"pm.test(\"Validate auth Tree Login MFA-> Node -> PageNode -> outcome -> true\", () => {\r",
									"    pm.expect(PageNode_connection_true_actual, 'Login MFA tree->node->Page Node->outcome->true did not match').to.be.eql(PageNode_connection_true_expected);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate auth Tree Login MFA-> Node -> PageNode -> display name  \", () => {\r",
									"    pm.expect(PageNode_displayName_actual, 'Login MFA tree->node->Page Node->display name did not match').to.be.eql(PageNode_displayName_expected);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate auth Tree Login MFA-> Node -> Node type \", () => {\r",
									"    pm.expect(PageNode_nodeType_actual, 'Login MFA tree->node->Page Node->nodeType did not match').to.be.eql(PageNode_nodeType_expected);\r",
									"});\r",
									"\r",
									"\r",
									"//LofinMFA ->  Increment Login\r",
									"const IncrementLogin_id = pm.collectionVariables.get(\"AuthTree_Login_MFA_nodes_IncrementLogin_id\");\r",
									"\r",
									"//actual\r",
									"const IncrementLogin_connection_true_actual = jsonData.nodes[IncrementLogin_id].connections.outcome;\r",
									"const IncrementLogin_displayName_actual = jsonData.nodes[IncrementLogin_id].displayName;\r",
									"const IncrementLogin_nodeType_actual = jsonData.nodes[IncrementLogin_id].nodeType;\r",
									"\r",
									"//expected\r",
									"const IncrementLogin_connection_true_expected = pm.collectionVariables.get(\"AuthTree_Login_nodes_MFA_IncrementLogin_conn_outcome\");\r",
									"const IncrementLogin_displayName_expected = pm.collectionVariables.get(\"AuthTree_Login_nodes_MFA_IncrementLogin_displayName\");\r",
									"const IncrementLogin_nodeType_expected = pm.collectionVariables.get(\"AuthTree_Login_nodes_MFA_IncrementLogin_nodeType\");\r",
									"\r",
									"pm.test(\"Validate auth Tree Login MFA-> Node -> Increment Login -> outcome -> true\", () => {\r",
									"    pm.expect(IncrementLogin_connection_true_expected, 'Login MFA tree->node->Increment Login->outcome->true did not match').to.be.eql(IncrementLogin_connection_true_actual);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate auth Tree Login MFA-> Node -> Increment Login -> display \", () => {\r",
									"    pm.expect(IncrementLogin_displayName_expected, 'Login MFA tree->node->Increment Login->display name did not match').to.be.eql(IncrementLogin_displayName_actual);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate auth Tree Login MFA-> Node -> Increment Login -> Node Type \", () => {\r",
									"    pm.expect(IncrementLogin_nodeType_expected, 'Login MFA tree->node->Increment Login->nodeType did not match').to.be.eql(IncrementLogin_nodeType_actual);\r",
									"});\r",
									"\r",
									"//LofinMFA -> Notify call\r",
									"const NotifyCall_id = pm.collectionVariables.get(\"AuthTree_Login_MFA_nodes_NotifyCall_id\");\r",
									"\r",
									"//actual\r",
									"const Notifycall_connection_false_actual = jsonData.nodes[NotifyCall_id].connections.false;\r",
									"const Notifycall_connection_true_actual = jsonData.nodes[NotifyCall_id].connections.true;\r",
									"const Notifycall_displayName_actual = jsonData.nodes[NotifyCall_id].displayName;\r",
									"const Notifycall_nodeType_actual = jsonData.nodes[NotifyCall_id].nodeType;\r",
									"\r",
									"//expected\r",
									"const Notifycall_connection_false_expected = pm.collectionVariables.get(\"AuthTree_Login_nodes_MFA_Notifycall_conn_false\");\r",
									"const Notifycall_connection_true_expected = pm.collectionVariables.get(\"AuthTree_Login_nodes_MFA_Notifycall_conn_true\");\r",
									"const Notifycall_displayName_expected = pm.collectionVariables.get(\"AuthTree_Login_nodes_MFA_Notifycall_displayName\");\r",
									"const Notifycall_nodeType_expected = pm.collectionVariables.get(\"AuthTree_Login_nodes_MFA_Notifycall_nodeType\");\r",
									"\r",
									"pm.test(\"Validate auth Tree Login MFA-> Node -> Notify call -> conn -> false node \", () => {\r",
									"    pm.expect(Notifycall_connection_false_expected, 'Login MFA tree->node->Notify ->outcome->true did not match').to.be.eql(Notifycall_connection_false_actual);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate auth Tree Login MFA-> Node -> Notify call -> Conn -> True node \", () => {\r",
									"    pm.expect(Notifycall_connection_true_expected, 'Login MFA tree->node->Notify ->display name did not match').to.be.eql(Notifycall_connection_true_actual);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate auth Tree Login MFA-> Node -> Display name \", () => {\r",
									"    pm.expect(Notifycall_displayName_expected, 'Login MFA tree->node->Notify ->display name did not match').to.be.eql(Notifycall_displayName_actual);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate auth Tree Login MFA-> Node -> Notify call -> Node type \", () => {\r",
									"    pm.expect(Notifycall_nodeType_expected, 'Login MFA tree->node->Notify ->nodeType did not match').to.be.eql(Notifycall_nodeType_actual);\r",
									"});\r",
									"\r",
									"\r",
									"//login-MFA - Inentify Existing User\r",
									"const ExistingUser_id = pm.collectionVariables.get(\"AuthTree_Login_nodes_MFA_IdentityExistingUser_id\");\r",
									"const ExistingUser_response_actual = jsonData.nodes[ExistingUser_id];\r",
									"const ExistingUser_response_expected = JSON.parse(pm.collectionVariables.get(\"AuthTree_Login_nodes_MFA_IdentityExistingUser_response\"));\r",
									"\r",
									"pm.test(\"Validate auth Tree Login MFA-> Node -> existing User node contains correct response\", () => {\r",
									"    pm.expect(deepEqual(ExistingUser_response_actual, ExistingUser_response_expected), ` Login MFA-> Node -> existing User node contains incorrect response.\r",
									"            Expected => ${JSON.stringify(ExistingUser_response_expected)}   \r",
									"            Actual => ${JSON.stringify(ExistingUser_response_actual)}`).to.be.true;\r",
									"});\r",
									"\r",
									"\r",
									"//login-MFA - OTP Collector\r",
									"const OTPCollector_id = pm.collectionVariables.get(\"AuthTree_Login_nodes_MFA_OTPCollectionDecision_id\");\r",
									"const OTPCollector_response_actual = jsonData.nodes[OTPCollector_id];\r",
									"const OTPCollector_response_expected = JSON.parse(pm.collectionVariables.get(\"AuthTree_Login_nodes_MFA_OTPCollectionDecision_response\"));\r",
									"\r",
									"pm.test(\"Validate auth Tree Login MFA-> Node -> OTP Collector node contains correct response\", () => {\r",
									"    pm.expect(deepEqual(OTPCollector_response_actual, OTPCollector_response_expected), `  Login MFA-> Node -> OTP Collector node contains incorrect response.\r",
									"            Expected => ${JSON.stringify(OTPCollector_response_expected)}   \r",
									"            Actual => ${JSON.stringify(OTPCollector_response_actual)}`).to.be.true;\r",
									"});\r",
									"\r",
									"\r",
									"//login-MFA - Has Phone Number\r",
									"const HasPhone_id = pm.collectionVariables.get(\"AuthTree_Login_nodes_MFA_HasPhoneNumber_id\");\r",
									"const HasPhone_response_actual = jsonData.nodes[HasPhone_id];\r",
									"const HasPhone_response_expected = JSON.parse(pm.collectionVariables.get(\"AuthTree_Login_nodes_MFA_HasPhoneNumber_response\"));\r",
									"\r",
									"pm.test(\"Validate auth Tree Login MFA-> Node -> Has Phone Number node contains correct response\", () => {\r",
									"    pm.expect(deepEqual(HasPhone_response_actual, HasPhone_response_expected), ` Login MFA-> Node -> Has Phone Number node contains incorrect response.\r",
									"            Expected => ${JSON.stringify(HasPhone_response_expected)}   \r",
									"            Actual => ${JSON.stringify(HasPhone_response_actual)}`).to.be.true;\r",
									"});\r",
									"\r",
									"\r",
									"//login-MFA - HOTP Generator\r",
									"const HOTP_id = pm.collectionVariables.get(\"AuthTree_Login_nodes_MFA_HOTP_id\");\r",
									"const HOTP_response_actual = jsonData.nodes[HOTP_id];\r",
									"const HOTP_response_expected = JSON.parse(pm.collectionVariables.get(\"AuthTree_Login_nodes_MFA_HOTP_response\"));\r",
									"\r",
									"pm.test(\"Validate auth Tree Login MFA-> Node ->HOTP Generator node contains correct response\", () => {\r",
									"    pm.expect(deepEqual(HOTP_response_actual, HOTP_response_expected), ` Login MFA-> Node ->HOTP Generator node contains incorrect response.\r",
									"            Expected => ${JSON.stringify(HOTP_response_expected)}   \r",
									"            Actual => ${JSON.stringify(HOTP_response_actual)}`).to.be.true;\r",
									"});\r",
									"\r",
									"//login-MFA - Set up Notify\r",
									"const SetupNotify_id = pm.collectionVariables.get(\"AuthTree_Login_nodes_MFA_SetUpNotify_id\");\r",
									"const SetupNotify_response_actual = jsonData.nodes[SetupNotify_id];\r",
									"const SetupNotify_response_expected = JSON.parse(pm.collectionVariables.get(\"AuthTree_Login_nodes_MFA_SetUpNotify_response\"));\r",
									"\r",
									"pm.test(\"Validate auth Tree Login MFA-> Node ->Set Up Notify node contains correct response\", () => {\r",
									"    pm.expect(deepEqual(SetupNotify_response_actual, SetupNotify_response_expected), ` Login MFA-> Node ->Set Up Notify node contains incorrect response\r",
									"            Expected => ${JSON.stringify(SetupNotify_response_expected)}   \r",
									"            Actual => ${JSON.stringify(SetupNotify_response_actual)}`).to.be.true;\r",
									"});\r",
									"\r",
									"\r",
									"//login-MFA - static Nodes\r",
									"const StaticNodes_response_actual = jsonData.staticNodes;\r",
									"const StaticNodes_response_expected = JSON.parse(pm.collectionVariables.get(\"AuthTree_Login_nodes_MFA_StaticNodes_response\"));\r",
									"\r",
									"pm.test(\"Validate auth Tree Login MFA-> Scripted Nodes contains correct nodes\", () => {\r",
									"    pm.expect(deepEqual(SetupNotify_response_actual, SetupNotify_response_expected), `  auth Tree Login MFA-> Scripted Nodes contains incorrect nodes\r",
									"            Expected => ${JSON.stringify(StaticNodes_response_expected)}   \r",
									"            Actual => ${JSON.stringify(StaticNodes_response_actual)}`).to.be.true;\r",
									"});\r",
									"\r",
									"//login-MFA - uiConfig\r",
									"const UiConfig_response_actual = jsonData.uiConfig;\r",
									"var UiConfig_response_expected = pm.collectionVariables.get(\"AuthTree_Login_nodes_MFA_uiConfig_response\");\r",
									"\r",
									"// if (pm.collectionVariables.get(\"AuthTree_Login_nodes_MFA_uiConfig_response\"))\r",
									"//     UiConfig_response_expected = pm.collectionVariables.get(\"AuthTree_Login_nodes_MFA_uiConfig_response\");\r",
									"// else\r",
									"//     UiConfig_response_expected = JSON.parse(pm.collectionVariables.get(\"AuthTree_Login_nodes_MFA_uiConfig_response\"));\r",
									"\r",
									"pm.test(\"Validate auth Tree Login MFA-> uiConfig contains correct response\", () => {\r",
									"    pm.expect(deepEqual(UiConfig_response_actual, UiConfig_response_expected), `  auth Tree Login MFA-> uiConfig contains incorrect response\r",
									"            Expected => ${JSON.stringify(UiConfig_response_expected)}   \r",
									"            Actual => ${JSON.stringify(UiConfig_response_actual)}`).to.be.true;\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"//deep comparing two objects \r",
									"function deepEqual(object1, object2) {\r",
									"    const keys1 = Object.keys(object1);\r",
									"    const keys2 = Object.keys(object2);\r",
									"\r",
									"    if (keys1.length !== keys2.length) {\r",
									"        return false;\r",
									"    }\r",
									"\r",
									"    for (const key of keys1) {\r",
									"        const val1 = object1[key];\r",
									"        const val2 = object2[key];\r",
									"        const areObjects = isObject(val1) && isObject(val2);\r",
									"        if (\r",
									"            areObjects && !deepEqual(val1, val2) ||\r",
									"            !areObjects && val1 !== val2\r",
									"        ) {\r",
									"            return false;\r",
									"        }\r",
									"    }\r",
									"\r",
									"    return true;\r",
									"}\r",
									"\r",
									"//validate if object is valid\r",
									"function isObject(object) {\r",
									"    return object != null && typeof object === 'object';\r",
									"}\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "cookie",
								"value": "{{cookie_Name}} = {{session_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{platformUrl}}/am/json/{{realm}}/realm-config/authentication/authenticationtrees/trees/loginmfa",
							"host": [
								"{{platformUrl}}"
							],
							"path": [
								"am",
								"json",
								"{{realm}}",
								"realm-config",
								"authentication",
								"authenticationtrees",
								"trees",
								"loginmfa"
							]
						}
					},
					"response": []
				},
				{
					"name": "Registration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = JSON.parse(responseBody);\r",
									"\r",
									"//validating auth-tree Registration response contains correct entries\r",
									"pm.test(\"Auth Tree Registration response contains correct entries\", () => {\r",
									"\r",
									"    //actual\r",
									"    const _id_actual = jsonData._id;\r",
									"    const description_actual = jsonData.description\r",
									"    const entryNodeId_actual = jsonData.entryNodeId\r",
									"    const identityResource_actual = jsonData.identityResource\r",
									"\r",
									"    //expected\r",
									"    const _id_expected = pm.collectionVariables.get(\"AuthTree_Registration_id\");\r",
									"    const description_expected = pm.collectionVariables.get(\"AuthTree_Registration_description\");\r",
									"    const entryNodeId_expected = pm.collectionVariables.get(\"AuthTree_Registration_entryNode\");\r",
									"    const identityResource_expected = pm.collectionVariables.get(\"AuthTree_Registration_identityResource\");\r",
									"\r",
									"    pm.expect(_id_expected, 'Registration _id did not match').to.be.eql(_id_actual);\r",
									"    pm.expect(description_expected, 'Registration -> description did not match').to.be.eql(description_actual);\r",
									"    pm.expect(entryNodeId_expected, 'Registration -> entry node Id did not match').to.be.eql(entryNodeId_actual);\r",
									"    pm.expect(identityResource_actual, 'Registration -> identity resource did not match').to.be.eql(identityResource_expected);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate auth Tree Registration -> Node -> createObject entries \", () => {\r",
									"    const createObject_id = pm.collectionVariables.get(\"AuthTree_Registration_nodes_createObject_id\");\r",
									"\r",
									"    //actual create object  \r",
									"    const createObject_connection_created_actual = jsonData.nodes[createObject_id].connections.CREATED;\r",
									"    const createObject_connection_failure_actual = jsonData.nodes[createObject_id].connections.FAILURE;\r",
									"    const createObject_displayName_actual = jsonData.nodes[createObject_id].displayName;\r",
									"    const createObject_nodeType_actual = jsonData.nodes[createObject_id].nodeType;\r",
									"\r",
									"    //total number of actual nodes - expected\r",
									"    const totalNodes_length_actual = Object.keys(jsonData.nodes).length;\r",
									"\r",
									"    //expected create object\r",
									"    const createObject_connection_created_expected = pm.collectionVariables.get(\"AuthTree_Registration_nodes_createObject_conn_created\");\r",
									"    const createObject_connection_failure_expected = pm.collectionVariables.get(\"AuthTree_Registration_nodes_createObject_conn_failure\");\r",
									"    const createObject_displayName_expected = pm.collectionVariables.get(\"AuthTree_Registration_nodes_createObject_displayName\");\r",
									"    const createObject_nodeType_expected = pm.collectionVariables.get(\"AuthTree_Registration_nodes_createObject_nodeType\");\r",
									"\r",
									"    //total number of nodes - expected\r",
									"    const totalNodes_length_expected = parseInt(pm.collectionVariables.get(\"AuthTree_Registration_nodes_count\"));\r",
									"\r",
									"    //validate total number of nodes \r",
									"    pm.expect(totalNodes_length_expected, \" Incorrect number of nodes in the auth tree\").to.be.eql(totalNodes_length_actual)\r",
									"\r",
									"    //Data store \r",
									"    pm.expect(createObject_connection_created_expected, 'Registration->node->create object->outcome->created did not match').to.be.eql(createObject_connection_created_actual);\r",
									"    pm.expect(createObject_connection_failure_expected, 'Registration->node->create Object->outcome->failure did not match').to.be.eql(createObject_connection_failure_actual);\r",
									"    pm.expect(createObject_displayName_expected, 'Registration->node->create Object->display name false did not match').to.be.eql(createObject_displayName_actual);\r",
									"    pm.expect(createObject_nodeType_expected, 'Registration->node->create Object->nodeType false did not match').to.be.eql(createObject_nodeType_actual);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate auth Tree Registration -> Node -> PageNode1 entries \", () => {\r",
									"    const PageNode_id = pm.collectionVariables.get(\"AuthTree_Registration_nodes_PageNode1_id\");\r",
									"\r",
									"    //actual page node decision \r",
									"    const PageNode_connection_true_actual = jsonData.nodes[PageNode_id].connections.outcome;\r",
									"    const PageNode_displayName_actual = jsonData.nodes[PageNode_id].displayName;\r",
									"    const PageNode_nodeType_actual = jsonData.nodes[PageNode_id].nodeType;\r",
									"\r",
									"    //total number of actual nodes - expected\r",
									"    const totalNodes_length_actual = Object.keys(jsonData.nodes).length;\r",
									"\r",
									"    //expected Page Node decision \r",
									"    const PageNode_connection_true_expected = pm.collectionVariables.get(\"AuthTree_Registration_nodes_PageNode1_conn_outcome\");\r",
									"    const PageNode_displayName_expected = pm.collectionVariables.get(\"AuthTree_Registration_nodes_PageNode1_displayName\");\r",
									"    const PageNode_nodeType_expected = pm.collectionVariables.get(\"AuthTree_Registration_nodes_PageNode1_nodeType\");\r",
									"\r",
									"    //total number of nodes - expected\r",
									"    const totalNodes_length_expected = parseInt(pm.collectionVariables.get(\"AuthTree_Registration_nodes_count\"));\r",
									"\r",
									"    //validate total number of nodes \r",
									"    pm.expect(totalNodes_length_expected, \" Incorrect number of nodes in the auth tree\").to.be.eql(totalNodes_length_actual)\r",
									"\r",
									"    //Page Node decision \r",
									"    pm.expect(PageNode_connection_true_expected, 'Registration->node->Page Node->outcome->true did not match').to.be.eql(PageNode_connection_true_actual);\r",
									"    pm.expect(PageNode_displayName_expected, 'Registration->node->Page Node->display name did not match').to.be.eql(PageNode_displayName_actual);\r",
									"    pm.expect(PageNode_nodeType_expected, 'Registration->node->Page Node->nodeType did not match').to.be.eql(PageNode_nodeType_actual);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate auth Tree Registration -> Node -> Increment Login count entries \", () => {\r",
									"    const IncrementLogin_id = pm.collectionVariables.get(\"AuthTree_Registration_nodes_IncrementLoginCount_id\");\r",
									"\r",
									"    //actual increment login decision \r",
									"    const IncrementLogin_connection_true_actual = jsonData.nodes[IncrementLogin_id].connections.outcome;\r",
									"    const IncrementLogin_displayName_actual = jsonData.nodes[IncrementLogin_id].displayName;\r",
									"    const IncrementLogin_nodeType_actual = jsonData.nodes[IncrementLogin_id].nodeType;\r",
									"\r",
									"    //total number of actual nodes - expected\r",
									"    const totalNodes_length_actual = Object.keys(jsonData.nodes).length;\r",
									"\r",
									"    //expected increment login decision \r",
									"    const IncrementLogin_connection_true_expected = pm.collectionVariables.get(\"AuthTree_Registration_nodes_IncrementLoginCount_conn_outcome\");\r",
									"    const IncrementLogin_displayName_expected = pm.collectionVariables.get(\"AuthTree_Registration_nodes_IncrementLoginCount_displayName\");\r",
									"    const IncrementLogin_nodeType_expected = pm.collectionVariables.get(\"AuthTree_Registration_nodes_IncrementLoginCount_nodeType\");\r",
									"\r",
									"\r",
									"    //total number of nodes - expected\r",
									"    const totalNodes_length_expected = parseInt(pm.collectionVariables.get(\"AuthTree_Registration_nodes_count\"));\r",
									"\r",
									"    //validate total number of nodes \r",
									"    pm.expect(totalNodes_length_expected, \" Incorrect number of nodes in the auth tree\").to.be.eql(totalNodes_length_actual)\r",
									"\r",
									"    //Increment Login decision \r",
									"    pm.expect(IncrementLogin_connection_true_expected, 'Registration->node->Increment Login->outcome->true did not match').to.be.eql(IncrementLogin_connection_true_actual);\r",
									"    pm.expect(IncrementLogin_displayName_expected, 'Registration->node->Increment Login->display name did not match').to.be.eql(IncrementLogin_displayName_actual);\r",
									"    pm.expect(IncrementLogin_nodeType_expected, 'Registration->node->Increment Login->nodeType did not match').to.be.eql(IncrementLogin_nodeType_actual);\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Validate auth Tree Registration -> Node -> PageNode2 entries \", () => {\r",
									"    const PageNode_id = pm.collectionVariables.get(\"AuthTree_Registration_nodes_PageNode2_id\");\r",
									"\r",
									"    //actual page node decision \r",
									"    const PageNode_connection_true_actual = jsonData.nodes[PageNode_id].connections.outcome;\r",
									"    const PageNode_displayName_actual = jsonData.nodes[PageNode_id].displayName;\r",
									"    const PageNode_nodeType_actual = jsonData.nodes[PageNode_id].nodeType;\r",
									"\r",
									"    //total number of actual nodes - expected\r",
									"    const totalNodes_length_actual = Object.keys(jsonData.nodes).length;\r",
									"\r",
									"    //expected Page Node decision \r",
									"    const PageNode_connection_true_expected = pm.collectionVariables.get(\"AuthTree_Registration_nodes_PageNode2_conn_outcome\");\r",
									"    const PageNode_displayName_expected = pm.collectionVariables.get(\"AuthTree_Registration_nodes_PageNode2_displayName\");\r",
									"    const PageNode_nodeType_expected = pm.collectionVariables.get(\"AuthTree_Registration_nodes_PageNode2_nodeType\");\r",
									"\r",
									"    //total number of nodes - expected\r",
									"    const totalNodes_length_expected = parseInt(pm.collectionVariables.get(\"AuthTree_Registration_nodes_count\"));\r",
									"\r",
									"    //validate total number of nodes \r",
									"    pm.expect(totalNodes_length_expected, \" Incorrect number of nodes in the auth tree\").to.be.eql(totalNodes_length_actual)\r",
									"\r",
									"    //Page Node decision \r",
									"    pm.expect(PageNode_connection_true_expected, 'Registration->node->Page Node 2->outcome->true did not match').to.be.eql(PageNode_connection_true_actual);\r",
									"    pm.expect(PageNode_displayName_expected, 'Registration->node->Page Node 2->display name did not match').to.be.eql(PageNode_displayName_actual);\r",
									"    pm.expect(PageNode_nodeType_expected, 'Registration->node->Page Node 2->nodeType did not match').to.be.eql(PageNode_nodeType_actual);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "cookie",
								"value": "{{cookie_Name}} = {{session_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{platformUrl}}/am/json/{{realm}}/realm-config/authentication/authenticationtrees/trees/registrationtest",
							"host": [
								"{{platformUrl}}"
							],
							"path": [
								"am",
								"json",
								"{{realm}}",
								"realm-config",
								"authentication",
								"authenticationtrees",
								"trees",
								"registrationtest"
							]
						}
					},
					"response": [
						{
							"name": "Registration",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/realm-config/authentication/authenticationtrees/trees/registrationtest",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"realm-config",
										"authentication",
										"authenticationtrees",
										"trees",
										"registrationtest"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "x-frame-options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "x-content-type-options",
									"value": "nosniff"
								},
								{
									"key": "x-content-type-options",
									"value": "nosniff"
								},
								{
									"key": "cache-control",
									"value": "private"
								},
								{
									"key": "cache-control",
									"value": "no-store"
								},
								{
									"key": "warning",
									"value": "100 OpenAM REST \"No Accept-API-Version specified\""
								},
								{
									"key": "warning",
									"value": "100 chf \"Accept-API-Version should be included in the request.\""
								},
								{
									"key": "content-api-version",
									"value": "resource=1.0"
								},
								{
									"key": "etag",
									"value": "\"93446341\""
								},
								{
									"key": "expires",
									"value": "0"
								},
								{
									"key": "pragma",
									"value": "no-cache"
								},
								{
									"key": "content-type",
									"value": "application/json;charset=UTF-8"
								},
								{
									"key": "content-length",
									"value": "1156"
								},
								{
									"key": "date",
									"value": "Sat, 06 Feb 2021 06:03:59 GMT"
								},
								{
									"key": "strict-transport-security",
									"value": "max-age=31536000; includeSubDomains; preload;"
								},
								{
									"key": "Via",
									"value": "1.1 google"
								},
								{
									"key": "Alt-Svc",
									"value": "clear"
								}
							],
							"cookie": [],
							"body": "{\n    \"_id\": \"registrationtest\",\n    \"_rev\": \"93446341\",\n    \"description\": \"Platform Registration Tree2\",\n    \"entryNodeId\": \"f9bc718b-35e3-453f-87d5-f6e2c28a615f\",\n    \"identityResource\": \"managed/alpha_user\",\n    \"nodes\": {\n        \"3774750f-2cf9-4b21-a516-5dfb1cf576a7\": {\n            \"connections\": {\n                \"CREATED\": \"bec697b0-3836-4b3e-8b60-cce8699e5286\",\n                \"FAILURE\": \"e301438c-0bd0-429c-ab0c-66126501069a\"\n            },\n            \"displayName\": \"Create Object\",\n            \"nodeType\": \"CreateObjectNode\",\n            \"x\": 613.125,\n            \"y\": 123\n        },\n        \"a912e3e2-a86b-4072-95de-79b5a731bd45\": {\n            \"connections\": {\n                \"outcome\": \"3774750f-2cf9-4b21-a516-5dfb1cf576a7\"\n            },\n            \"displayName\": \"Page Node\",\n            \"nodeType\": \"PageNode\",\n            \"x\": 417.84375,\n            \"y\": 119\n        },\n        \"bec697b0-3836-4b3e-8b60-cce8699e5286\": {\n            \"connections\": {\n                \"outcome\": \"70e691a5-1e33-4ac3-a356-e7b6d60d92e0\"\n            },\n            \"displayName\": \"Increment Login Count\",\n            \"nodeType\": \"IncrementLoginCountNode\",\n            \"x\": 771.5,\n            \"y\": 112\n        },\n        \"f9bc718b-35e3-453f-87d5-f6e2c28a615f\": {\n            \"connections\": {\n                \"outcome\": \"a912e3e2-a86b-4072-95de-79b5a731bd45\"\n            },\n            \"displayName\": \"Page Node\",\n            \"nodeType\": \"PageNode\",\n            \"x\": 152,\n            \"y\": 25\n        }\n    },\n    \"staticNodes\": {\n        \"70e691a5-1e33-4ac3-a356-e7b6d60d92e0\": {\n            \"x\": 985.140625,\n            \"y\": 145.5\n        },\n        \"e301438c-0bd0-429c-ab0c-66126501069a\": {\n            \"x\": 771.5,\n            \"y\": 179\n        },\n        \"startNode\": {\n            \"x\": 50,\n            \"y\": 145.5\n        }\n    },\n    \"uiConfig\": {}\n}"
						}
					]
				}
			]
		},
		{
			"name": "Nodes",
			"item": [
				{
					"name": "Login Nodes",
					"item": [
						{
							"name": "Authentication to Top-Level Realm",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const JSONResponse = JSON.parse(responseBody);",
											"",
											"// Did request have a callback?",
											"if(JSONResponse.authId && JSONResponse.authId != \"\")",
											"{",
											"  // Set `authId` variable",
											"  pm.environment.set(\"authId\", JSONResponse.authId);",
											"}",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"description": "The media type of the resource.",
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"description": "This collection documents version 2.1 of the authentication resource.",
										"key": "Accept-API-Version",
										"value": "resource=2.1",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/authenticate",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"authenticate"
									]
								},
								"description": "To get started, request the callbacks from the top-level realm."
							},
							"response": []
						},
						{
							"name": "Authenticate as ID Cloud Admin and Get Session Token, and Cookie Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const JSONResponse = JSON.parse(responseBody);",
											"",
											"// Did request return SSO Token?",
											"if(JSONResponse.tokenId && JSONResponse.tokenId != \"\")",
											"{",
											"  // Set `session token` variable",
											"  pm.environment.set(\"session_token\", JSONResponse.tokenId);",
											"",
											"  // Remove `authId` variable",
											"  pm.environment.unset(\"authId\");",
											"",
											"}",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"description": "Specifies that the `/json/authenticate` endpoint uses JSON format for requests.",
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"description": "Specifies the version of the `/json/authenticate` endpoint to use.",
										"key": "Accept-API-Version",
										"value": "resource=2.1, protocol=1.0",
										"disabled": true
									},
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"authId\": \"{{authId}}\",\n    \"callbacks\": [\n        {\n            \"type\": \"NameCallback\",\n            \"output\": [\n                {\n                    \"name\": \"prompt\",\n                    \"value\": \"User Name\"\n                }\n            ],\n            \"input\": [\n                {\n                    \"name\": \"IDToken1\",\n                    \"value\": \"{{IDCloudAdminUsername}}\"\n                }\n            ],\n            \"_id\": 0\n        },\n        {\n            \"type\": \"PasswordCallback\",\n            \"output\": [\n                {\n                    \"name\": \"prompt\",\n                    \"value\": \"Password\"\n                }\n            ],\n            \"input\": [\n                {\n                    \"name\": \"IDToken2\",\n                    \"value\": \"{{IDCloudAdminPassword}}\"\n                }\n            ],\n            \"_id\": 1\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platformUrl}}/am/json/authenticate",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"authenticate"
									]
								},
								"description": "Return the callback, specifying the credentials of an administrative user.\nThis request obtains the name used in headers to specify the session token. To manually provide the session token name, in the ID Cloud console, navigate to **Tenant Settings**, and copy the *Cookie Name* value. Use this value in the `cookieName` variable in your Postman Collection."
							},
							"response": []
						},
						{
							"name": "Login Tree - Node -> Page Node",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = JSON.parse(responseBody);\r",
											"\r",
											"//validating login -> paga nodes -> subnodes(username & password)\r",
											"pm.test(\"Login -> page node contains correct subnodes\", () => {\r",
											"\r",
											"    const login_pageNode_nodes_actual = jsonData.nodes;\r",
											"    const login_pageNode_nodes_expected = JSON.parse(\"[\" + pm.collectionVariables.get(\"AuthTree_Login_nodes_PageNode_subnodes\") + \"]\");\r",
											"\r",
											"    if (login_pageNode_nodes_expected.length == login_pageNode_nodes_actual.length) {\r",
											"        for (let index = 0; index < login_pageNode_nodes_actual.length; index++) {\r",
											"            pm.expect(deepEqual(login_pageNode_nodes_actual[index], login_pageNode_nodes_expected[index]), `Login->pageNode subnode in the collection did not match  \r",
											"            Expected => ${JSON.stringify(login_pageNode_nodes_expected[index])}   \r",
											"            Actual => ${JSON.stringify(login_pageNode_nodes_actual[index])}`).to.be.true;\r",
											"        }\r",
											"    }\r",
											"    else\r",
											"        pm.expect(login_pageNode_nodes_expected.length, \"Login->pageNode contains incorrect number of sub nodes in the collection\").to.be.eql(login_pageNode_nodes_actual.length);\r",
											"});\r",
											"\r",
											"//deep comparing two objects \r",
											"function deepEqual(object1, object2) {\r",
											"    const keys1 = Object.keys(object1);\r",
											"    const keys2 = Object.keys(object2);\r",
											"\r",
											"    if (keys1.length !== keys2.length) {\r",
											"        return false;\r",
											"    }\r",
											"\r",
											"    for (const key of keys1) {\r",
											"        const val1 = object1[key];\r",
											"        const val2 = object2[key];\r",
											"        const areObjects = isObject(val1) && isObject(val2);\r",
											"        if (\r",
											"            areObjects && !deepEqual(val1, val2) ||\r",
											"            !areObjects && val1 !== val2\r",
											"        ) {\r",
											"            return false;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    return true;\r",
											"}\r",
											"\r",
											"//validate if object is valid\r",
											"function isObject(object) {\r",
											"    return object != null && typeof object === 'object';\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/realm-config/authentication/authenticationtrees/nodes/PageNode/{{AuthTree_Login_nodes_PageNode_id}}",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"realm-config",
										"authentication",
										"authenticationtrees",
										"nodes",
										"PageNode",
										"{{AuthTree_Login_nodes_PageNode_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login Tree - Node -> Data Store Decision",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"validating Login -> data store node contains correct entries\", () => {\r",
											"\r",
											"    const login_Datastore_nodes_actual = JSON.parse(responseBody);\r",
											"    const login_Datastore_nodes_expected = JSON.parse(pm.collectionVariables.get(\"AuthTree_Login_nodes_dataStore_response\"));\r",
											"\r",
											"    pm.expect(deepEqual(login_Datastore_nodes_actual,login_Datastore_nodes_expected),`Login->datastore values did not match  \r",
											"            Expected => ${JSON.stringify(login_Datastore_nodes_expected)}\r",
											"            Actual => ${JSON.stringify(login_Datastore_nodes_actual)}`).to.be.true;\r",
											"});\r",
											"\r",
											"//deep comparing two objects \r",
											"function deepEqual(object1, object2) {\r",
											"    const keys1 = Object.keys(object1);\r",
											"    const keys2 = Object.keys(object2);\r",
											"\r",
											"    if (keys1.length !== keys2.length) {\r",
											"        return false;\r",
											"    }\r",
											"\r",
											"    for (const key of keys1) {\r",
											"        const val1 = object1[key];\r",
											"        const val2 = object2[key];\r",
											"        const areObjects = isObject(val1) && isObject(val2);\r",
											"        if (\r",
											"            areObjects && !deepEqual(val1, val2) ||\r",
											"            !areObjects && val1 !== val2\r",
											"        ) {\r",
											"            return false;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    return true;\r",
											"}\r",
											"\r",
											"//validate if object is valid\r",
											"function isObject(object) {\r",
											"    return object != null && typeof object === 'object';\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/realm-config/authentication/authenticationtrees/nodes/DataStoreDecisionNode/{{AuthTree_Login_nodes_DataStore_id}}",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"realm-config",
										"authentication",
										"authenticationtrees",
										"nodes",
										"DataStoreDecisionNode",
										"{{AuthTree_Login_nodes_DataStore_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login Tree - Node -> Increment Login Count",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"validating Login -> increment login count node contains correct entries\", () => {\r",
											"\r",
											"    const login_incrementLogin_nodes_actual = JSON.parse(responseBody);\r",
											"    const login_incrementLogin_nodes_expected = JSON.parse(pm.collectionVariables.get(\"AuthTree_Login_nodes_incrementLoginCount_response\"));\r",
											"\r",
											"    pm.expect(deepEqual(login_incrementLogin_nodes_actual,login_incrementLogin_nodes_expected),`Login-> increment login count node values did not match  \r",
											"            Expected => ${JSON.stringify(login_incrementLogin_nodes_expected)}\r",
											"            Actual => ${JSON.stringify(login_incrementLogin_nodes_actual)}`).to.be.true;\r",
											"});\r",
											"\r",
											"//deep comparing two objects \r",
											"function deepEqual(object1, object2) {\r",
											"    const keys1 = Object.keys(object1);\r",
											"    const keys2 = Object.keys(object2);\r",
											"\r",
											"    if (keys1.length !== keys2.length) {\r",
											"        return false;\r",
											"    }\r",
											"\r",
											"    for (const key of keys1) {\r",
											"        const val1 = object1[key];\r",
											"        const val2 = object2[key];\r",
											"        const areObjects = isObject(val1) && isObject(val2);\r",
											"        if (\r",
											"            areObjects && !deepEqual(val1, val2) ||\r",
											"            !areObjects && val1 !== val2\r",
											"        ) {\r",
											"            return false;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    return true;\r",
											"}\r",
											"\r",
											"//validate if object is valid\r",
											"function isObject(object) {\r",
											"    return object != null && typeof object === 'object';\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/realm-config/authentication/authenticationtrees/nodes/IncrementLoginCountNode/{{AuthTree_Login_nodes_IncrementLogin_id}}",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"realm-config",
										"authentication",
										"authenticationtrees",
										"nodes",
										"IncrementLoginCountNode",
										"{{AuthTree_Login_nodes_IncrementLogin_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login Tree - Node -> Inner Tree Evaluator",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"validating Login -> inner tree evaluator node contains correct entries\", () => {\r",
											"\r",
											"    const login_innerTree_nodes_actual = JSON.parse(responseBody);\r",
											"    const login_innerTree_nodes_expected = JSON.parse(pm.collectionVariables.get(\"AuthTree_Login_nodes_innerTreeEvaluator_response\"));\r",
											"\r",
											"    pm.expect(deepEqual(login_innerTree_nodes_actual,login_innerTree_nodes_expected),`Login-> inner tree evaluator node values did not match  \r",
											"            Expected => ${JSON.stringify(login_innerTree_nodes_expected)}\r",
											"            Actual => ${JSON.stringify(login_innerTree_nodes_actual)}`).to.be.true;\r",
											"});\r",
											"\r",
											"//deep comparing two objects \r",
											"function deepEqual(object1, object2) {\r",
											"    const keys1 = Object.keys(object1);\r",
											"    const keys2 = Object.keys(object2);\r",
											"\r",
											"    if (keys1.length !== keys2.length) {\r",
											"        return false;\r",
											"    }\r",
											"\r",
											"    for (const key of keys1) {\r",
											"        const val1 = object1[key];\r",
											"        const val2 = object2[key];\r",
											"        const areObjects = isObject(val1) && isObject(val2);\r",
											"        if (\r",
											"            areObjects && !deepEqual(val1, val2) ||\r",
											"            !areObjects && val1 !== val2\r",
											"        ) {\r",
											"            return false;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    return true;\r",
											"}\r",
											"\r",
											"//validate if object is valid\r",
											"function isObject(object) {\r",
											"    return object != null && typeof object === 'object';\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/realm-config/authentication/authenticationtrees/nodes/InnerTreeEvaluatorNode/{{AuthTree_Login_nodes_InnerTree_id}}",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"realm-config",
										"authentication",
										"authenticationtrees",
										"nodes",
										"InnerTreeEvaluatorNode",
										"{{AuthTree_Login_nodes_InnerTree_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login Tree - Node - PageNode -> Platform Username",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Login -> page node -> username contains correct entries\", () => {\r",
											"\r",
											"    const login_pageNode_nodes_Username_actual = JSON.parse(responseBody)\r",
											"    const login_pageNode_nodes_Username_expected = JSON.parse(pm.collectionVariables.get(\"AuthTree_Login_nodes_PageNode_subnodes_PlatformUsername_response\"));\r",
											"\r",
											"    pm.expect(deepEqual(login_pageNode_nodes_Username_actual,login_pageNode_nodes_Username_expected),`Login->pagenode->usernames values did not match  \r",
											"            Expected => ${JSON.stringify(login_pageNode_nodes_Username_expected)}\r",
											"            Actual => ${JSON.stringify(login_pageNode_nodes_Username_actual)}`).to.be.true;\r",
											"});\r",
											"\r",
											"//deep comparing two objects \r",
											"function deepEqual(object1, object2) {\r",
											"    const keys1 = Object.keys(object1);\r",
											"    const keys2 = Object.keys(object2);\r",
											"\r",
											"    if (keys1.length !== keys2.length) {\r",
											"        return false;\r",
											"    }\r",
											"\r",
											"    for (const key of keys1) {\r",
											"        const val1 = object1[key];\r",
											"        const val2 = object2[key];\r",
											"        const areObjects = isObject(val1) && isObject(val2);\r",
											"        if (\r",
											"            areObjects && !deepEqual(val1, val2) ||\r",
											"            !areObjects && val1 !== val2\r",
											"        ) {\r",
											"            return false;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    return true;\r",
											"}\r",
											"\r",
											"//validate if object is valid\r",
											"function isObject(object) {\r",
											"    return object != null && typeof object === 'object';\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/realm-config/authentication/authenticationtrees/nodes/ValidatedUsernameNode/{{AuthTree_Login_nodes_PageNode_subnodes_PlatformUsername_id}}",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"realm-config",
										"authentication",
										"authenticationtrees",
										"nodes",
										"ValidatedUsernameNode",
										"{{AuthTree_Login_nodes_PageNode_subnodes_PlatformUsername_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login Tree - Node - PageNode -> Platform password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Login -> page node -> password contains correct entries\", () => {\r",
											"    const login_pageNode_nodes_Password_actual = JSON.parse(responseBody)\r",
											"    const login_pageNode_nodes_Password_expected = JSON.parse(pm.collectionVariables.get(\"AuthTree_Login_nodes_PageNode_subnodes_PlatformPassword_response\"));\r",
											"\r",
											"    pm.expect(deepEqual(login_pageNode_nodes_Password_actual,login_pageNode_nodes_Password_expected),`Login->pagenode->password values did not match  \r",
											"            Expected => ${JSON.stringify(login_pageNode_nodes_Password_expected)}\r",
											"            Actual => ${JSON.stringify(login_pageNode_nodes_Password_actual)}`).to.be.true;\r",
											"});\r",
											"\r",
											"//deep comparing two objects \r",
											"function deepEqual(object1, object2) {\r",
											"    const keys1 = Object.keys(object1);\r",
											"    const keys2 = Object.keys(object2);\r",
											"\r",
											"    if (keys1.length !== keys2.length) {\r",
											"        return false;\r",
											"    }\r",
											"\r",
											"    for (const key of keys1) {\r",
											"        const val1 = object1[key];\r",
											"        const val2 = object2[key];\r",
											"        const areObjects = isObject(val1) && isObject(val2);\r",
											"        if (\r",
											"            areObjects && !deepEqual(val1, val2) ||\r",
											"            !areObjects && val1 !== val2\r",
											"        ) {\r",
											"            return false;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    return true;\r",
											"}\r",
											"\r",
											"//validate if object is valid\r",
											"function isObject(object) {\r",
											"    return object != null && typeof object === 'object';\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/realm-config/authentication/authenticationtrees/nodes/ValidatedPasswordNode/{{AuthTree_Login_nodes_PageNode_subnodes_PlatformPassword_id}}",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"realm-config",
										"authentication",
										"authenticationtrees",
										"nodes",
										"ValidatedPasswordNode",
										"{{AuthTree_Login_nodes_PageNode_subnodes_PlatformPassword_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Login MFA Nodes",
					"item": [
						{
							"name": "Authentication to Top-Level Realm Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const JSONResponse = JSON.parse(responseBody);",
											"",
											"// Did request have a callback?",
											"if(JSONResponse.authId && JSONResponse.authId != \"\")",
											"{",
											"  // Set `authId` variable",
											"  pm.environment.set(\"authId\", JSONResponse.authId);",
											"}",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"description": "The media type of the resource.",
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"description": "This collection documents version 2.1 of the authentication resource.",
										"key": "Accept-API-Version",
										"value": "resource=2.1",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/authenticate",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"authenticate"
									]
								},
								"description": "To get started, request the callbacks from the top-level realm."
							},
							"response": []
						},
						{
							"name": "Authenticate as ID Cloud Admin and Get Session Token, and Cookie Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const JSONResponse = JSON.parse(responseBody);",
											"",
											"// Did request return SSO Token?",
											"if(JSONResponse.tokenId && JSONResponse.tokenId != \"\")",
											"{",
											"  // Set `session token` variable",
											"  pm.environment.set(\"session_token\", JSONResponse.tokenId);",
											"",
											"  // Remove `authId` variable",
											"  pm.environment.unset(\"authId\");",
											"",
											"}",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"description": "Specifies that the `/json/authenticate` endpoint uses JSON format for requests.",
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"description": "Specifies the version of the `/json/authenticate` endpoint to use.",
										"key": "Accept-API-Version",
										"value": "resource=2.1, protocol=1.0",
										"disabled": true
									},
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"authId\": \"{{authId}}\",\n    \"callbacks\": [\n        {\n            \"type\": \"NameCallback\",\n            \"output\": [\n                {\n                    \"name\": \"prompt\",\n                    \"value\": \"User Name\"\n                }\n            ],\n            \"input\": [\n                {\n                    \"name\": \"IDToken1\",\n                    \"value\": \"{{IDCloudAdminUsername}}\"\n                }\n            ],\n            \"_id\": 0\n        },\n        {\n            \"type\": \"PasswordCallback\",\n            \"output\": [\n                {\n                    \"name\": \"prompt\",\n                    \"value\": \"Password\"\n                }\n            ],\n            \"input\": [\n                {\n                    \"name\": \"IDToken2\",\n                    \"value\": \"{{IDCloudAdminPassword}}\"\n                }\n            ],\n            \"_id\": 1\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platformUrl}}/am/json/authenticate",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"authenticate"
									]
								},
								"description": "Return the callback, specifying the credentials of an administrative user.\nThis request obtains the name used in headers to specify the session token. To manually provide the session token name, in the ID Cloud console, navigate to **Tenant Settings**, and copy the *Cookie Name* value. Use this value in the `cookieName` variable in your Postman Collection."
							},
							"response": []
						},
						{
							"name": "Login Tree MFA - Node -> Page Node",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = JSON.parse(responseBody);\r",
											"\r",
											"//validating login -> paga nodes -> subnodes(username & password)\r",
											"pm.test(\"Login -> page node contains correct subnodes\", () => {\r",
											"\r",
											"    const login_MFA_pageNode_nodes_actual = jsonData.nodes;\r",
											"    const login_MFA_pageNode_nodes_expected = JSON.parse(\"[\" + pm.collectionVariables.get(\"AuthTree_Login_MFA_nodes_PageNode_subnodes\") + \"]\");\r",
											"\r",
											"    if (login_MFA_pageNode_nodes_expected.length == login_MFA_pageNode_nodes_actual.length) {\r",
											"        for (let index = 0; index < login_MFA_pageNode_nodes_actual.length; index++) {\r",
											"            pm.expect(deepEqual(login_MFA_pageNode_nodes_actual[index], login_MFA_pageNode_nodes_expected[index]), `Login MFA->pageNode subnode in the collection did not match  \r",
											"            Expected => ${JSON.stringify(login_MFA_pageNode_nodes_expected[index])}   \r",
											"            Actual => ${JSON.stringify(login_MFA_pageNode_nodes_actual[index])}`).to.be.true;\r",
											"        }\r",
											"    }\r",
											"    else\r",
											"        pm.expect(login_MFA_pageNode_nodes_expected.length, \"Login->pageNode contains incorrect number of sub nodes in the collection\").to.be.eql(login_MFA_pageNode_nodes_actual.length);\r",
											"});\r",
											"\r",
											"//deep comparing two objects \r",
											"function deepEqual(object1, object2) {\r",
											"    const keys1 = Object.keys(object1);\r",
											"    const keys2 = Object.keys(object2);\r",
											"\r",
											"    if (keys1.length !== keys2.length) {\r",
											"        return false;\r",
											"    }\r",
											"\r",
											"    for (const key of keys1) {\r",
											"        const val1 = object1[key];\r",
											"        const val2 = object2[key];\r",
											"        const areObjects = isObject(val1) && isObject(val2);\r",
											"        if (\r",
											"            areObjects && !deepEqual(val1, val2) ||\r",
											"            !areObjects && val1 !== val2\r",
											"        ) {\r",
											"            return false;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    return true;\r",
											"}\r",
											"\r",
											"//validate if object is valid\r",
											"function isObject(object) {\r",
											"    return object != null && typeof object === 'object';\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/realm-config/authentication/authenticationtrees/nodes/PageNode/{{AuthTree_Login_MFA_nodes_PageNode_id}}",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"realm-config",
										"authentication",
										"authenticationtrees",
										"nodes",
										"PageNode",
										"{{AuthTree_Login_MFA_nodes_PageNode_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login MFA Tree - Node -> Data Store Decision",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"validating Login MFA-> data store node contains correct entries\", () => {\r",
											"\r",
											"    const login_MFA_Datastore_nodes_actual = JSON.parse(responseBody);\r",
											"    const login_MFA_Datastore_nodes_expected = JSON.parse(pm.collectionVariables.get(\"AuthTree_Login_MFA_nodes_dataStore_response\"));\r",
											"\r",
											"    pm.expect(deepEqual(login_MFA_Datastore_nodes_actual,login_MFA_Datastore_nodes_expected),`Login->datastore values did not match  \r",
											"            Expected => ${JSON.stringify(login_MFA_Datastore_nodes_expected)}\r",
											"            Actual => ${JSON.stringify(login_MFA_Datastore_nodes_actual)}`).to.be.true;\r",
											"});\r",
											"\r",
											"//deep comparing two objects \r",
											"function deepEqual(object1, object2) {\r",
											"    const keys1 = Object.keys(object1);\r",
											"    const keys2 = Object.keys(object2);\r",
											"\r",
											"    if (keys1.length !== keys2.length) {\r",
											"        return false;\r",
											"    }\r",
											"\r",
											"    for (const key of keys1) {\r",
											"        const val1 = object1[key];\r",
											"        const val2 = object2[key];\r",
											"        const areObjects = isObject(val1) && isObject(val2);\r",
											"        if (\r",
											"            areObjects && !deepEqual(val1, val2) ||\r",
											"            !areObjects && val1 !== val2\r",
											"        ) {\r",
											"            return false;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    return true;\r",
											"}\r",
											"\r",
											"//validate if object is valid\r",
											"function isObject(object) {\r",
											"    return object != null && typeof object === 'object';\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/realm-config/authentication/authenticationtrees/nodes/DataStoreDecisionNode/{{AuthTree_Login_MFA_nodes_DataStore_id}}",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"realm-config",
										"authentication",
										"authenticationtrees",
										"nodes",
										"DataStoreDecisionNode",
										"{{AuthTree_Login_MFA_nodes_DataStore_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login MFA Tree - Node -> Increment Login Count",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"validating Login MFA-> increment login count node contains correct entries\", () => {\r",
											"\r",
											"    const login_MFA_incrementLogin_nodes_actual = JSON.parse(responseBody);\r",
											"    const login_MFA_incrementLogin_nodes_expected = JSON.parse(pm.collectionVariables.get(\"AuthTree_Login_MFA_nodes_incrementLoginCount_response\"));\r",
											"\r",
											"    pm.expect(deepEqual(login_MFA_incrementLogin_nodes_actual,login_MFA_incrementLogin_nodes_expected),`Login MFA-> increment login count node values did not match  \r",
											"            Expected => ${JSON.stringify(login_MFA_incrementLogin_nodes_expected)}\r",
											"            Actual => ${JSON.stringify(login_MFA_incrementLogin_nodes_actual)}`).to.be.true;\r",
											"});\r",
											"\r",
											"//deep comparing two objects \r",
											"function deepEqual(object1, object2) {\r",
											"    const keys1 = Object.keys(object1);\r",
											"    const keys2 = Object.keys(object2);\r",
											"\r",
											"    if (keys1.length !== keys2.length) {\r",
											"        return false;\r",
											"    }\r",
											"\r",
											"    for (const key of keys1) {\r",
											"        const val1 = object1[key];\r",
											"        const val2 = object2[key];\r",
											"        const areObjects = isObject(val1) && isObject(val2);\r",
											"        if (\r",
											"            areObjects && !deepEqual(val1, val2) ||\r",
											"            !areObjects && val1 !== val2\r",
											"        ) {\r",
											"            return false;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    return true;\r",
											"}\r",
											"\r",
											"//validate if object is valid\r",
											"function isObject(object) {\r",
											"    return object != null && typeof object === 'object';\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/realm-config/authentication/authenticationtrees/nodes/IncrementLoginCountNode/{{AuthTree_Login_MFA_nodes_IncrementLogin_id}}",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"realm-config",
										"authentication",
										"authenticationtrees",
										"nodes",
										"IncrementLoginCountNode",
										"{{AuthTree_Login_MFA_nodes_IncrementLogin_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login MFA Tree - Node -> Inner Tree Evaluator",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"validating Login MFA-> inner tree evaluator node contains correct entries\", () => {\r",
											"\r",
											"    const login_MFA_innerTree_nodes_actual = JSON.parse(responseBody);\r",
											"    const login_MFA_innerTree_nodes_expected = JSON.parse(pm.collectionVariables.get(\"AuthTree_Login_MFA_nodes_innerTreeEvaluator_response\"));\r",
											"\r",
											"    pm.expect(deepEqual(login_MFA_innerTree_nodes_actual,login_MFA_innerTree_nodes_expected),`Login MFA-> inner tree evaluator node values did not match  \r",
											"            Expected => ${JSON.stringify(login_MFA_innerTree_nodes_expected)}\r",
											"            Actual => ${JSON.stringify(login_MFA_innerTree_nodes_actual)}`).to.be.true;\r",
											"});\r",
											"\r",
											"//deep comparing two objects \r",
											"function deepEqual(object1, object2) {\r",
											"    const keys1 = Object.keys(object1);\r",
											"    const keys2 = Object.keys(object2);\r",
											"\r",
											"    if (keys1.length !== keys2.length) {\r",
											"        return false;\r",
											"    }\r",
											"\r",
											"    for (const key of keys1) {\r",
											"        const val1 = object1[key];\r",
											"        const val2 = object2[key];\r",
											"        const areObjects = isObject(val1) && isObject(val2);\r",
											"        if (\r",
											"            areObjects && !deepEqual(val1, val2) ||\r",
											"            !areObjects && val1 !== val2\r",
											"        ) {\r",
											"            return false;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    return true;\r",
											"}\r",
											"\r",
											"//validate if object is valid\r",
											"function isObject(object) {\r",
											"    return object != null && typeof object === 'object';\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/realm-config/authentication/authenticationtrees/nodes/InnerTreeEvaluatorNode/{{AuthTree_Login_MFA_nodes_InnerTree_id}}",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"realm-config",
										"authentication",
										"authenticationtrees",
										"nodes",
										"InnerTreeEvaluatorNode",
										"{{AuthTree_Login_MFA_nodes_InnerTree_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login MFA Tree - Node -> Notify call",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"validating Login MFA-> Notify call node contains correct entries\", () => {\r",
											"\r",
											"    const login_MFA_NotifyCall_nodes_actual = JSON.parse(responseBody);\r",
											"    const login_MFA_NotifyCall_nodes_expected = JSON.parse(pm.collectionVariables.get(\"AuthTree_Login_MFA_nodes_notifyCall_response\"));\r",
											"\r",
											"    pm.expect(deepEqual(login_MFA_NotifyCall_nodes_actual,login_MFA_NotifyCall_nodes_expected),`Login MFA->Notify call values did not match  \r",
											"            Expected => ${JSON.stringify(login_MFA_NotifyCall_nodes_expected)}\r",
											"            Actual => ${JSON.stringify(login_MFA_NotifyCall_nodes_actual)}`).to.be.true;\r",
											"});\r",
											"\r",
											"//deep comparing two objects \r",
											"function deepEqual(object1, object2) {\r",
											"    const keys1 = Object.keys(object1);\r",
											"    const keys2 = Object.keys(object2);\r",
											"\r",
											"    if (keys1.length !== keys2.length) {\r",
											"        return false;\r",
											"    }\r",
											"\r",
											"    for (const key of keys1) {\r",
											"        const val1 = object1[key];\r",
											"        const val2 = object2[key];\r",
											"        const areObjects = isObject(val1) && isObject(val2);\r",
											"        if (\r",
											"            areObjects && !deepEqual(val1, val2) ||\r",
											"            !areObjects && val1 !== val2\r",
											"        ) {\r",
											"            return false;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    return true;\r",
											"}\r",
											"\r",
											"//validate if object is valid\r",
											"function isObject(object) {\r",
											"    return object != null && typeof object === 'object';\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/realm-config/authentication/authenticationtrees/nodes/ScriptedDecisionNode/{{AuthTree_Login_MFA_nodes_NotifyCall_id}}",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"realm-config",
										"authentication",
										"authenticationtrees",
										"nodes",
										"ScriptedDecisionNode",
										"{{AuthTree_Login_MFA_nodes_NotifyCall_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login MFA Tree - Node - PageNode -> Platform Username",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Login MFA-> page node -> username contains correct entries\", () => {\r",
											"\r",
											"    const login_MFA_pageNode_nodes_Username_actual = JSON.parse(responseBody)\r",
											"    const login_MFA_pageNode_nodes_Username_expected = JSON.parse(pm.collectionVariables.get(\"AuthTree_Login_MFA_nodes_PageNode_subnodes_PlatformUsername_response\"));\r",
											"\r",
											"    pm.expect(deepEqual(login_MFA_pageNode_nodes_Username_actual,login_MFA_pageNode_nodes_Username_expected),`Login MFA->pagenode->usernames values did not match  \r",
											"            Expected => ${JSON.stringify(login_MFA_pageNode_nodes_Username_expected)}\r",
											"            Actual => ${JSON.stringify(login_MFA_pageNode_nodes_Username_actual)}`).to.be.true;\r",
											"});\r",
											"\r",
											"//deep comparing two objects \r",
											"function deepEqual(object1, object2) {\r",
											"    const keys1 = Object.keys(object1);\r",
											"    const keys2 = Object.keys(object2);\r",
											"\r",
											"    if (keys1.length !== keys2.length) {\r",
											"        return false;\r",
											"    }\r",
											"\r",
											"    for (const key of keys1) {\r",
											"        const val1 = object1[key];\r",
											"        const val2 = object2[key];\r",
											"        const areObjects = isObject(val1) && isObject(val2);\r",
											"        if (\r",
											"            areObjects && !deepEqual(val1, val2) ||\r",
											"            !areObjects && val1 !== val2\r",
											"        ) {\r",
											"            return false;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    return true;\r",
											"}\r",
											"\r",
											"//validate if object is valid\r",
											"function isObject(object) {\r",
											"    return object != null && typeof object === 'object';\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/realm-config/authentication/authenticationtrees/nodes/ValidatedUsernameNode/{{AuthTree_Login_MFA_nodes_PageNode_subnodes_PlatformUsername_id}}",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"realm-config",
										"authentication",
										"authenticationtrees",
										"nodes",
										"ValidatedUsernameNode",
										"{{AuthTree_Login_MFA_nodes_PageNode_subnodes_PlatformUsername_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login MFA Tree - Node - PageNode -> Platform password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Login MFA-> page node -> password contains correct entries\", () => {\r",
											"    const login_MFA_pageNode_nodes_Password_actual = JSON.parse(responseBody)\r",
											"    const login_MFA_pageNode_nodes_Password_expected = JSON.parse(pm.collectionVariables.get(\"AuthTree_Login_MFA_nodes_PageNode_subnodes_PlatformPassword_response\"));\r",
											"\r",
											"    pm.expect(deepEqual(login_MFA_pageNode_nodes_Password_actual,login_MFA_pageNode_nodes_Password_expected),`Login MFA->pagenode->password values did not match  \r",
											"            Expected => ${JSON.stringify(login_MFA_pageNode_nodes_Password_expected)}\r",
											"            Actual => ${JSON.stringify(login_MFA_pageNode_nodes_Password_actual)}`).to.be.true;\r",
											"});\r",
											"\r",
											"//deep comparing two objects \r",
											"function deepEqual(object1, object2) {\r",
											"    const keys1 = Object.keys(object1);\r",
											"    const keys2 = Object.keys(object2);\r",
											"\r",
											"    if (keys1.length !== keys2.length) {\r",
											"        return false;\r",
											"    }\r",
											"\r",
											"    for (const key of keys1) {\r",
											"        const val1 = object1[key];\r",
											"        const val2 = object2[key];\r",
											"        const areObjects = isObject(val1) && isObject(val2);\r",
											"        if (\r",
											"            areObjects && !deepEqual(val1, val2) ||\r",
											"            !areObjects && val1 !== val2\r",
											"        ) {\r",
											"            return false;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    return true;\r",
											"}\r",
											"\r",
											"//validate if object is valid\r",
											"function isObject(object) {\r",
											"    return object != null && typeof object === 'object';\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/realm-config/authentication/authenticationtrees/nodes/ValidatedPasswordNode/{{AuthTree_Login_MFA_nodes_PageNode_subnodes_PlatformPassword_id}}",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"realm-config",
										"authentication",
										"authenticationtrees",
										"nodes",
										"ValidatedPasswordNode",
										"{{AuthTree_Login_MFA_nodes_PageNode_subnodes_PlatformPassword_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Registration Nodes",
					"item": [
						{
							"name": "Authentication to Top-Level Realm Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const JSONResponse = JSON.parse(responseBody);",
											"",
											"// Did request have a callback?",
											"if(JSONResponse.authId && JSONResponse.authId != \"\")",
											"{",
											"  // Set `authId` variable",
											"  pm.environment.set(\"authId\", JSONResponse.authId);",
											"}",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"description": "The media type of the resource.",
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"description": "This collection documents version 2.1 of the authentication resource.",
										"key": "Accept-API-Version",
										"value": "resource=2.1",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/authenticate",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"authenticate"
									]
								},
								"description": "To get started, request the callbacks from the top-level realm."
							},
							"response": []
						},
						{
							"name": "Authenticate as ID Cloud Admin and Get Session Token, and Cookie Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const JSONResponse = JSON.parse(responseBody);",
											"",
											"// Did request return SSO Token?",
											"if(JSONResponse.tokenId && JSONResponse.tokenId != \"\")",
											"{",
											"  // Set `session token` variable",
											"  pm.environment.set(\"session_token\", JSONResponse.tokenId);",
											"",
											"  // Remove `authId` variable",
											"  pm.environment.unset(\"authId\");",
											"",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"description": "Specifies that the `/json/authenticate` endpoint uses JSON format for requests.",
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"description": "Specifies the version of the `/json/authenticate` endpoint to use.",
										"key": "Accept-API-Version",
										"value": "resource=2.1, protocol=1.0",
										"disabled": true
									},
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"authId\": \"{{authId}}\",\n    \"callbacks\": [\n        {\n            \"type\": \"NameCallback\",\n            \"output\": [\n                {\n                    \"name\": \"prompt\",\n                    \"value\": \"User Name\"\n                }\n            ],\n            \"input\": [\n                {\n                    \"name\": \"IDToken1\",\n                    \"value\": \"{{IDCloudAdminUsername}}\"\n                }\n            ],\n            \"_id\": 0\n        },\n        {\n            \"type\": \"PasswordCallback\",\n            \"output\": [\n                {\n                    \"name\": \"prompt\",\n                    \"value\": \"Password\"\n                }\n            ],\n            \"input\": [\n                {\n                    \"name\": \"IDToken2\",\n                    \"value\": \"{{IDCloudAdminPassword}}\"\n                }\n            ],\n            \"_id\": 1\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platformUrl}}/am/json/authenticate",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"authenticate"
									]
								},
								"description": "Return the callback, specifying the credentials of an administrative user.\nThis request obtains the name used in headers to specify the session token. To manually provide the session token name, in the ID Cloud console, navigate to **Tenant Settings**, and copy the *Cookie Name* value. Use this value in the `cookieName` variable in your Postman Collection."
							},
							"response": []
						},
						{
							"name": "Registration Tree - Node -> Page Node 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Registration -> page node1 contains correct subnodes\", () => {\r",
											"\r",
											"    const Registration_pageNode_nodes_actual = jsonData.nodes;\r",
											"    const Registration_pageNode_nodes_expected = JSON.parse(\"[\" + pm.collectionVariables.get(\"AuthTree_Registration_nodes_PageNode1_subnodes\") + \"]\");\r",
											"\r",
											"    if (Registration_pageNode_nodes_expected.length == Registration_pageNode_nodes_actual.length) {\r",
											"        for (let index = 0; index < Registration_pageNode_nodes_actual.length; index++) {\r",
											"            pm.expect(deepEqual(Registration_pageNode_nodes_actual[index], Registration_pageNode_nodes_expected[index]), `Registration->pageNode(containing attribute collector only) subnode in the collection did not match  \r",
											"            Expected => ${JSON.stringify(Registration_pageNode_nodes_expected[index])}   \r",
											"            Actual => ${JSON.stringify(Registration_pageNode_nodes_actual[index])}`).to.be.true;\r",
											"        }\r",
											"    }\r",
											"    else\r",
											"        pm.expect(Registration_pageNode_nodes_expected.length, \"Registration->pageNode(containing attribute collector only) contains incorrect number of sub nodes in the collection\").to.be.eql(Registration_pageNode_nodes_actual.length);\r",
											"});\r",
											"\r",
											"//deep comparing two objects \r",
											"function deepEqual(object1, object2) {\r",
											"    const keys1 = Object.keys(object1);\r",
											"    const keys2 = Object.keys(object2);\r",
											"\r",
											"    if (keys1.length !== keys2.length) {\r",
											"        return false;\r",
											"    }\r",
											"\r",
											"    for (const key of keys1) {\r",
											"        const val1 = object1[key];\r",
											"        const val2 = object2[key];\r",
											"        const areObjects = isObject(val1) && isObject(val2);\r",
											"        if (\r",
											"            areObjects && !deepEqual(val1, val2) ||\r",
											"            !areObjects && val1 !== val2\r",
											"        ) {\r",
											"            return false;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    return true;\r",
											"}\r",
											"\r",
											"//validate if object is valid\r",
											"function isObject(object) {\r",
											"    return object != null && typeof object === 'object';\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/realm-config/authentication/authenticationtrees/nodes/PageNode/{{AuthTree_Registration_nodes_PageNode1_id}}",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"realm-config",
										"authentication",
										"authenticationtrees",
										"nodes",
										"PageNode",
										"{{AuthTree_Registration_nodes_PageNode1_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Registration Tree - Node -> Page Node 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Registration -> page node2 contains correct subnodes\", () => {\r",
											"\r",
											"    const Registration_pageNode_nodes_actual = jsonData.nodes;\r",
											"    const Registration_pageNode_nodes_expected = JSON.parse(\"[\" + pm.collectionVariables.get(\"AuthTree_Registration_nodes_PageNode2_subnodes\") + \"]\");\r",
											"\r",
											"    if (Registration_pageNode_nodes_expected.length == Registration_pageNode_nodes_actual.length) {\r",
											"        for (let index = 0; index < Registration_pageNode_nodes_actual.length; index++) {\r",
											"            pm.expect(deepEqual(Registration_pageNode_nodes_actual[index], Registration_pageNode_nodes_expected[index]), `Registration->pageNode(containing username,password,KBS,etc) subnode in the collection did not match  \r",
											"            Expected => ${JSON.stringify(Registration_pageNode_nodes_expected[index])}   \r",
											"            Actual => ${JSON.stringify(Registration_pageNode_nodes_actual[index])}`).to.be.true;\r",
											"        }\r",
											"    }\r",
											"    else\r",
											"        pm.expect(Registration_pageNode_nodes_expected.length, \"Registration->pageNode(containing username,password,KBS,etc) contains incorrect number of sub nodes in the collection\").to.be.eql(Registration_pageNode_nodes_actual.length);\r",
											"});\r",
											"\r",
											"//deep comparing two objects \r",
											"function deepEqual(object1, object2) {\r",
											"    const keys1 = Object.keys(object1);\r",
											"    const keys2 = Object.keys(object2);\r",
											"\r",
											"    if (keys1.length !== keys2.length) {\r",
											"        return false;\r",
											"    }\r",
											"\r",
											"    for (const key of keys1) {\r",
											"        const val1 = object1[key];\r",
											"        const val2 = object2[key];\r",
											"        const areObjects = isObject(val1) && isObject(val2);\r",
											"        if (\r",
											"            areObjects && !deepEqual(val1, val2) ||\r",
											"            !areObjects && val1 !== val2\r",
											"        ) {\r",
											"            return false;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    return true;\r",
											"}\r",
											"\r",
											"//validate if object is valid\r",
											"function isObject(object) {\r",
											"    return object != null && typeof object === 'object';\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/realm-config/authentication/authenticationtrees/nodes/PageNode/{{AuthTree_Registration_nodes_PageNode2_id}}",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"realm-config",
										"authentication",
										"authenticationtrees",
										"nodes",
										"PageNode",
										"{{AuthTree_Registration_nodes_PageNode2_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Registration Tree - Node -> Increment Login Count",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"validating Registration -> increment login count node contains correct entries\", () => {\r",
											"\r",
											"    const Registration_incrementLogin_nodes_actual = JSON.parse(responseBody);\r",
											"    const Registration_incrementLogin_nodes_expected = JSON.parse(pm.collectionVariables.get(\"AuthTree_Registration_nodes_incrementLoginCount_response\"));\r",
											"\r",
											"    pm.expect(deepEqual(Registration_incrementLogin_nodes_actual,Registration_incrementLogin_nodes_expected),`Registration-> increment login count node values did not match  \r",
											"            Expected => ${JSON.stringify(Registration_incrementLogin_nodes_expected)}\r",
											"            Actual => ${JSON.stringify(Registration_incrementLogin_nodes_actual)}`).to.be.true;\r",
											"});\r",
											"\r",
											"//deep comparing two objects \r",
											"function deepEqual(object1, object2) {\r",
											"    const keys1 = Object.keys(object1);\r",
											"    const keys2 = Object.keys(object2);\r",
											"\r",
											"    if (keys1.length !== keys2.length) {\r",
											"        return false;\r",
											"    }\r",
											"\r",
											"    for (const key of keys1) {\r",
											"        const val1 = object1[key];\r",
											"        const val2 = object2[key];\r",
											"        const areObjects = isObject(val1) && isObject(val2);\r",
											"        if (\r",
											"            areObjects && !deepEqual(val1, val2) ||\r",
											"            !areObjects && val1 !== val2\r",
											"        ) {\r",
											"            return false;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    return true;\r",
											"}\r",
											"\r",
											"//validate if object is valid\r",
											"function isObject(object) {\r",
											"    return object != null && typeof object === 'object';\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/realm-config/authentication/authenticationtrees/nodes/IncrementLoginCountNode/{{AuthTree_Registration_nodes_IncrementLoginCount_id}}",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"realm-config",
										"authentication",
										"authenticationtrees",
										"nodes",
										"IncrementLoginCountNode",
										"{{AuthTree_Registration_nodes_IncrementLoginCount_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Registration Tree - Node -> Created Object",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"validating Registration -> CreateObject node contains correct entries\", () => {\r",
											"\r",
											"    const Registration_CreateObject_nodes_actual = JSON.parse(responseBody);\r",
											"    const Registration_CreateObject_nodes_expected = JSON.parse(pm.collectionVariables.get(\"AuthTree_Registration_nodes_createObject_response\"));\r",
											"\r",
											"    pm.expect(deepEqual(Registration_CreateObject_nodes_actual,Registration_CreateObject_nodes_expected),` Registration -> CreateObject node values did not match  \r",
											"            Expected => ${JSON.stringify(Registration_CreateObject_nodes_expected)}\r",
											"            Actual => ${JSON.stringify(Registration_CreateObject_nodes_actual)}`).to.be.true;\r",
											"});\r",
											"\r",
											"//deep comparing two objects \r",
											"function deepEqual(object1, object2) {\r",
											"    const keys1 = Object.keys(object1);\r",
											"    const keys2 = Object.keys(object2);\r",
											"\r",
											"    if (keys1.length !== keys2.length) {\r",
											"        return false;\r",
											"    }\r",
											"\r",
											"    for (const key of keys1) {\r",
											"        const val1 = object1[key];\r",
											"        const val2 = object2[key];\r",
											"        const areObjects = isObject(val1) && isObject(val2);\r",
											"        if (\r",
											"            areObjects && !deepEqual(val1, val2) ||\r",
											"            !areObjects && val1 !== val2\r",
											"        ) {\r",
											"            return false;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    return true;\r",
											"}\r",
											"\r",
											"//validate if object is valid\r",
											"function isObject(object) {\r",
											"    return object != null && typeof object === 'object';\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/realm-config/authentication/authenticationtrees/nodes/CreateObjectNode/{{AuthTree_Registration_nodes_createObject_id}}",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"realm-config",
										"authentication",
										"authenticationtrees",
										"nodes",
										"CreateObjectNode",
										"{{AuthTree_Registration_nodes_createObject_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Registration Tree - Node -> Page Node 1 -> Attribute collector",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"validating Registration -> page node1 -> attribute collector node contains correct entries\", () => {\r",
											"\r",
											"    const Registration_Attributes_nodes_actual = JSON.parse(responseBody);\r",
											"    const Registration_Attributes_nodes_expected = JSON.parse(pm.collectionVariables.get(\"AuthTree_Registration_nodes_PageNode1_AttributeCollector_response\"));\r",
											"\r",
											"    pm.expect(deepEqual(Registration_Attributes_nodes_actual,Registration_Attributes_nodes_expected),`Registraion -> Page Node -> Attribute collector values did not match  \r",
											"            Expected => ${JSON.stringify(Registration_Attributes_nodes_expected)}\r",
											"            Actual => ${JSON.stringify(Registration_Attributes_nodes_actual)}`).to.be.true;\r",
											"});\r",
											"\r",
											"//deep comparing two objects \r",
											"function deepEqual(object1, object2) {\r",
											"    const keys1 = Object.keys(object1);\r",
											"    const keys2 = Object.keys(object2);\r",
											"\r",
											"    if (keys1.length !== keys2.length) {\r",
											"        return false;\r",
											"    }\r",
											"\r",
											"    for (const key of keys1) {\r",
											"        const val1 = object1[key];\r",
											"        const val2 = object2[key];\r",
											"        const areObjects = isObject(val1) && isObject(val2);\r",
											"        if (\r",
											"            areObjects && !deepEqual(val1, val2) ||\r",
											"            !areObjects && val1 !== val2\r",
											"        ) {\r",
											"            return false;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    return true;\r",
											"}\r",
											"\r",
											"//validate if object is valid\r",
											"function isObject(object) {\r",
											"    return object != null && typeof object === 'object';\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/realm-config/authentication/authenticationtrees/nodes/AttributeCollectorNode/{{AuthTree_Registration_nodes_PageNode1_AttributeCollector_id}}",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"realm-config",
										"authentication",
										"authenticationtrees",
										"nodes",
										"AttributeCollectorNode",
										"{{AuthTree_Registration_nodes_PageNode1_AttributeCollector_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Registration Tree - Node - PageNode 2 -> Platform Username",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Registration -> page node -> username contains correct entries\", () => {\r",
											"\r",
											"    const Registration_PageNode_nodes_Username_actual = JSON.parse(responseBody)\r",
											"    const Registration_pageNode_nodes_Username_expected = JSON.parse(pm.collectionVariables.get(\"AuthTree_Registration_nodes_PageNode2_UserName_response\"));\r",
											"\r",
											"    pm.expect(deepEqual(Registration_PageNode_nodes_Username_actual,Registration_pageNode_nodes_Username_expected),`LRegistration->pagenode->usernames values did not match  \r",
											"            Expected => ${JSON.stringify(Registration_pageNode_nodes_Username_expected)}\r",
											"            Actual => ${JSON.stringify(Registration_PageNode_nodes_Username_actual)}`).to.be.true;\r",
											"});\r",
											"\r",
											"//deep comparing two objects \r",
											"function deepEqual(object1, object2) {\r",
											"    const keys1 = Object.keys(object1);\r",
											"    const keys2 = Object.keys(object2);\r",
											"\r",
											"    if (keys1.length !== keys2.length) {\r",
											"        return false;\r",
											"    }\r",
											"\r",
											"    for (const key of keys1) {\r",
											"        const val1 = object1[key];\r",
											"        const val2 = object2[key];\r",
											"        const areObjects = isObject(val1) && isObject(val2);\r",
											"        if (\r",
											"            areObjects && !deepEqual(val1, val2) ||\r",
											"            !areObjects && val1 !== val2\r",
											"        ) {\r",
											"            return false;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    return true;\r",
											"}\r",
											"\r",
											"//validate if object is valid\r",
											"function isObject(object) {\r",
											"    return object != null && typeof object === 'object';\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/realm-config/authentication/authenticationtrees/nodes/ValidatedUsernameNode/{{AuthTree_Registration_nodes_PageNode2_UserName_id}}",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"realm-config",
										"authentication",
										"authenticationtrees",
										"nodes",
										"ValidatedUsernameNode",
										"{{AuthTree_Registration_nodes_PageNode2_UserName_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Registration Tree - Node -> Page Node 2 -> Attribute collector",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"validating Registration -> page node2 -> attribute collector node contains correct entries\", () => {\r",
											"\r",
											"    const Registration_Attributes_nodes_actual = JSON.parse(responseBody);\r",
											"    const Registration_Attributes_nodes_expected = JSON.parse(pm.collectionVariables.get(\"AuthTree_Registration_nodes_PageNode2_AttributeCollector_response\"));\r",
											"\r",
											"    pm.expect(deepEqual(Registration_Attributes_nodes_actual,Registration_Attributes_nodes_expected),`Registraion -> Page Node -> Attribute collector values did not match  \r",
											"            Expected => ${JSON.stringify(Registration_Attributes_nodes_expected)}\r",
											"            Actual => ${JSON.stringify(Registration_Attributes_nodes_actual)}`).to.be.true;\r",
											"});\r",
											"\r",
											"//deep comparing two objects \r",
											"function deepEqual(object1, object2) {\r",
											"    const keys1 = Object.keys(object1);\r",
											"    const keys2 = Object.keys(object2);\r",
											"\r",
											"    if (keys1.length !== keys2.length) {\r",
											"        return false;\r",
											"    }\r",
											"\r",
											"    for (const key of keys1) {\r",
											"        const val1 = object1[key];\r",
											"        const val2 = object2[key];\r",
											"        const areObjects = isObject(val1) && isObject(val2);\r",
											"        if (\r",
											"            areObjects && !deepEqual(val1, val2) ||\r",
											"            !areObjects && val1 !== val2\r",
											"        ) {\r",
											"            return false;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    return true;\r",
											"}\r",
											"\r",
											"//validate if object is valid\r",
											"function isObject(object) {\r",
											"    return object != null && typeof object === 'object';\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/realm-config/authentication/authenticationtrees/nodes/AttributeCollectorNode/{{AuthTree_Registration_nodes_PageNode2_AttributeCollector_id}}",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"realm-config",
										"authentication",
										"authenticationtrees",
										"nodes",
										"AttributeCollectorNode",
										"{{AuthTree_Registration_nodes_PageNode2_AttributeCollector_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Registration Tree - Node - PageNode 2 -> Platform password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Registration -> page node  -> password contains correct entries\", () => {\r",
											"    const Registration_pageNode_nodes_Password_actual = JSON.parse(responseBody)\r",
											"    const Registration_pageNode_nodes_Password_expected = JSON.parse(pm.collectionVariables.get(\"AuthTree_Registration_nodes_PageNode2_password_response\"));\r",
											"\r",
											"    pm.expect(deepEqual(Registration_pageNode_nodes_Password_actual,Registration_pageNode_nodes_Password_expected),`Registration->pagenode->password values did not match  \r",
											"            Expected => ${JSON.stringify(Registration_pageNode_nodes_Password_expected)}\r",
											"            Actual => ${JSON.stringify(Registration_pageNode_nodes_Password_actual)}`).to.be.true;\r",
											"});\r",
											"\r",
											"//deep comparing two objects \r",
											"function deepEqual(object1, object2) {\r",
											"    const keys1 = Object.keys(object1);\r",
											"    const keys2 = Object.keys(object2);\r",
											"\r",
											"    if (keys1.length !== keys2.length) {\r",
											"        return false;\r",
											"    }\r",
											"\r",
											"    for (const key of keys1) {\r",
											"        const val1 = object1[key];\r",
											"        const val2 = object2[key];\r",
											"        const areObjects = isObject(val1) && isObject(val2);\r",
											"        if (\r",
											"            areObjects && !deepEqual(val1, val2) ||\r",
											"            !areObjects && val1 !== val2\r",
											"        ) {\r",
											"            return false;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    return true;\r",
											"}\r",
											"\r",
											"//validate if object is valid\r",
											"function isObject(object) {\r",
											"    return object != null && typeof object === 'object';\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/realm-config/authentication/authenticationtrees/nodes/ValidatedPasswordNode/{{AuthTree_Registration_nodes_PageNode2_password_id}}",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"realm-config",
										"authentication",
										"authenticationtrees",
										"nodes",
										"ValidatedPasswordNode",
										"{{AuthTree_Registration_nodes_PageNode2_password_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Registration Tree - Node - PageNode 2 -> KBA",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Registration -> page node  -> KBA contains correct entries\", () => {\r",
											"    const Registration_pageNode_nodes_KBA_actual = JSON.parse(responseBody)\r",
											"    const Registration_pageNode_nodes_KBA_expected = JSON.parse(pm.collectionVariables.get(\"AuthTree_Registration_nodes_PageNode2_kba_response\"));\r",
											"\r",
											"    pm.expect(deepEqual(Registration_pageNode_nodes_KBA_actual,Registration_pageNode_nodes_KBA_expected),`Registration->pagenode->KBA values did not match  \r",
											"            Expected => ${JSON.stringify(Registration_pageNode_nodes_KBA_expected)}\r",
											"            Actual => ${JSON.stringify(Registration_pageNode_nodes_KBA_actual)}`).to.be.true;\r",
											"});\r",
											"\r",
											"//deep comparing two objects \r",
											"function deepEqual(object1, object2) {\r",
											"    const keys1 = Object.keys(object1);\r",
											"    const keys2 = Object.keys(object2);\r",
											"\r",
											"    if (keys1.length !== keys2.length) {\r",
											"        return false;\r",
											"    }\r",
											"\r",
											"    for (const key of keys1) {\r",
											"        const val1 = object1[key];\r",
											"        const val2 = object2[key];\r",
											"        const areObjects = isObject(val1) && isObject(val2);\r",
											"        if (\r",
											"            areObjects && !deepEqual(val1, val2) ||\r",
											"            !areObjects && val1 !== val2\r",
											"        ) {\r",
											"            return false;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    return true;\r",
											"}\r",
											"\r",
											"//validate if object is valid\r",
											"function isObject(object) {\r",
											"    return object != null && typeof object === 'object';\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/realm-config/authentication/authenticationtrees/nodes/KbaCreateNode/{{AuthTree_Registration_nodes_PageNode2_kba_id}}",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"realm-config",
										"authentication",
										"authenticationtrees",
										"nodes",
										"KbaCreateNode",
										"{{AuthTree_Registration_nodes_PageNode2_kba_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Registration Tree - Node - PageNode 2 -> Terms and Condition",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Registration -> page node  -> Terms and condition contains correct entries\", () => {\r",
											"    const Registration_pageNode_nodes_TermsnCondition_actual = JSON.parse(responseBody)\r",
											"    const Registration_pageNode_nodes_TermsnCondition_expected = JSON.parse(pm.collectionVariables.get(\"AuthTree_Registration_nodes_PageNode2_AcceptTermsnConditions_response\"));\r",
											"\r",
											"    pm.expect(deepEqual(Registration_pageNode_nodes_TermsnCondition_actual,Registration_pageNode_nodes_TermsnCondition_expected),`Registration->pagenode->Terms and condition values did not match  \r",
											"            Expected => ${JSON.stringify(Registration_pageNode_nodes_TermsnCondition_expected)}\r",
											"            Actual => ${JSON.stringify(Registration_pageNode_nodes_TermsnCondition_actual)}`).to.be.true;\r",
											"});\r",
											"\r",
											"//deep comparing two objects \r",
											"function deepEqual(object1, object2) {\r",
											"    const keys1 = Object.keys(object1);\r",
											"    const keys2 = Object.keys(object2);\r",
											"\r",
											"    if (keys1.length !== keys2.length) {\r",
											"        return false;\r",
											"    }\r",
											"\r",
											"    for (const key of keys1) {\r",
											"        const val1 = object1[key];\r",
											"        const val2 = object2[key];\r",
											"        const areObjects = isObject(val1) && isObject(val2);\r",
											"        if (\r",
											"            areObjects && !deepEqual(val1, val2) ||\r",
											"            !areObjects && val1 !== val2\r",
											"        ) {\r",
											"            return false;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    return true;\r",
											"}\r",
											"\r",
											"//validate if object is valid\r",
											"function isObject(object) {\r",
											"    return object != null && typeof object === 'object';\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/realm-config/authentication/authenticationtrees/nodes/AcceptTermsAndConditionsNode/{{AuthTree_Registration_nodes_PageNode2_AcceptTermsnConditions_id}}",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"realm-config",
										"authentication",
										"authenticationtrees",
										"nodes",
										"AcceptTermsAndConditionsNode",
										"{{AuthTree_Registration_nodes_PageNode2_AcceptTermsnConditions_id}}"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Scripts",
			"item": [
				{
					"name": "Authentication to Top-Level Realm",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const JSONResponse = JSON.parse(responseBody);",
									"",
									"// Did request have a callback?",
									"if(JSONResponse.authId && JSONResponse.authId != \"\")",
									"{",
									"  // Set `authId` variable",
									"  pm.environment.set(\"authId\", JSONResponse.authId);",
									"}",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "The media type of the resource.",
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"description": "This collection documents version 2.1 of the authentication resource.",
								"key": "Accept-API-Version",
								"value": "resource=2.1",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{platformUrl}}/am/json/authenticate",
							"host": [
								"{{platformUrl}}"
							],
							"path": [
								"am",
								"json",
								"authenticate"
							]
						},
						"description": "To get started, request the callbacks from the top-level realm."
					},
					"response": []
				},
				{
					"name": "Authenticate as ID Cloud Admin and Get Session Token, and Cookie Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const JSONResponse = JSON.parse(responseBody);",
									"",
									"// Did request return SSO Token?",
									"if(JSONResponse.tokenId && JSONResponse.tokenId != \"\")",
									"{",
									"  // Set `session token` variable",
									"  pm.environment.set(\"session_token\", JSONResponse.tokenId);",
									"",
									"  // Remove `authId` variable",
									"  pm.environment.unset(\"authId\");",
									"",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "Specifies that the `/json/authenticate` endpoint uses JSON format for requests.",
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"description": "Specifies the version of the `/json/authenticate` endpoint to use.",
								"key": "Accept-API-Version",
								"value": "resource=2.1, protocol=1.0",
								"disabled": true
							},
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"authId\": \"{{authId}}\",\n    \"callbacks\": [\n        {\n            \"type\": \"NameCallback\",\n            \"output\": [\n                {\n                    \"name\": \"prompt\",\n                    \"value\": \"User Name\"\n                }\n            ],\n            \"input\": [\n                {\n                    \"name\": \"IDToken1\",\n                    \"value\": \"{{IDCloudAdminUsername}}\"\n                }\n            ],\n            \"_id\": 0\n        },\n        {\n            \"type\": \"PasswordCallback\",\n            \"output\": [\n                {\n                    \"name\": \"prompt\",\n                    \"value\": \"Password\"\n                }\n            ],\n            \"input\": [\n                {\n                    \"name\": \"IDToken2\",\n                    \"value\": \"{{IDCloudAdminPassword}}\"\n                }\n            ],\n            \"_id\": 1\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{platformUrl}}/am/json/authenticate",
							"host": [
								"{{platformUrl}}"
							],
							"path": [
								"am",
								"json",
								"authenticate"
							]
						},
						"description": "Return the callback, specifying the credentials of an administrative user.\nThis request obtains the name used in headers to specify the session token. To manually provide the session token name, in the ID Cloud console, navigate to **Tenant Settings**, and copy the *Cookie Name* value. Use this value in the `cookieName` variable in your Postman Collection."
					},
					"response": []
				},
				{
					"name": "Send Registration Email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"const jsonData = JSON.parse(responseBody);\r",
									"\r",
									"const Registration_response_actual = jsonData;\r",
									"const Registration_script_actual = jsonData.script;\r",
									"\r",
									"const Registration_response_expected = JSON.parse(pm.collectionVariables.get(\"Script_Registration_email_response\"));\r",
									"const Registration_script_expected = pm.collectionVariables.get(\"Script_Registration_email_script\")\r",
									"\r",
									"pm.test(\"Script -> Registration contains correct entries\", () => {\r",
									"    pm.expect(deepEqual(Registration_response_expected, Registration_response_actual), `Script -> send registration email script contains incorrect response.\r",
									"            Expected => ${JSON.stringify(Registration_response_expected)}   \r",
									"            Actual => ${JSON.stringify(Registration_response_actual)}`).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Script -> Registration contains correct script\", () => {\r",
									"        pm.expect(deepEqual(Registration_script_actual,Registration_script_expected), `Script -> send registration email script contains incorrect script.\r",
									"            Expected => ${JSON.stringify(Registration_script_expected)}   \r",
									"            Actual => ${JSON.stringify(Registration_script_actual)}`).to.be.true;\r",
									"});\r",
									"\r",
									"//deep comparing two objects \r",
									"function deepEqual(object1, object2) {\r",
									"    const keys1 = Object.keys(object1);\r",
									"    const keys2 = Object.keys(object2);\r",
									"\r",
									"    if (keys1.length !== keys2.length) {\r",
									"        return false;\r",
									"    }\r",
									"\r",
									"    for (const key of keys1) {\r",
									"        const val1 = object1[key];\r",
									"        const val2 = object2[key];\r",
									"        const areObjects = isObject(val1) && isObject(val2);\r",
									"        if (\r",
									"            areObjects && !deepEqual(val1, val2) ||\r",
									"            !areObjects && val1 !== val2\r",
									"        ) {\r",
									"            return false;\r",
									"        }\r",
									"    }\r",
									"\r",
									"    return true;\r",
									"}\r",
									"\r",
									"//validate if object is valid\r",
									"function isObject(object) {\r",
									"    return object != null && typeof object === 'object';\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "cookie",
								"value": "{{cookie_Name}} = {{session_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{platformUrl}}/am/json/{{realm}}/scripts/{{Script_Registration_email_id}}",
							"host": [
								"{{platformUrl}}"
							],
							"path": [
								"am",
								"json",
								"{{realm}}",
								"scripts",
								"{{Script_Registration_email_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send MFA Text",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"const jsonData = JSON.parse(responseBody);\r",
									"\r",
									"const Send_MFA_Text_response_actual = jsonData;\r",
									"const Send_MFA_Text_script_actual = jsonData.script;\r",
									"\r",
									"const Send_MFA_Text_response_expected = JSON.parse(pm.collectionVariables.get(\"Script_Send_MFA_text_response\"));\r",
									"const Send_MFA_Text_script_expected = pm.collectionVariables.get(\"Script_Send_MFA_text_script\")\r",
									"\r",
									"pm.test(\"Script -> Send MFA Text script contains correct entries\", () => {\r",
									"    pm.expect(deepEqual(Send_MFA_Text_response_expected, Send_MFA_Text_response_actual), `Script -> send MFA Text script contains incorrect response.\r",
									"            Expected => ${JSON.stringify(Send_MFA_Text_response_expected)}   \r",
									"            Actual => ${JSON.stringify(Send_MFA_Text_response_actual)}`).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Script -> Send MFA Text script contains correct script\", () => {\r",
									"        pm.expect(deepEqual(Send_MFA_Text_script_actual,Send_MFA_Text_script_expected), `Script -> send MFA Text script contains incorrect script.\r",
									"            Expected => ${JSON.stringify(Send_MFA_Text_script_expected)}   \r",
									"            Actual => ${JSON.stringify(Send_MFA_Text_script_actual)}`).to.be.true;\r",
									"});\r",
									"\r",
									"//deep comparing two objects \r",
									"function deepEqual(object1, object2) {\r",
									"    const keys1 = Object.keys(object1);\r",
									"    const keys2 = Object.keys(object2);\r",
									"\r",
									"    if (keys1.length !== keys2.length) {\r",
									"        return false;\r",
									"    }\r",
									"\r",
									"    for (const key of keys1) {\r",
									"        const val1 = object1[key];\r",
									"        const val2 = object2[key];\r",
									"        const areObjects = isObject(val1) && isObject(val2);\r",
									"        if (\r",
									"            areObjects && !deepEqual(val1, val2) ||\r",
									"            !areObjects && val1 !== val2\r",
									"        ) {\r",
									"            return false;\r",
									"        }\r",
									"    }\r",
									"\r",
									"    return true;\r",
									"}\r",
									"\r",
									"//validate if object is valid\r",
									"function isObject(object) {\r",
									"    return object != null && typeof object === 'object';\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "cookie",
								"value": "{{cookie_Name}} = {{session_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{platformUrl}}/am/json/{{realm}}/scripts/{{Script_Send_MFA_text_id}}",
							"host": [
								"{{platformUrl}}"
							],
							"path": [
								"am",
								"json",
								"{{realm}}",
								"scripts",
								"{{Script_Send_MFA_text_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Notify JWT",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"const jsonData = JSON.parse(responseBody);\r",
									"\r",
									"const Create_Notify_response_actual = jsonData;\r",
									"const Create_Notify_script_actual = jsonData.script;\r",
									"\r",
									"const Create_Notify_response_expected = JSON.parse(pm.collectionVariables.get(\"Script_Create_Notify_response\"));\r",
									"const Create_Notify_script_expected = pm.collectionVariables.get(\"Script_Create_Notify_script\")\r",
									"\r",
									"pm.test(\"Script -> create notify script contains correct entries\", () => {\r",
									"    pm.expect(deepEqual(Create_Notify_response_expected, Create_Notify_response_actual), `Script -> create notify script contains incorrect response.\r",
									"            Expected => ${JSON.stringify(Create_Notify_response_expected)}   \r",
									"            Actual => ${JSON.stringify(Create_Notify_response_actual)}`).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Script -> create notify script contains correct script\", () => {\r",
									"        pm.expect(deepEqual(Create_Notify_script_expected,Create_Notify_script_actual), `Script -> create notify script contains incorrect script.\r",
									"            Expected => ${JSON.stringify(Create_Notify_script_expected)}   \r",
									"            Actual => ${JSON.stringify(Create_Notify_script_actual)}`).to.be.true;\r",
									"});\r",
									"\r",
									"//deep comparing two objects \r",
									"function deepEqual(object1, object2) {\r",
									"    const keys1 = Object.keys(object1);\r",
									"    const keys2 = Object.keys(object2);\r",
									"\r",
									"    if (keys1.length !== keys2.length) {\r",
									"        return false;\r",
									"    }\r",
									"\r",
									"    for (const key of keys1) {\r",
									"        const val1 = object1[key];\r",
									"        const val2 = object2[key];\r",
									"        const areObjects = isObject(val1) && isObject(val2);\r",
									"        if (\r",
									"            areObjects && !deepEqual(val1, val2) ||\r",
									"            !areObjects && val1 !== val2\r",
									"        ) {\r",
									"            return false;\r",
									"        }\r",
									"    }\r",
									"\r",
									"    return true;\r",
									"}\r",
									"\r",
									"//validate if object is valid\r",
									"function isObject(object) {\r",
									"    return object != null && typeof object === 'object';\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "cookie",
								"value": "{{cookie_Name}} = {{session_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{platformUrl}}/am/json/{{realm}}/scripts/{{Script_Create_Notify_id}}",
							"host": [
								"{{platformUrl}}"
							],
							"path": [
								"am",
								"json",
								"{{realm}}",
								"scripts",
								"{{Script_Create_Notify_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send Reset Password Email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = JSON.parse(responseBody);\r",
									"\r",
									"const Reset_Password_response_actual = jsonData;\r",
									"const Reset_Password_script_actual = jsonData.script;\r",
									"\r",
									"const Reset_Password_response_expected = JSON.parse(pm.collectionVariables.get(\"Script_Reset_Password_response\"));\r",
									"const Reset_Password_script_expected = pm.collectionVariables.get(\"Script_Reset_Password_script\");\r",
									"\r",
									"pm.test(\"Script -> send password email script contains correct entries\", () => {\r",
									"    pm.expect(deepEqual(Reset_Password_response_expected, Reset_Password_response_actual), `Script -> send password email script contains incorrect response.\r",
									"            Expected => ${JSON.stringify(Reset_Password_response_expected)}   \r",
									"            Actual => ${JSON.stringify(Reset_Password_response_actual)}`).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Script -> send password email script contains correct script\", () => {\r",
									"        pm.expect(deepEqual(Reset_Password_script_actual,Reset_Password_script_expected), `Script -> send password email script contains incorrect script.\r",
									"            Expected => ${JSON.stringify(Reset_Password_script_expected)}   \r",
									"            Actual => ${JSON.stringify(Reset_Password_script_actual)}`).to.be.true;\r",
									"});\r",
									"\r",
									"//deep comparing two objects \r",
									"function deepEqual(object1, object2) {\r",
									"    const keys1 = Object.keys(object1);\r",
									"    const keys2 = Object.keys(object2);\r",
									"\r",
									"    if (keys1.length !== keys2.length) {\r",
									"        return false;\r",
									"    }\r",
									"\r",
									"    for (const key of keys1) {\r",
									"        const val1 = object1[key];\r",
									"        const val2 = object2[key];\r",
									"        const areObjects = isObject(val1) && isObject(val2);\r",
									"        if (\r",
									"            areObjects && !deepEqual(val1, val2) ||\r",
									"            !areObjects && val1 !== val2\r",
									"        ) {\r",
									"            return false;\r",
									"        }\r",
									"    }\r",
									"\r",
									"    return true;\r",
									"}\r",
									"\r",
									"//validate if object is valid\r",
									"function isObject(object) {\r",
									"    return object != null && typeof object === 'object';\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "cookie",
								"value": "{{cookie_Name}} = {{session_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{platformUrl}}/am/json/{{realm}}/scripts/{{Script_Reset_Password_id}}",
							"host": [
								"{{platformUrl}}"
							],
							"path": [
								"am",
								"json",
								"{{realm}}",
								"scripts",
								"{{Script_Reset_Password_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Authentication Tree Decision",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = JSON.parse(responseBody);\r",
									"\r",
									"const Auth_Tree_response_actual = jsonData;\r",
									"const Auth_Tree_script_actual = jsonData.script;\r",
									"\r",
									"const Auth_Tree_response_expected = JSON.parse(pm.collectionVariables.get(\"Script_Auth_Tree_response\"));\r",
									"const Auth_Tree_script_expected = pm.collectionVariables.get(\"Script_Auth_Tree_script\");\r",
									"\r",
									"pm.test(\"Script -> Auth Tree decision script contains correct entries\", () => {\r",
									"    pm.expect(deepEqual(Auth_Tree_response_actual, Auth_Tree_response_expected), `Script -> Auth Tree decision script contains incorrect response.\r",
									"            Expected => ${JSON.stringify(Auth_Tree_response_expected)}   \r",
									"            Actual => ${JSON.stringify(Auth_Tree_response_actual)}`).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Script -> Auth Tree decision script contains correct script\", () => {\r",
									"        pm.expect(deepEqual(Auth_Tree_script_actual,Auth_Tree_script_expected), `Script -> Auth Tree decision script contains incorrect script.\r",
									"            Expected => ${JSON.stringify(Auth_Tree_script_expected)}   \r",
									"            Actual => ${JSON.stringify(Auth_Tree_script_actual)}`).to.be.true;\r",
									"});\r",
									"\r",
									"//deep comparing two objects \r",
									"function deepEqual(object1, object2) {\r",
									"    const keys1 = Object.keys(object1);\r",
									"    const keys2 = Object.keys(object2);\r",
									"\r",
									"    if (keys1.length !== keys2.length) {\r",
									"        return false;\r",
									"    }\r",
									"\r",
									"    for (const key of keys1) {\r",
									"        const val1 = object1[key];\r",
									"        const val2 = object2[key];\r",
									"        const areObjects = isObject(val1) && isObject(val2);\r",
									"        if (\r",
									"            areObjects && !deepEqual(val1, val2) ||\r",
									"            !areObjects && val1 !== val2\r",
									"        ) {\r",
									"            return false;\r",
									"        }\r",
									"    }\r",
									"\r",
									"    return true;\r",
									"}\r",
									"\r",
									"//validate if object is valid\r",
									"function isObject(object) {\r",
									"    return object != null && typeof object === 'object';\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "cookie",
								"value": "{{cookie_Name}} = {{session_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{platformUrl}}/am/json/{{realm}}/scripts/{{Script_Auth_Tree_id}}",
							"host": [
								"{{platformUrl}}"
							],
							"path": [
								"am",
								"json",
								"{{realm}}",
								"scripts",
								"{{Script_Auth_Tree_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User Roles",
			"item": [
				{
					"name": "Lender",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Registration -> page node1 contains correct subnodes\", () => {\r",
									"\r",
									"    const UserRole_Lender_response_actual =JSON.parse(responseBody);\r",
									"    const UserRole_Lender_response_expected = JSON.parse(pm.collectionVariables.get(\"UserRole_Lender_response\"));\r",
									"\r",
									" pm.expect(deepEqual(UserRole_Lender_response_actual, UserRole_Lender_response_expected), `User Role -> Lender response did not match  \r",
									"            Expected => ${JSON.stringify(UserRole_Lender_response_expected)}   \r",
									"            Actual => ${JSON.stringify(UserRole_Lender_response_actual)}`).to.be.true;\r",
									"});\r",
									"\r",
									"//deep comparing two objects \r",
									"function deepEqual(object1, object2) {\r",
									"    const keys1 = Object.keys(object1);\r",
									"    const keys2 = Object.keys(object2);\r",
									"\r",
									"    if (keys1.length !== keys2.length) {\r",
									"        return false;\r",
									"    }\r",
									"\r",
									"    for (const key of keys1) {\r",
									"        const val1 = object1[key];\r",
									"        const val2 = object2[key];\r",
									"        const areObjects = isObject(val1) && isObject(val2);\r",
									"        if (\r",
									"            areObjects && !deepEqual(val1, val2) ||\r",
									"            !areObjects && val1 !== val2\r",
									"        ) {\r",
									"            return false;\r",
									"        }\r",
									"    }\r",
									"\r",
									"    return true;\r",
									"}\r",
									"\r",
									"//validate if object is valid\r",
									"function isObject(object) {\r",
									"    return object != null && typeof object === 'object';\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "cookie",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{platformUrl}}/openidm/managed/alpha_role/{{UserRole_Lender_id}}",
							"host": [
								"{{platformUrl}}"
							],
							"path": [
								"openidm",
								"managed",
								"alpha_role",
								"{{UserRole_Lender_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Internal Roles",
			"item": [
				{
					"name": "CH Support",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"const jsonData = JSON.parse(responseBody);\r",
									"\r",
									"const CHSupport_name_actual = jsonData.name;\r",
									"const CHSupport_description_actual = jsonData.description;\r",
									"const CHSupport_temporalConstraints_actual = jsonData.temporalConstraints;\r",
									"var CHSupport_condition_actual;\r",
									"\r",
									"if (jsonData.condition) { CHSupport_condition_actual = jsonData.condition }\r",
									"else { CHSupport_condition_actual = null }\r",
									"\r",
									"const CHSupport_name_expected = pm.collectionVariables.get(\"InternalRole_CHSupport_name\");\r",
									"const CHSupport_description_expected = pm.collectionVariables.get(\"InternalRole_CHSupport_Description\");\r",
									"const CHSupport_temporalConstraints_expected = JSON.parse(\"[\" + pm.collectionVariables.get(\"InternalRole_CHSupport_temporalConstraints\") + \"]\");\r",
									"const CHSupport_condition_expetced = pm.collectionVariables.get(\"InternalRole_CHSupport_condition\");\r",
									"\r",
									"\r",
									"pm.test(\"Internal Roles -> CH Support contains correct name\", () => {\r",
									"    pm.expect(CHSupport_name_expected, \"CH support user name is incorrect\").to.be.eql(CHSupport_name_actual);\r",
									"});\r",
									"\r",
									"pm.test(\"Internal Roles -> CH Support contains correct description\", () => {\r",
									"    pm.expect(CHSupport_description_expected, \"CH Support description is incorrect\").to.be.eql(CHSupport_description_actual)\r",
									"});\r",
									"\r",
									"pm.test(\"Internal Roles -> CH Support contains correct temporal constraints\", () => {\r",
									"    if (CHSupport_temporalConstraints_actual.length > 0) {\r",
									"        for (index = 0; index < CHSupport_temporalConstraints_actual.length; index++) {\r",
									"            pm.expect(deepEqual(CHSupport_temporalConstraints_expected[index], CHSupport_temporalConstraints_actual[index]), `CH Support -> Temporal contraints are incorrect\r",
									"            Expected => ${JSON.stringify(CHSupport_temporalConstraints_expected)}   \r",
									"            Actual => ${JSON.stringify(CHSupport_temporalConstraints_actual)}`).to.be.true;\r",
									"        }\r",
									"    }\r",
									"    else\r",
									"        pm.expect(CHSupport_temporalConstraints_expected, `CH Support -> Temporal contraints are incorrect\r",
									"            Expected => ${JSON.stringify(CHSupport_temporalConstraints_expected)}   \r",
									"            Actual => ${JSON.stringify(CHSupport_temporalConstraints_actual)}`).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Internal Roles -> CH Support contains correct conditions if applied\", () => {\r",
									"\r",
									"    if (CHSupport_condition_actual) {\r",
									"        pm.expect(deepEqual(CHSupport_condition_expetced, CHSupport_condition_actual), `CH support -> condition are incorrect\r",
									"            Expected => ${JSON.stringify(CHSupport_condition_expetced)}   \r",
									"            Actual => ${JSON.stringify(CHSupport_condition_actual)}`).to.be.true;\r",
									"    }\r",
									"    else\r",
									"        pm.expect(CHSupport_condition_expetced, \"Incorrect entries for the condition for role -CH Support\").to.be.empty;\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Internal Roles -> CH Support contains correct privileges\", () => {\r",
									"    const CHSupport_privileges_count_actual = jsonData.privileges.length;\r",
									"    const CHSupport_privileges_actual = jsonData.privileges;\r",
									"\r",
									"    const CHSupport_privileges_count_expected = parseInt(pm.collectionVariables.get(\"InternalRole_CHSupport_privileges_count\"));\r",
									"    const CHSupport_privileges_expected = JSON.parse(\"[\" + pm.collectionVariables.get(\"InternalRole_CHSupport_privileges\") + \"]\");\r",
									"\r",
									"    pm.expect(CHSupport_privileges_count_expected, 'Incorrect number of privileges set for the role').to.be.eql(CHSupport_privileges_count_actual);\r",
									"\r",
									"    for (index = 0; index < CHSupport_privileges_actual.length; index++) {\r",
									"        pm.expect(deepEqual(CHSupport_privileges_expected[index], CHSupport_privileges_actual[index]), `CH Support Privileges did not match \r",
									"            Expected => ${JSON.stringify(CHSupport_privileges_expected[index])}   \r",
									"            Actual => ${JSON.stringify(CHSupport_privileges_actual[index])}`).to.be.true;\r",
									"    }\r",
									"});\r",
									"\r",
									"//deep comparing two objects \r",
									"function deepEqual(object1, object2) {\r",
									"    const keys1 = Object.keys(object1);\r",
									"    const keys2 = Object.keys(object2);\r",
									"\r",
									"    if (keys1.length !== keys2.length) {\r",
									"        return false;\r",
									"    }\r",
									"\r",
									"    for (const key of keys1) {\r",
									"        const val1 = object1[key];\r",
									"        const val2 = object2[key];\r",
									"        const areObjects = isObject(val1) && isObject(val2);\r",
									"        if (\r",
									"            areObjects && !deepEqual(val1, val2) ||\r",
									"            !areObjects && val1 !== val2\r",
									"        ) {\r",
									"            return false;\r",
									"        }\r",
									"    }\r",
									"\r",
									"    return true;\r",
									"}\r",
									"\r",
									"//validate if object is valid\r",
									"function isObject(object) {\r",
									"    return object != null && typeof object === 'object';\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "cookie",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{platformUrl}}/openidm/internal/role/{{InternalRole_CHSupport_id}}",
							"host": [
								"{{platformUrl}}"
							],
							"path": [
								"openidm",
								"internal",
								"role",
								"{{InternalRole_CHSupport_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Terms and Conditions",
			"item": [
				{
					"name": "T&C",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"const jsonData = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Tearms and condition contains correct entries\", () => {\r",
									"    const TermsAndCondition_response_actual = jsonData;\r",
									"    const TermsAndCondition_response_expected = JSON.parse(pm.collectionVariables.get(\"TermsAndCondition_response\"));\r",
									"\r",
									"    pm.expect(deepEqual(TermsAndCondition_response_actual, TermsAndCondition_response_expected), `Terms and conditions are incorrect. please see actual and expected values. \r",
									"            Expected => ${JSON.stringify(TermsAndCondition_response_expected)}   \r",
									"            Actual => ${JSON.stringify(TermsAndCondition_response_actual)}`).to.be.true;\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Tearms and condition -> correct version set to active\", () => {\r",
									"    const TermsAndCondition_activeVersion_actual = jsonData.active;\r",
									"    const TermsAndCondition_activeVersion_expected = pm.collectionVariables.get(\"TermsAndCondition_activeVersion\");\r",
									"\r",
									"    pm.expect(TermsAndCondition_activeVersion_expected, \"Tearms and condition -> incorrect version set to Ative\").to.be.eql(TermsAndCondition_activeVersion_actual);\r",
									"});\r",
									"\r",
									"\r",
									"//deep comparing two objects \r",
									"function deepEqual(object1, object2) {\r",
									"    const keys1 = Object.keys(object1);\r",
									"    const keys2 = Object.keys(object2);\r",
									"\r",
									"    if (keys1.length !== keys2.length) {\r",
									"        return false;\r",
									"    }\r",
									"\r",
									"    for (const key of keys1) {\r",
									"        const val1 = object1[key];\r",
									"        const val2 = object2[key];\r",
									"        const areObjects = isObject(val1) && isObject(val2);\r",
									"        if (\r",
									"            areObjects && !deepEqual(val1, val2) ||\r",
									"            !areObjects && val1 !== val2\r",
									"        ) {\r",
									"            return false;\r",
									"        }\r",
									"    }\r",
									"\r",
									"    return true;\r",
									"}\r",
									"\r",
									"//validate if object is valid\r",
									"function isObject(object) {\r",
									"    return object != null && typeof object === 'object';\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "cookie",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{platformUrl}}/openidm/config/selfservice.terms",
							"host": [
								"{{platformUrl}}"
							],
							"path": [
								"openidm",
								"config",
								"selfservice.terms"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Connectors",
			"item": [
				{
					"name": "MongoDB - User Details Sync",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = JSON.parse(responseBody);\r",
									"\r",
									"const id_actual = jsonData._id;\r",
									"const configurationProperties_actual = jsonData.configurationProperties;\r",
									"const connectorRef_actual = jsonData.connectorRef;\r",
									"const enabled_actual =  JSON.stringify(jsonData.enabled);\r",
									"const objectTypes_actual = jsonData.objectTypes;\r",
									"const operationTimeout_actual = jsonData.operationTimeout;\r",
									"const poolConfigOption_actual = jsonData.poolConfigOption;\r",
									"const resultsHandlerConfig_actual = jsonData.resultsHandlerConfig;\r",
									"\r",
									"const id_expected = pm.collectionVariables.get(\"Connector_Mongo_user_sync_id\");\r",
									"const configurationProperties_expected = JSON.parse(pm.collectionVariables.get(\"Connector_Mongo_user_sync_configurationProperties\"));\r",
									"const connectorRef_expected = JSON.parse(pm.collectionVariables.get(\"Connector_Mongo_user_sync_connectorRef\"));\r",
									"const enabled_expected = pm.collectionVariables.get(\"Connector_Mongo_user_sync_enabled\");\r",
									"const objectTypes_expected = JSON.parse(pm.collectionVariables.get(\"Connector_Mongo_user_sync_objectTypes\"));\r",
									"const operationTimeout_expected = JSON.parse(pm.collectionVariables.get(\"Connector_Mongo_user_sync_operationTimeout\"));\r",
									"const poolConfigOption_expected =JSON.parse(pm.collectionVariables.get(\"Connector_Mongo_user_sync_poolConfigOption\"));\r",
									"const resultsHandlerConfig_expected = JSON.parse(pm.collectionVariables.get(\"Connector_Mongo_user_sync_resultsHandlerConfig\"));\r",
									"\r",
									"pm.test(\"Connector - MongoDB - user sync contains correct `id` \", () => {\r",
									"    pm.expect(id_expected, `MongoDB user sync connector id did not match`).to.be.eql(id_actual);\r",
									"});\r",
									"\r",
									"pm.test(\"Connector - MongoDB - user sync contains correct `configuration properties` \", () => {\r",
									"    pm.expect(deepEqual(configurationProperties_actual, configurationProperties_expected), `MongoDB user sync connector incorrect configuration properties \r",
									"            Expected => ${JSON.stringify(configurationProperties_expected)}   \r",
									"            Actual => ${JSON.stringify(configurationProperties_actual)}`).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Connector - MongoDB - user sync contains correct `connector reference` \", () => {\r",
									"    pm.expect(deepEqual(connectorRef_actual, connectorRef_expected), `MongoDB user sync connector contains incorrect connector reference\r",
									"            Expected => ${JSON.stringify(connectorRef_expected)}   \r",
									"            Actual => ${JSON.stringify(connectorRef_actual)}`).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Connector - MongoDB - user sync `enable` value set correct \", () => {\r",
									"    pm.expect(enabled_expected, `MongoDB user sync connector contains incorrect values for 'enable'\r",
									"            Expected => ${JSON.stringify(enabled_expected)}   \r",
									"            Actual => ${JSON.stringify(enabled_actual)}`).to.be.eql(enabled_actual);\r",
									"});\r",
									"\r",
									"pm.test(\"Connector - MongoDB - user sync contains correct `object types` \", () => {\r",
									"    pm.expect(deepEqual(objectTypes_expected, objectTypes_actual), `MongoDB user sync connector contains incorrect object types\r",
									"            Expected => ${JSON.stringify(objectTypes_expected)}   \r",
									"            Actual => ${JSON.stringify(objectTypes_actual)}`).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Connector - MongoDB - user sync contains correct `operation timeout` \", () => {\r",
									"    pm.expect(deepEqual(operationTimeout_actual, operationTimeout_expected), `MongoDB user sync connector contains incorrect operation timeout\r",
									"            Expected => ${JSON.stringify(operationTimeout_expected)}   \r",
									"            Actual => ${JSON.stringify(operationTimeout_actual)}`).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Connector - MongoDB - user sync contains correct `pool configuration option` \", () => {\r",
									"    pm.expect(deepEqual(poolConfigOption_actual, poolConfigOption_expected), `MongoDB user sync connector contains incorrect pool configuration option\r",
									"            Expected => ${JSON.stringify(poolConfigOption_expected)}   \r",
									"            Actual => ${JSON.stringify(poolConfigOption_actual)}`).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Connector - MongoDB - user sync contains correct `results handle configuration` \", () => {\r",
									"    pm.expect(deepEqual(connectorRef_actual, connectorRef_expected), `MongoDB user sync connector contains incorrect connector reference\r",
									"            Expected => ${JSON.stringify(connectorRef_expected)}   \r",
									"            Actual => ${JSON.stringify(connectorRef_actual)}`).to.be.true;\r",
									"});\r",
									"\r",
									"//deep comparing two objects \r",
									"function deepEqual(object1, object2) {\r",
									"    const keys1 = Object.keys(object1);\r",
									"    const keys2 = Object.keys(object2);\r",
									"\r",
									"    if (keys1.length !== keys2.length) {\r",
									"        return false;\r",
									"    }\r",
									"\r",
									"    for (const key of keys1) {\r",
									"        const val1 = object1[key];\r",
									"        const val2 = object2[key];\r",
									"        const areObjects = isObject(val1) && isObject(val2);\r",
									"        if (\r",
									"            areObjects && !deepEqual(val1, val2) ||\r",
									"            !areObjects && val1 !== val2\r",
									"        ) {\r",
									"            return false;\r",
									"        }\r",
									"    }\r",
									"\r",
									"    return true;\r",
									"}\r",
									"\r",
									"//validate if object is valid\r",
									"function isObject(object) {\r",
									"    return object != null && typeof object === 'object';\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "cookie",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{platformUrl}}/openidm/config/provisioner.openicf/{{Connector_Mongo_user_sync_name}}",
							"host": [
								"{{platformUrl}}"
							],
							"path": [
								"openidm",
								"config",
								"provisioner.openicf",
								"{{Connector_Mongo_user_sync_name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "MongoDB - Company sync",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = JSON.parse(responseBody);\r",
									"\r",
									"const id_actual = jsonData._id;\r",
									"const configurationProperties_actual = jsonData.configurationProperties;\r",
									"const connectorRef_actual = jsonData.connectorRef;\r",
									"const enabled_actual =  JSON.stringify(jsonData.enabled);\r",
									"const objectTypes_actual = jsonData.objectTypes;\r",
									"const operationTimeout_actual = jsonData.operationTimeout;\r",
									"const poolConfigOption_actual = jsonData.poolConfigOption;\r",
									"const resultsHandlerConfig_actual = jsonData.resultsHandlerConfig;\r",
									"\r",
									"const id_expected = pm.collectionVariables.get(\"Connector_Mongo_company_sync_id\");\r",
									"const configurationProperties_expected = JSON.parse(pm.collectionVariables.get(\"Connector_Mongo_company_sync_configurationProperties\"));\r",
									"const connectorRef_expected = JSON.parse(pm.collectionVariables.get(\"Connector_Mongo_company_sync_connectorRef\"));\r",
									"const enabled_expected = pm.collectionVariables.get(\"Connector_Mongo_company_sync_enabled\");\r",
									"const objectTypes_expected = JSON.parse(pm.collectionVariables.get(\"Connector_Mongo_company_sync_objectTypes\"));\r",
									"const operationTimeout_expected = JSON.parse(pm.collectionVariables.get(\"Connector_Mongo_company_sync_operationTimeout\"));\r",
									"const poolConfigOption_expected =JSON.parse(pm.collectionVariables.get(\"Connector_Mongo_company_sync_poolConfigOption\"));\r",
									"const resultsHandlerConfig_expected = JSON.parse(pm.collectionVariables.get(\"Connector_Mongo_company_sync_resultsHandlerConfig\"));\r",
									"\r",
									"pm.test(\"Connector - MongoDB - company sync contains correct `id` \", () => {\r",
									"    pm.expect(id_expected, `MongoDB company sync connector id did not match`).to.be.eql(id_actual);\r",
									"});\r",
									"\r",
									"pm.test(\"Connector - MongoDB - company sync contains correct `configuration properties` \", () => {\r",
									"    pm.expect(deepEqual(configurationProperties_actual, configurationProperties_expected), `MongoDB company sync connector incorrect configuration properties \r",
									"            Expected => ${JSON.stringify(configurationProperties_expected)}   \r",
									"            Actual => ${JSON.stringify(configurationProperties_actual)}`).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Connector - MongoDB - company sync contains correct `connector reference` \", () => {\r",
									"    pm.expect(deepEqual(connectorRef_actual, connectorRef_expected), `MongoDB company sync connector contains incorrect connector reference\r",
									"            Expected => ${JSON.stringify(connectorRef_expected)}   \r",
									"            Actual => ${JSON.stringify(connectorRef_actual)}`).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Connector - MongoDB - company sync `enable` value set correct \", () => {\r",
									"    pm.expect(enabled_expected, `MongoDB company sync connector contains incorrect values for 'enable'\r",
									"            Expected => ${JSON.stringify(enabled_expected)}   \r",
									"            Actual => ${JSON.stringify(enabled_actual)}`).to.be.eql(enabled_actual);\r",
									"});\r",
									"\r",
									"pm.test(\"Connector - MongoDB - company sync contains correct `object types` \", () => {\r",
									"    pm.expect(deepEqual(objectTypes_expected, objectTypes_actual), `MongoDB company sync connector contains incorrect object types\r",
									"            Expected => ${JSON.stringify(objectTypes_expected)}   \r",
									"            Actual => ${JSON.stringify(objectTypes_actual)}`).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Connector - MongoDB - company sync contains correct `operation timeout` \", () => {\r",
									"    pm.expect(deepEqual(operationTimeout_actual, operationTimeout_expected), `MongoDB company sync connector contains incorrect operation timeout\r",
									"            Expected => ${JSON.stringify(operationTimeout_expected)}   \r",
									"            Actual => ${JSON.stringify(operationTimeout_actual)}`).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Connector - MongoDB - company sync contains correct `pool configuration option` \", () => {\r",
									"    pm.expect(deepEqual(poolConfigOption_actual, poolConfigOption_expected), `MongoDB company sync connector contains incorrect pool configuration option\r",
									"            Expected => ${JSON.stringify(poolConfigOption_expected)}   \r",
									"            Actual => ${JSON.stringify(poolConfigOption_actual)}`).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Connector - MongoDB - company sync contains correct `results handle configuration` \", () => {\r",
									"    pm.expect(deepEqual(connectorRef_actual, connectorRef_expected), `MongoDB company sync connector contains incorrect connector reference\r",
									"            Expected => ${JSON.stringify(connectorRef_expected)}   \r",
									"            Actual => ${JSON.stringify(connectorRef_actual)}`).to.be.true;\r",
									"});\r",
									"\r",
									"//deep comparing two objects \r",
									"function deepEqual(object1, object2) {\r",
									"    const keys1 = Object.keys(object1);\r",
									"    const keys2 = Object.keys(object2);\r",
									"\r",
									"    if (keys1.length !== keys2.length) {\r",
									"        return false;\r",
									"    }\r",
									"\r",
									"    for (const key of keys1) {\r",
									"        const val1 = object1[key];\r",
									"        const val2 = object2[key];\r",
									"        const areObjects = isObject(val1) && isObject(val2);\r",
									"        if (\r",
									"            areObjects && !deepEqual(val1, val2) ||\r",
									"            !areObjects && val1 !== val2\r",
									"        ) {\r",
									"            return false;\r",
									"        }\r",
									"    }\r",
									"\r",
									"    return true;\r",
									"}\r",
									"\r",
									"//validate if object is valid\r",
									"function isObject(object) {\r",
									"    return object != null && typeof object === 'object';\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "cookie",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{platformUrl}}/openidm/config/provisioner.openicf/{{Connector_Mongo_company_sync_name}}",
							"host": [
								"{{platformUrl}}"
							],
							"path": [
								"openidm",
								"config",
								"provisioner.openicf",
								"{{Connector_Mongo_company_sync_name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "MongoDB - API Keys Sync",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//this will be done once its connector is ready"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "cookie",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": ""
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "mapped_object_count",
			"value": "7"
		},
		{
			"key": "companyObj_index",
			"value": "6"
		},
		{
			"key": "companyObj_required_attribute",
			"value": "\"name\",\"number\""
		},
		{
			"key": "companyObj_iconClass",
			"value": "fa fa-database"
		},
		{
			"key": "companyObj_name",
			"value": "Company"
		},
		{
			"key": "companyObj_schema_title",
			"value": "Company"
		},
		{
			"key": "companyObj_schema_description",
			"value": "A company"
		},
		{
			"key": "companyObj_schema_icon",
			"value": "fa-building"
		},
		{
			"key": "companyObj_schema_order",
			"value": "\"name\",\"number\",\"type\",\"status\",\"authCode\",\"authorisedUsers\""
		},
		{
			"key": "companyObj_type",
			"value": "Managed Object"
		},
		{
			"key": "companyObj_property_name_deleteQueryConfig",
			"value": "false"
		},
		{
			"key": "companyObj_property_name_description",
			"value": "The name of the company"
		},
		{
			"key": "companyObj_property_name_isVirtual",
			"value": "false"
		},
		{
			"key": "companyObj_property_name_searchable",
			"value": "true"
		},
		{
			"key": "companyObj_property_name_title",
			"value": "Company Name"
		},
		{
			"key": "companyObj_property_name_type",
			"value": "string"
		},
		{
			"key": "companyObj_property_name_userEditable",
			"value": "true"
		},
		{
			"key": "companyObj_property_name_viewable",
			"value": "true"
		},
		{
			"key": "companyObj_property_number_deleteQueryConfig",
			"value": "false"
		},
		{
			"key": "companyObj_property_number_description",
			"value": "The unique number allocated to a company on incorporation"
		},
		{
			"key": "companyObj_property_number_isVirtual",
			"value": "false"
		},
		{
			"key": "companyObj_property_number_searchable",
			"value": "true"
		},
		{
			"key": "companyObj_property_number_title",
			"value": "Company Number"
		},
		{
			"key": "companyObj_property_number_type",
			"value": "string"
		},
		{
			"key": "companyObj_property_number_userEditable",
			"value": "true"
		},
		{
			"key": "companyObj_property_number_viewable",
			"value": "true"
		},
		{
			"key": "companyObj_property_status_searchable",
			"value": "true"
		},
		{
			"key": "companyObj_property_status_title",
			"value": "Status"
		},
		{
			"key": "companyObj_property_status_type",
			"value": "string"
		},
		{
			"key": "companyObj_property_status_userEditable",
			"value": "true"
		},
		{
			"key": "companyObj_property_status_viewable",
			"value": "true"
		},
		{
			"key": "companyObj_property_type_searchable",
			"value": "true"
		},
		{
			"key": "companyObj_property_type_title",
			"value": "Type"
		},
		{
			"key": "companyObj_property_type_type",
			"value": "string"
		},
		{
			"key": "companyObj_property_type_userEditable",
			"value": "true"
		},
		{
			"key": "companyObj_property_type_viewable",
			"value": "true"
		},
		{
			"key": "companyObj_property_authorisedUsers_deleteQueryConfig",
			"value": "false"
		},
		{
			"key": "companyObj_property_authorisedUsers_description",
			"value": "Authorised Users are Users that are associated with a Company"
		},
		{
			"key": "companyObj_property_authorisedUsers_isVirtual",
			"value": "false"
		},
		{
			"key": "companyObj_property_authorisedUsers_minLength",
			"value": "null"
		},
		{
			"key": "companyObj_property_authorisedUsers_referencedObjectFields",
			"value": "null"
		},
		{
			"key": "companyObj_property_authorisedUsers_referencedRelationshipFields",
			"value": "null"
		},
		{
			"key": "companyObj_property_authorisedUsers_requiredByParent",
			"value": "false"
		},
		{
			"key": "companyObj_property_authorisedUsers_returnByDefault",
			"value": "false"
		},
		{
			"key": "companyObj_property_authorisedUsers_searchable",
			"value": "false"
		},
		{
			"key": "companyObj_property_authorisedUsers_title",
			"value": "Has Authorised User"
		},
		{
			"key": "companyObj_property_authorisedUsers_type",
			"value": "array"
		},
		{
			"key": "companyObj_property_authorisedUsers_userEditable",
			"value": "false"
		},
		{
			"key": "companyObj_property_authorisedUsers_viewable",
			"value": "true"
		},
		{
			"key": "companyObj_property_authorisedUsers_policies",
			"value": ""
		},
		{
			"key": "companyObj_property_authorisedUsers_items_notifySelf",
			"value": "false"
		},
		{
			"key": "companyObj_property_authorisedUsers_items_reversePropertyName",
			"value": "isAuthorisedUserOf"
		},
		{
			"key": "companyObj_property_authorisedUsers_items_reverseRelationship",
			"value": "true"
		},
		{
			"key": "companyObj_property_authorisedUsers_items_type",
			"value": "relationship"
		},
		{
			"key": "companyObj_property_authorisedUsers_items_validate",
			"value": "false"
		},
		{
			"key": "companyObj_property_authorisedUsers_items_resourceCollection_length",
			"value": "1"
		},
		{
			"key": "companyObj_property_authorisedUsers_items_resourceCollection_label",
			"value": "Alpha_user"
		},
		{
			"key": "companyObj_property_authorisedUsers_items_resourceCollection_notify",
			"value": "false"
		},
		{
			"key": "companyObj_property_authorisedUsers_items_resourceCollection_path",
			"value": "managed/alpha_user"
		},
		{
			"key": "companyObj_property_authorisedUsers_items_resourceCollection_query_fields",
			"value": "\"_id\""
		},
		{
			"key": "companyObj_property_authorisedUsers_items_resourceCollection_query_queryFilter",
			"value": "true"
		},
		{
			"key": "companyObj_property_authorisedUsers_items_resourceCollection_query_sortKeys",
			"value": ""
		},
		{
			"key": "companyObj_property_authorisedUsers_items_properties_ref_type",
			"value": "string"
		},
		{
			"key": "companyObj_property_authorisedUsers_items_properties_refProperties_Properties_id_PropName",
			"value": "_id"
		},
		{
			"key": "companyObj_property_authorisedUsers_items_properties_refProperties_Properties_id_required",
			"value": "false"
		},
		{
			"key": "companyObj_property_authorisedUsers_items_properties_refProperties_Properties_id_type",
			"value": "string"
		},
		{
			"key": "companyObj_property_authorisedUsers_items_properties_refProperties_Properties_permissionAdmin_label",
			"value": "Administer the Company"
		},
		{
			"key": "companyObj_property_authorisedUsers_items_properties_refProperties_Properties_permissionAdmin_propName",
			"value": "permissionAdmin"
		},
		{
			"key": "companyObj_property_authorisedUsers_items_properties_refProperties_Properties_permissionAdmin_required",
			"value": "false"
		},
		{
			"key": "companyObj_property_authorisedUsers_items_properties_refProperties_Properties_permissionAdmin_type",
			"value": "string"
		},
		{
			"key": "companyObj_property_authorisedUsers_items_properties_refProperties_Properties_permissionFiling_label",
			"value": "File Financial Statments"
		},
		{
			"key": "companyObj_property_authorisedUsers_items_properties_refProperties_Properties_permissionFiling_propName",
			"value": "permissionFiling"
		},
		{
			"key": "companyObj_property_authorisedUsers_items_properties_refProperties_Properties_permissionFiling_required",
			"value": "false"
		},
		{
			"key": "companyObj_property_authorisedUsers_items_properties_refProperties_Properties_permissionFiling_type",
			"value": "string"
		},
		{
			"key": "companyObj_property_authorisedUsers_items_properties_refProperties_Properties_permissionUpdate_label",
			"value": "Update company details"
		},
		{
			"key": "companyObj_property_authorisedUsers_items_properties_refProperties_Properties_permissionUpdate_propName",
			"value": "permissionUpdate"
		},
		{
			"key": "companyObj_property_authorisedUsers_items_properties_refProperties_Properties_permissionUpdate_required",
			"value": "false"
		},
		{
			"key": "companyObj_property_authorisedUsers_items_properties_refProperties_Properties_permissionUpdate_type",
			"value": "string"
		},
		{
			"key": "companyObj_property_authorisedUsers_items_properties_refProperties_type",
			"value": "object"
		},
		{
			"key": "alpha_user_Obj_index",
			"value": "2"
		},
		{
			"key": "alpha_user_Obj_name",
			"value": "alpha_user"
		},
		{
			"key": "alpha_user_Obj_type",
			"value": "Managed Object"
		},
		{
			"key": "alpha_user_Obj_meta_resourceCollection",
			"value": "managed/alpha_usermeta"
		},
		{
			"key": "alpha_user_Obj_meta_trackedProperties",
			"value": "\"createDate\",\"lastChanged\""
		},
		{
			"key": "alpha_user_Obj_notifications",
			"value": ""
		},
		{
			"key": "alpha_user_Obj_notifications_length",
			"value": "0"
		},
		{
			"key": "alpha_user_Obj_onCreate_source",
			"value": "require('onCreateUser').setDefaultFields(object);"
		},
		{
			"key": "alpha_user_Obj_onCreate_type",
			"value": "text/javascript"
		},
		{
			"key": "alpha_user_Obj_onUpdate_source",
			"value": "require('onUpdateUser').preserveLastSync(object, oldObject, request);"
		},
		{
			"key": "alpha_user_Obj_onUpdate_type",
			"value": "text/javascript"
		},
		{
			"key": "alpha_user_Obj_schema_description",
			"value": ""
		},
		{
			"key": "alpha_user_Obj_schema_title",
			"value": "Alpha realm - User"
		},
		{
			"key": "alpha_user_Obj_schema_type",
			"value": "object"
		},
		{
			"key": "alpha_user_Obj_schema_order",
			"value": "\"_id\",\"userName\",\"password\",\"givenName\",\"cn\",\"sn\",\"mail\",\"description\",\"accountStatus\",\"telephoneNumber\",\"postalAddress\",\"city\",\"postalCode\",\"country\",\"stateProvince\",\"roles\",\"manager\",\"authzRoles\",\"reports\",\"effectiveRoles\",\"effectiveAssignments\",\"lastSync\",\"kbaInfo\",\"preferences\",\"consentedMappings\",\"frIndexedString1\",\"frIndexedString2\",\"frIndexedString3\",\"frIndexedString4\",\"frIndexedString5\",\"frUnindexedString1\",\"frUnindexedString2\",\"frUnindexedString3\",\"frUnindexedString4\",\"frUnindexedString5\",\"frIndexedMultivalued1\",\"frIndexedMultivalued2\",\"frIndexedMultivalued3\",\"frIndexedMultivalued4\",\"frIndexedMultivalued5\",\"frUnindexedMultivalued1\",\"frUnindexedMultivalued2\",\"frUnindexedMultivalued3\",\"frUnindexedMultivalued4\",\"frUnindexedMultivalued5\",\"frIndexedDate1\",\"frIndexedDate2\",\"frIndexedDate3\",\"frIndexedDate4\",\"frIndexedDate5\",\"frUnindexedDate1\",\"frUnindexedDate2\",\"frUnindexedDate3\",\"frUnindexedDate4\",\"frUnindexedDate5\",\"frIndexedInteger1\",\"frIndexedInteger2\",\"frIndexedInteger3\",\"frIndexedInteger4\",\"frIndexedInteger5\",\"frUnindexedInteger1\",\"frUnindexedInteger2\",\"frUnindexedInteger3\",\"frUnindexedInteger4\",\"frUnindexedInteger5\",\"aliasList\",\"isAuthorisedUserOf\""
		},
		{
			"key": "alpha_user_Obj_schema_property_id_deleteQueryConfig",
			"value": "false"
		},
		{
			"key": "alpha_user_Obj_schema_properties_description",
			"value": "User ID"
		},
		{
			"key": "alpha_user_Obj_schema_property_id_isPersonal",
			"value": "false"
		},
		{
			"key": "alpha_user_Obj_schema_property_id_isVirtual",
			"value": "false"
		},
		{
			"key": "alpha_user_Obj_schema_property_id_policies",
			"value": "{\"params\":{\"forbiddenChars\":[\"/\"]},\"policyId\":\"cannot-contain-characters\"}"
		},
		{
			"key": "alpha_user_Obj_schema_property_id_searchable",
			"value": "false"
		},
		{
			"key": "alpha_user_Obj_schema_property_id_title",
			"value": ""
		},
		{
			"key": "alpha_user_Obj_schema_property_id_type",
			"value": "string"
		},
		{
			"key": "alpha_user_Obj_schema_property_id_usageDescription",
			"value": ""
		},
		{
			"key": "alpha_user_Obj_schema_property_id_userEditable",
			"value": "false"
		},
		{
			"key": "alpha_user_Obj_schema_property_id_viewable",
			"value": "false"
		},
		{
			"key": "alpha_user_Obj_schema_property_accountStatus_deleteQueryConfig",
			"value": "false"
		},
		{
			"key": "alpha_user_Obj_schema_property_accountStatus_description",
			"value": "Status"
		},
		{
			"key": "alpha_user_Obj_schema_property_accountStatus_isPersonal",
			"value": "false"
		},
		{
			"key": "alpha_user_Obj_schema_property_accountStatus_searchable",
			"value": "true"
		},
		{
			"key": "alpha_user_Obj_schema_property_accountStatus_title",
			"value": "Status"
		},
		{
			"key": "alpha_user_Obj_schema_property_accountStatus_type",
			"value": "string"
		},
		{
			"key": "alpha_user_Obj_schema_property_accountStatus_usageDescription",
			"value": ""
		},
		{
			"key": "alpha_user_Obj_schema_property_accountStatus_userEditable",
			"value": "false"
		},
		{
			"key": "alpha_user_Obj_schema_property_accountStatus_isVirtual",
			"value": "false"
		},
		{
			"key": "alpha_user_Obj_schema_property_accountStatus_viewable",
			"value": "true"
		},
		{
			"key": "alpha_user_Obj_schema_property_aliasList_description",
			"value": "List of identity aliases used primarily to record social IdP subjects for this user"
		},
		{
			"key": "alpha_user_Obj_schema_property_aliasList_isVirtual",
			"value": "false"
		},
		{
			"key": "alpha_user_Obj_schema_property_aliasList_items_title",
			"value": "User Alias Names Items"
		},
		{
			"key": "alpha_user_Obj_schema_property_aliasList_items_type",
			"value": "string"
		},
		{
			"key": "alpha_user_Obj_schema_property_aliasList_returnByDefault",
			"value": "false"
		},
		{
			"key": "alpha_user_Obj_schema_property_aliasList_searchable",
			"value": "false"
		},
		{
			"key": "alpha_user_Obj_schema_property_aliasList_title",
			"value": "User Alias Names List"
		},
		{
			"key": "alpha_user_Obj_schema_property_aliasList_type",
			"value": "array"
		},
		{
			"key": "alpha_user_Obj_schema_property_aliasList_userEditable",
			"value": "true"
		},
		{
			"key": "alpha_user_Obj_schema_property_aliasList_viewable",
			"value": "false"
		},
		{
			"key": "alpha_user_Obj_schema_property_authzRoles_description",
			"value": "Authorization Roles"
		},
		{
			"key": "alpha_user_Obj_schema_property_authzRoles_id",
			"value": "urn:jsonschema:org:forgerock:openidm:managed:api:User:authzRoles"
		},
		{
			"key": "alpha_user_Obj_schema_property_authzRoles_isPersonal",
			"value": "false"
		},
		{
			"key": "alpha_user_Obj_schema_property_authzRoles_items_id",
			"value": "urn:jsonschema:org:forgerock:openidm:managed:api:User:authzRoles:items"
		},
		{
			"key": "alpha_user_Obj_schema_property_authzRoles_items_properties_ref_description",
			"value": "References a relationship from a managed object"
		},
		{
			"key": "alpha_user_Obj_schema_property_authzRoles_items_properties_ref_type",
			"value": "string"
		},
		{
			"key": "alpha_user_Obj_schema_property_authzRoles_items_properties__refProperties_description",
			"value": "Supports metadata within the relationship"
		},
		{
			"key": "alpha_user_Obj_schema_property_authzRoles_items_properties__refProperties_properties_id_description",
			"value": "_refProperties object ID"
		},
		{
			"key": "alpha_user_Obj_schema_property_authzRoles_items_properties__refProperties_properties_id_type",
			"value": "string"
		},
		{
			"key": "alpha_user_Obj_schema_property_authzRoles_items_properties__refProperties_title",
			"value": "Authorization Roles Items _refProperties"
		},
		{
			"key": "alpha_user_Obj_schema_property_authzRoles_items_properties__refProperties_type",
			"value": "object"
		},
		{
			"key": "alpha_user_Obj_schema_property_authzRoles_items_resourceCollection",
			"value": "{\"conditionalAssociationField\":\"condition\",\"label\":\"Internal Role\",\"path\":\"internal/role\",\"query\":{\"fields\":[\"name\"],\"queryFilter\":\"true\"}}"
		},
		{
			"key": "alpha_user_Obj_schema_property_authzRoles_items_reversePropertyName",
			"value": "authzMembers"
		},
		{
			"key": "alpha_user_Obj_schema_property_authzRoles_items_reverseRelationship",
			"value": "true"
		},
		{
			"key": "alpha_user_Obj_schema_property_authzRoles_items_title",
			"value": "Authorization Roles Items"
		},
		{
			"key": "alpha_user_Obj_schema_property_authzRoles_items_type",
			"value": "relationship"
		},
		{
			"key": "alpha_user_Obj_schema_property_authzRoles_items_validate",
			"value": "true"
		},
		{
			"key": "alpha_user_Obj_schema_property_authzRoles_returnByDefault",
			"value": "false"
		},
		{
			"key": "alpha_user_Obj_schema_property_authzRoles_title",
			"value": "Authorization Roles"
		},
		{
			"key": "alpha_user_Obj_schema_property_authzRoles_type",
			"value": "array"
		},
		{
			"key": "alpha_user_Obj_schema_property_authzRoles_usageDescription",
			"value": ""
		},
		{
			"key": "alpha_user_Obj_schema_property_authzRoles_userEditable",
			"value": "false"
		},
		{
			"key": "alpha_user_Obj_schema_property_authzRoles_viewable",
			"value": "true"
		},
		{
			"key": "alpha_user_Obj_schema_property_city",
			"value": "{\"description\":\"City\",\"isPersonal\":false,\"title\":\"City\",\"type\":\"string\",\"usageDescription\":null,\"userEditable\":true,\"viewable\":true}"
		},
		{
			"key": "alpha_user_Obj_schema_property_cn",
			"value": "{\"description\":\"Common Name\",\"isPersonal\":true,\"isVirtual\":true,\"onStore\":{\"source\":\"object.cn || (object.givenName + ' ' + object.sn)\",\"type\":\"text/javascript\"},\"scope\":\"private\",\"searchable\":false,\"title\":\"Common Name\",\"type\":\"string\",\"userEditable\":false,\"viewable\":false}"
		},
		{
			"key": "alpha_user_Obj_schema_property_consentedMappings",
			"value": "{\"description\":\"Consented Mappings\",\"isPersonal\":false,\"isVirtual\":false,\"items\":{\"items\":{\"order\":[\"mapping\",\"consentDate\"],\"properties\":{\"consentDate\":{\"description\":\"Consent Date\",\"searchable\":true,\"title\":\"Consent Date\",\"type\":\"string\",\"userEditable\":true,\"viewable\":true},\"mapping\":{\"description\":\"Mapping\",\"searchable\":true,\"title\":\"Mapping\",\"type\":\"string\",\"userEditable\":true,\"viewable\":true}},\"required\":[\"mapping\",\"consentDate\"],\"title\":\"Consented Mappings Item\",\"type\":\"object\"},\"title\":\"Consented Mappings Items\",\"type\":\"array\"},\"returnByDefault\":false,\"searchable\":false,\"title\":\"Consented Mappings\",\"type\":\"array\",\"usageDescription\":null,\"userEditable\":true,\"viewable\":false}"
		},
		{
			"key": "alpha_user_Obj_schema_property_country",
			"value": "{\"description\":\"Country\",\"isPersonal\":false,\"title\":\"Country\",\"type\":\"string\",\"usageDescription\":null,\"userEditable\":true,\"viewable\":true}"
		},
		{
			"key": "alpha_user_Obj_schema_property_description",
			"value": "{\"description\":\"Description\",\"isPersonal\":false,\"searchable\":true,\"title\":\"Description\",\"type\":\"string\",\"usageDescription\":null,\"userEditable\":true,\"viewable\":true}"
		},
		{
			"key": "alpha_user_Obj_schema_property_effectiveAssignments",
			"value": "{\"description\":\"Effective Assignments\",\"isPersonal\":false,\"isVirtual\":true,\"items\":{\"title\":\"Effective Assignments Items\",\"type\":\"object\"},\"queryConfig\":{\"referencedObjectFields\":[\"*\"],\"referencedRelationshipFields\":[\"roles\",\"assignments\"]},\"returnByDefault\":true,\"title\":\"Effective Assignments\",\"type\":\"array\",\"usageDescription\":null,\"viewable\":false}"
		},
		{
			"key": "alpha_user_Obj_schema_property_effectiveRoles",
			"value": "{\"description\":\"Effective Roles\",\"isPersonal\":false,\"isVirtual\":true,\"items\":{\"title\":\"Effective Roles Items\",\"type\":\"object\"},\"queryConfig\":{\"referencedRelationshipFields\":[\"roles\"]},\"returnByDefault\":true,\"title\":\"Effective Roles\",\"type\":\"array\",\"usageDescription\":null,\"viewable\":false}"
		},
		{
			"key": "alpha_user_Obj_schema_property_givenName",
			"value": "{\"description\":\"First Name\",\"isPersonal\":true,\"searchable\":true,\"title\":\"First Name\",\"type\":\"string\",\"usageDescription\":null,\"userEditable\":true,\"viewable\":true}"
		},
		{
			"key": "alpha_user_Obj_schema_property_isAuthorisedUserOf",
			"value": "{\"deleteQueryConfig\":false,\"description\":\"Authorised Users are Users that are associated with a Company\",\"isVirtual\":false,\"items\":{\"notifySelf\":false,\"properties\":{\"_ref\":{\"type\":\"string\"},\"_refProperties\":{\"properties\":{\"_id\":{\"propName\":\"_id\",\"required\":false,\"type\":\"string\"},\"permissionAdmin\":{\"label\":\"Administer the Company\",\"propName\":\"permissionAdmin\",\"required\":false,\"type\":\"string\"},\"permissionFiling\":{\"label\":\"File Financial Statments\",\"propName\":\"permissionFiling\",\"required\":false,\"type\":\"string\"},\"permissionUpdate\":{\"label\":\"Update company details\",\"propName\":\"permissionUpdate\",\"required\":false,\"type\":\"string\"}},\"type\":\"object\"}},\"resourceCollection\":[{\"label\":\"Company\",\"notify\":false,\"path\":\"managed/Company\",\"query\":{\"fields\":[\"name\",\"number\"],\"queryFilter\":\"true\",\"sortKeys\":[]}}],\"reversePropertyName\":\"authorisedUsers\",\"reverseRelationship\":true,\"type\":\"relationship\",\"validate\":false},\"referencedObjectFields\":null,\"referencedRelationshipFields\":null,\"requiredByParent\":false,\"returnByDefault\":false,\"searchable\":false,\"title\":\"Authorised User Of\",\"type\":\"array\",\"userEditable\":false,\"viewable\":true}"
		},
		{
			"key": "alpha_user_Obj_schema_property_kbaInfo",
			"value": "{\"description\":\"KBA Info\",\"isPersonal\":true,\"items\":{\"order\":[\"answer\",\"customQuestion\",\"questionId\"],\"properties\":{\"answer\":{\"description\":\"Answer\",\"type\":\"string\"},\"customQuestion\":{\"description\":\"Custom question\",\"type\":\"string\"},\"questionId\":{\"description\":\"Question ID\",\"type\":\"string\"}},\"required\":[],\"title\":\"KBA Info Items\",\"type\":\"object\"},\"type\":\"array\",\"usageDescription\":null,\"userEditable\":true,\"viewable\":false}"
		},
		{
			"key": "alpha_user_Obj_schema_property_lastSync",
			"value": "{\"description\":\"Last Sync timestamp\",\"isPersonal\":false,\"order\":[\"effectiveAssignments\",\"timestamp\"],\"properties\":{\"effectiveAssignments\":{\"description\":\"Effective Assignments\",\"items\":{\"title\":\"Effective Assignments Items\",\"type\":\"object\"},\"title\":\"Effective Assignments\",\"type\":\"array\"},\"timestamp\":{\"description\":\"Timestamp\",\"type\":\"string\"}},\"scope\":\"private\",\"searchable\":false,\"title\":\"Last Sync timestamp\",\"type\":\"object\",\"usageDescription\":null,\"viewable\":false}"
		},
		{
			"key": "alpha_user_Obj_schema_property_mail",
			"value": "{\"description\":\"Email Address\",\"isPersonal\":true,\"policies\":[{\"policyId\":\"valid-email-address-format\"}],\"searchable\":true,\"title\":\"Email Address\",\"type\":\"string\",\"usageDescription\":null,\"userEditable\":true,\"viewable\":true}"
		},
		{
			"key": "alpha_user_Obj_schema_property_manager",
			"value": "{\"description\":\"Manager\",\"isPersonal\":false,\"properties\":{\"_ref\":{\"description\":\"References a relationship from a managed object\",\"type\":\"string\"},\"_refProperties\":{\"description\":\"Supports metadata within the relationship\",\"properties\":{\"_id\":{\"description\":\"_refProperties object ID\",\"type\":\"string\"}},\"title\":\"Manager _refProperties\",\"type\":\"object\"}},\"resourceCollection\":[{\"label\":\"User\",\"path\":\"managed/alpha_user\",\"query\":{\"fields\":[\"userName\",\"givenName\",\"sn\"],\"queryFilter\":\"true\"}}],\"reversePropertyName\":\"reports\",\"reverseRelationship\":true,\"searchable\":false,\"title\":\"Manager\",\"type\":\"relationship\",\"usageDescription\":null,\"userEditable\":false,\"validate\":true,\"viewable\":true}"
		},
		{
			"key": "alpha_user_Obj_schema_property_password",
			"value": "{\"description\":\"Password\",\"isPersonal\":false,\"isProtected\":true,\"scope\":\"private\",\"searchable\":false,\"title\":\"Password\",\"type\":\"string\",\"usageDescription\":null,\"userEditable\":true,\"viewable\":false}"
		},
		{
			"key": "alpha_user_Obj_schema_property_postalAddress",
			"value": "{\"description\":\"Address 1\",\"isPersonal\":true,\"title\":\"Address 1\",\"type\":\"string\",\"usageDescription\":null,\"userEditable\":true,\"viewable\":true}"
		},
		{
			"key": "alpha_user_Obj_schema_property_postalCode",
			"value": "{\"description\":\"Postal Code\",\"isPersonal\":false,\"title\":\"Postal Code\",\"type\":\"string\",\"usageDescription\":null,\"userEditable\":true,\"viewable\":true}"
		},
		{
			"key": "alpha_user_Obj_schema_property_preferences",
			"value": "{\"description\":\"Preferences\",\"isPersonal\":false,\"order\":[\"updates\",\"marketing\"],\"properties\":{\"marketing\":{\"description\":\"Send me special offers and services\",\"type\":\"boolean\"},\"updates\":{\"description\":\"Send me news and updates\",\"type\":\"boolean\"}},\"searchable\":false,\"title\":\"Preferences\",\"type\":\"object\",\"usageDescription\":null,\"userEditable\":true,\"viewable\":true}"
		},
		{
			"key": "alpha_user_Obj_schema_property_reports",
			"value": "{\"description\":\"Direct Reports\",\"isPersonal\":false,\"items\":{\"id\":\"urn:jsonschema:org:forgerock:openidm:managed:api:User:reports:items\",\"properties\":{\"_ref\":{\"description\":\"References a relationship from a managed object\",\"type\":\"string\"},\"_refProperties\":{\"description\":\"Supports metadata within the relationship\",\"properties\":{\"_id\":{\"description\":\"_refProperties object ID\",\"type\":\"string\"}},\"title\":\"Direct Reports Items _refProperties\",\"type\":\"object\"}},\"resourceCollection\":[{\"label\":\"User\",\"path\":\"managed/alpha_user\",\"query\":{\"fields\":[\"userName\",\"givenName\",\"sn\"],\"queryFilter\":\"true\"}}],\"reversePropertyName\":\"manager\",\"reverseRelationship\":true,\"title\":\"Direct Reports Items\",\"type\":\"relationship\",\"validate\":true},\"returnByDefault\":false,\"title\":\"Direct Reports\",\"type\":\"array\",\"usageDescription\":null,\"userEditable\":false,\"viewable\":true}"
		},
		{
			"key": "alpha_user_Obj_schema_property_roles",
			"value": "{\"description\":\"Provisioning Roles\",\"id\":\"urn:jsonschema:org:forgerock:openidm:managed:api:User:roles\",\"isPersonal\":false,\"items\":{\"id\":\"urn:jsonschema:org:forgerock:openidm:managed:api:User:roles:items\",\"notifySelf\":true,\"properties\":{\"_ref\":{\"description\":\"References a relationship from a managed object\",\"type\":\"string\"},\"_refProperties\":{\"description\":\"Supports metadata within the relationship\",\"properties\":{\"_grantType\":{\"description\":\"Grant Type\",\"label\":\"Grant Type\",\"type\":\"string\"},\"_id\":{\"description\":\"_refProperties object ID\",\"type\":\"string\"}},\"title\":\"Provisioning Roles Items _refProperties\",\"type\":\"object\"}},\"resourceCollection\":[{\"conditionalAssociationField\":\"condition\",\"label\":\"Role\",\"path\":\"managed/alpha_role\",\"query\":{\"fields\":[\"name\"],\"queryFilter\":\"true\"}}],\"reversePropertyName\":\"members\",\"reverseRelationship\":true,\"title\":\"Provisioning Roles Items\",\"type\":\"relationship\",\"validate\":true},\"relationshipGrantTemporalConstraintsEnforced\":true,\"returnByDefault\":false,\"title\":\"Provisioning Roles\",\"type\":\"array\",\"usageDescription\":null,\"userEditable\":false,\"viewable\":true}"
		},
		{
			"key": "alpha_user_Obj_schema_property_sn",
			"value": "{\"description\":\"Last Name\",\"isPersonal\":true,\"searchable\":true,\"title\":\"Last Name\",\"type\":\"string\",\"usageDescription\":null,\"userEditable\":true,\"viewable\":true}"
		},
		{
			"key": "alpha_user_Obj_schema_property_stateProvince",
			"value": "{\"description\":\"State/Province\",\"isPersonal\":false,\"title\":\"State/Province\",\"type\":\"string\",\"usageDescription\":null,\"userEditable\":true,\"viewable\":true}"
		},
		{
			"key": "alpha_user_Obj_schema_property_telephoneNumber",
			"value": "{\"deleteQueryConfig\":false,\"description\":\"Telephone Number\",\"isPersonal\":true,\"isVirtual\":false,\"pattern\":\"^\\\\+?([0-9\\\\- \\\\(\\\\)])*$\",\"searchable\":false,\"title\":\"Telephone Number\",\"type\":\"string\",\"usageDescription\":null,\"userEditable\":true,\"viewable\":true}"
		},
		{
			"key": "alpha_user_Obj_schema_property_userName",
			"value": "{\"description\":\"Username\",\"isPersonal\":true,\"minLength\":1,\"policies\":[{\"policyId\":\"valid-username\"},{\"params\":{\"forbiddenChars\":[\"/\"]},\"policyId\":\"cannot-contain-characters\"},{\"params\":{\"minLength\":1},\"policyId\":\"minimum-length\"},{\"params\":{\"maxLength\":255},\"policyId\":\"maximum-length\"}],\"searchable\":true,\"title\":\"Username\",\"type\":\"string\",\"usageDescription\":null,\"userEditable\":true,\"viewable\":true}"
		},
		{
			"key": "alpha_user_Obj_schema_requiredFields",
			"value": "\"userName\",\"givenName\",\"sn\",\"mail\""
		},
		{
			"key": "AuthTree_Login_nodes_count",
			"value": "4"
		},
		{
			"key": "AuthTree_Login_nodes_DataStore_id",
			"value": "2998c1c9-f4c8-4a00-b2c6-3426783ee49d"
		},
		{
			"key": "AuthTree_Login_nodes_InnerTree_id",
			"value": "33b24514-3e50-4180-8f08-ab6f4e51b07e"
		},
		{
			"key": "AuthTree_Login_nodes_PageNode_id",
			"value": "a12bc72f-ad97-4f1e-a789-a1fa3dd566c8"
		},
		{
			"key": "AuthTree_Login_nodes_IncrementLogin_id",
			"value": "bba3e0d8-8525-4e82-bf48-ac17f7988917"
		},
		{
			"key": "AuthTree_Login_id",
			"value": "login"
		},
		{
			"key": "AuthTree_Login_description",
			"value": "Platform Login Tree"
		},
		{
			"key": "AuthTree_Login_entryNode",
			"value": "a12bc72f-ad97-4f1e-a789-a1fa3dd566c8"
		},
		{
			"key": "AuthTree_Login_identityResource",
			"value": "managed/alpha_user"
		},
		{
			"key": "AuthTree_Login_nodes_DataStore_displayName",
			"value": "Data Store Decision"
		},
		{
			"key": "AuthTree_Login_nodes_DataStore_nodeType",
			"value": "DataStoreDecisionNode"
		},
		{
			"key": "AuthTree_Login_nodes_DataStore_conn_false",
			"value": "e301438c-0bd0-429c-ab0c-66126501069a"
		},
		{
			"key": "AuthTree_Login_nodes_DataStore_conn_true",
			"value": "bba3e0d8-8525-4e82-bf48-ac17f7988917"
		},
		{
			"key": "AuthTree_Login_nodes_InnerTree_displayName",
			"value": "Inner Tree Evaluator"
		},
		{
			"key": "AuthTree_Login_nodes_InnerTree_nodeType",
			"value": "InnerTreeEvaluatorNode"
		},
		{
			"key": "AuthTree_Login_nodes_InnerTree_conn_false",
			"value": "e301438c-0bd0-429c-ab0c-66126501069a"
		},
		{
			"key": "AuthTree_Login_nodes_InnerTree_conn_true",
			"value": "70e691a5-1e33-4ac3-a356-e7b6d60d92e0"
		},
		{
			"key": "AuthTree_Login_nodes_PageNode_displayName",
			"value": "Page Node"
		},
		{
			"key": "AuthTree_Login_nodes_PageNode_nodeType",
			"value": "PageNode"
		},
		{
			"key": "AuthTree_Login_nodes_PageNode_conn_outcome",
			"value": "2998c1c9-f4c8-4a00-b2c6-3426783ee49d"
		},
		{
			"key": "AuthTree_Login_nodes_IncrementLogin_displayName",
			"value": "Increment Login Count"
		},
		{
			"key": "AuthTree_Login_nodes_IncrementLogin_nodeType",
			"value": "IncrementLoginCountNode"
		},
		{
			"key": "AuthTree_Login_nodes_IncrementLogin_conn_outcome",
			"value": "33b24514-3e50-4180-8f08-ab6f4e51b07e"
		},
		{
			"key": "AuthTree_Login_MFA_nodes_count",
			"value": "5"
		},
		{
			"key": "AuthTree_Login_MFA_nodes_DataStore_id",
			"value": "14ba2b76-babd-4635-8aff-acafbf040cdb"
		},
		{
			"key": "AuthTree_Login_MFA_nodes_InnerTree_id",
			"value": "566a0888-7029-4ebc-8786-18f5c645c7ca"
		},
		{
			"key": "AuthTree_Login_MFA_nodes_PageNode_id",
			"value": "a82a578e-4efc-4faa-b032-c9815fd3950a"
		},
		{
			"key": "AuthTree_Login_MFA_nodes_IncrementLogin_id",
			"value": "cf1f549e-a917-4790-a301-007cb0b56f2c"
		},
		{
			"key": "AuthTree_Login_MFA_nodes_NotifyCall_id",
			"value": "2185e13b-6263-41ea-a865-834029f64816"
		},
		{
			"key": "AuthTree_Login_MFA_id",
			"value": "loginmfa"
		},
		{
			"key": "AuthTree_Login_MFA_description",
			"value": "Platform Login Tree"
		},
		{
			"key": "AuthTree_Login_MFA_entryNode",
			"value": "a82a578e-4efc-4faa-b032-c9815fd3950a"
		},
		{
			"key": "AuthTree_Login_MFA_identityResource",
			"value": "managed/alpha_user"
		},
		{
			"key": "AuthTree_Login_MFA_nodes_DataStore_conn_false",
			"value": "e301438c-0bd0-429c-ab0c-66126501069a"
		},
		{
			"key": "AuthTree_Login_MFA_nodes_DataStore_conn_true",
			"value": "cf1f549e-a917-4790-a301-007cb0b56f2c"
		},
		{
			"key": "AuthTree_Login_nodes_MFA_DataStore_displayName",
			"value": "Data Store Decision"
		},
		{
			"key": "AuthTree_Login_nodes_MFA_DataStore_nodeType",
			"value": "DataStoreDecisionNode"
		},
		{
			"key": "AuthTree_Login_nodes_MFA_InnerTree_conn_false",
			"value": "e301438c-0bd0-429c-ab0c-66126501069a"
		},
		{
			"key": "AuthTree_Login_nodes_MFA_InnerTree_conn_true",
			"value": "70e691a5-1e33-4ac3-a356-e7b6d60d92e0"
		},
		{
			"key": "AuthTree_Login_nodes_MFA_InnerTree_displayName",
			"value": "Inner Tree Evaluator"
		},
		{
			"key": "AuthTree_Login_nodes_MFA_InnerTree_nodeType",
			"value": "InnerTreeEvaluatorNode"
		},
		{
			"key": "AuthTree_Login_nodes_MFA_PageNode_conn_outcome",
			"value": "14ba2b76-babd-4635-8aff-acafbf040cdb"
		},
		{
			"key": "AuthTree_Login_nodes_MFA_PageNode_displayName",
			"value": "Page Node"
		},
		{
			"key": "AuthTree_Login_nodes_MFA_PageNode_nodeType",
			"value": "PageNode"
		},
		{
			"key": "AuthTree_Login_nodes_MFA_IncrementLogin_conn_outcome",
			"value": "566a0888-7029-4ebc-8786-18f5c645c7ca"
		},
		{
			"key": "AuthTree_Login_nodes_MFA_IncrementLogin_displayName",
			"value": "Increment Login Count"
		},
		{
			"key": "AuthTree_Login_nodes_MFA_IncrementLogin_nodeType",
			"value": "IncrementLoginCountNode"
		},
		{
			"key": "AuthTree_Login_nodes_MFA_Notifycall_conn_false",
			"value": "e301438c-0bd0-429c-ab0c-66126501069a"
		},
		{
			"key": "AuthTree_Login_nodes_MFA_Notifycall_conn_true",
			"value": "70e691a5-1e33-4ac3-a356-e7b6d60d92e0"
		},
		{
			"key": "AuthTree_Login_nodes_MFA_Notifycall_displayName",
			"value": "Notify Call"
		},
		{
			"key": "AuthTree_Login_nodes_MFA_Notifycall_nodeType",
			"value": "ScriptedDecisionNode"
		},
		{
			"key": "AuthTree_Registration_nodes_count",
			"value": "4"
		},
		{
			"key": "AuthTree_Registration_id",
			"value": "registrationtest"
		},
		{
			"key": "AuthTree_Registration_description",
			"value": "Platform Registration Tree2"
		},
		{
			"key": "AuthTree_Registration_entryNode",
			"value": "f9bc718b-35e3-453f-87d5-f6e2c28a615f"
		},
		{
			"key": "AuthTree_Registration_identityResource",
			"value": "managed/alpha_user"
		},
		{
			"key": "AuthTree_Registration_nodes_createObject_id",
			"value": "3774750f-2cf9-4b21-a516-5dfb1cf576a7"
		},
		{
			"key": "AuthTree_Registration_nodes_createObject_conn_created",
			"value": "bec697b0-3836-4b3e-8b60-cce8699e5286"
		},
		{
			"key": "AuthTree_Registration_nodes_createObject_conn_failure",
			"value": "e301438c-0bd0-429c-ab0c-66126501069a"
		},
		{
			"key": "AuthTree_Registration_nodes_createObject_displayName",
			"value": "Create Object"
		},
		{
			"key": "AuthTree_Registration_nodes_createObject_nodeType",
			"value": "CreateObjectNode"
		},
		{
			"key": "AuthTree_Registration_nodes_PageNode1_id",
			"value": "a912e3e2-a86b-4072-95de-79b5a731bd45"
		},
		{
			"key": "AuthTree_Registration_nodes_PageNode1_conn_outcome",
			"value": "3774750f-2cf9-4b21-a516-5dfb1cf576a7"
		},
		{
			"key": "AuthTree_Registration_nodes_PageNode1_displayName",
			"value": "Page Node"
		},
		{
			"key": "AuthTree_Registration_nodes_PageNode1_nodeType",
			"value": "PageNode"
		},
		{
			"key": "AuthTree_Registration_nodes_IncrementLoginCount_id",
			"value": "bec697b0-3836-4b3e-8b60-cce8699e5286"
		},
		{
			"key": "AuthTree_Registration_nodes_IncrementLoginCount_conn_outcome",
			"value": "70e691a5-1e33-4ac3-a356-e7b6d60d92e0"
		},
		{
			"key": "AuthTree_Registration_nodes_IncrementLoginCount_displayName",
			"value": "Increment Login Count"
		},
		{
			"key": "AuthTree_Registration_nodes_IncrementLoginCount_nodeType",
			"value": "IncrementLoginCountNode"
		},
		{
			"key": "AuthTree_Registration_nodes_PageNode2_id",
			"value": "f9bc718b-35e3-453f-87d5-f6e2c28a615f"
		},
		{
			"key": "AuthTree_Registration_nodes_PageNode2_conn_outcome",
			"value": "a912e3e2-a86b-4072-95de-79b5a731bd45"
		},
		{
			"key": "AuthTree_Registration_nodes_PageNode2_displayName",
			"value": "Page Node"
		},
		{
			"key": "AuthTree_Registration_nodes_PageNode2_nodeType",
			"value": "PageNode"
		},
		{
			"key": "AuthTree_Login_nodes_PageNode_subnodes",
			"value": "{\"_id\":\"7354982f-57b6-4b04-9ddc-f1dd1e1e07d0\",\"nodeType\":\"ValidatedUsernameNode\",\"displayName\":\"Platform Username\"},{\"_id\":\"0c80c39b-4813-4e67-b4fb-5a0bba85f994\",\"nodeType\":\"ValidatedPasswordNode\",\"displayName\":\"Platform Password\"}"
		},
		{
			"key": "AuthTree_Login_nodes_PageNode_subnodes_PlatformUsername_id",
			"value": "7354982f-57b6-4b04-9ddc-f1dd1e1e07d0"
		},
		{
			"key": "AuthTree_Login_nodes_PageNode_subnodes_PlatformPassword_id",
			"value": "0c80c39b-4813-4e67-b4fb-5a0bba85f994"
		},
		{
			"key": "AuthTree_Login_nodes_dataStore_response",
			"value": "{\"_id\":\"2998c1c9-f4c8-4a00-b2c6-3426783ee49d\",\"_rev\":\"-656534578\",\"_type\":{\"_id\":\"DataStoreDecisionNode\",\"name\":\"Data Store Decision\",\"collection\":true},\"_outcomes\":[{\"id\":\"true\",\"displayName\":\"True\"},{\"id\":\"false\",\"displayName\":\"False\"}]}"
		},
		{
			"key": "AuthTree_Login_nodes_incrementLoginCount_response",
			"value": "{\"_id\":\"bba3e0d8-8525-4e82-bf48-ac17f7988917\",\"_rev\":\"2098371942\",\"identityAttribute\":\"userName\",\"_type\":{\"_id\":\"IncrementLoginCountNode\",\"name\":\"Increment Login Count\",\"collection\":true},\"_outcomes\":[{\"id\":\"outcome\",\"displayName\":\"Outcome\"}]}"
		},
		{
			"key": "AuthTree_Login_nodes_innerTreeEvaluator_response",
			"value": "{\"_id\":\"33b24514-3e50-4180-8f08-ab6f4e51b07e\",\"_rev\":\"-1405518667\",\"tree\":\"ProgressiveProfile\",\"_type\":{\"_id\":\"InnerTreeEvaluatorNode\",\"name\":\"Inner Tree Evaluator\",\"collection\":true},\"_outcomes\":[{\"id\":\"true\",\"displayName\":\"True\"},{\"id\":\"false\",\"displayName\":\"False\"}]}"
		},
		{
			"key": "AuthTree_Login_nodes_PageNode_subnodes_PlatformUsername_response",
			"value": "{\"_id\":\"7354982f-57b6-4b04-9ddc-f1dd1e1e07d0\",\"_rev\":\"-2064640544\",\"validateInput\":false,\"usernameAttribute\":\"userName\",\"_type\":{\"_id\":\"ValidatedUsernameNode\",\"name\":\"Platform Username\",\"collection\":true},\"_outcomes\":[{\"id\":\"outcome\",\"displayName\":\"Outcome\"}]}"
		},
		{
			"key": "AuthTree_Login_nodes_PageNode_subnodes_PlatformPassword_response",
			"value": "{\"_id\":\"0c80c39b-4813-4e67-b4fb-5a0bba85f994\",\"_rev\":\"-1763423776\",\"validateInput\":false,\"passwordAttribute\":\"password\",\"_type\":{\"_id\":\"ValidatedPasswordNode\",\"name\":\"Platform Password\",\"collection\":true},\"_outcomes\":[{\"id\":\"outcome\",\"displayName\":\"Outcome\"}]}"
		},
		{
			"key": "AuthTree_Login_MFA_nodes_PageNode_subnodes",
			"value": "{\"_id\":\"9f6d20be-ca41-4c85-a36d-5802a1b1fcf0\",\"nodeType\":\"ValidatedUsernameNode\",\"displayName\":\"Platform Username\"},{\"_id\":\"cb11442d-e7e6-43e5-acf8-fb956e6d6ae7\",\"nodeType\":\"ValidatedPasswordNode\",\"displayName\":\"Platform Password\"}"
		},
		{
			"key": "AuthTree_Login_MFA_nodes_dataStore_response",
			"value": "{\"_id\":\"14ba2b76-babd-4635-8aff-acafbf040cdb\",\"_rev\":\"1624937638\",\"_type\":{\"_id\":\"DataStoreDecisionNode\",\"name\":\"Data Store Decision\",\"collection\":true},\"_outcomes\":[{\"id\":\"true\",\"displayName\":\"True\"},{\"id\":\"false\",\"displayName\":\"False\"}]}"
		},
		{
			"key": "AuthTree_Login_MFA_nodes_incrementLoginCount_response",
			"value": "{\"_id\":\"cf1f549e-a917-4790-a301-007cb0b56f2c\",\"_rev\":\"1024481533\",\"identityAttribute\":\"userName\",\"_type\":{\"_id\":\"IncrementLoginCountNode\",\"name\":\"Increment Login Count\",\"collection\":true},\"_outcomes\":[{\"id\":\"outcome\",\"displayName\":\"Outcome\"}]}"
		},
		{
			"key": "AuthTree_Login_MFA_nodes_innerTreeEvaluator_response",
			"value": "{\"_id\":\"566a0888-7029-4ebc-8786-18f5c645c7ca\",\"_rev\":\"259235898\",\"tree\":\"ProgressiveProfile\",\"_type\":{\"_id\":\"InnerTreeEvaluatorNode\",\"name\":\"Inner Tree Evaluator\",\"collection\":true},\"_outcomes\":[{\"id\":\"true\",\"displayName\":\"True\"},{\"id\":\"false\",\"displayName\":\"False\"}]}"
		},
		{
			"key": "AuthTree_Login_MFA_nodes_notifyCall_response",
			"value": "{\"_id\":\"2185e13b-6263-41ea-a865-834029f64816\",\"_rev\":\"-1665237669\",\"inputs\":[\"*\"],\"outcomes\":[\"ok\",\"ko\"],\"outputs\":[\"*\"],\"script\":\"c72754b6-1bfe-41cf-8758-1b77ef0a1f42\",\"_type\":{\"_id\":\"ScriptedDecisionNode\",\"name\":\"Scripted Decision\",\"collection\":true},\"_outcomes\":[{\"id\":\"ok\",\"displayName\":\"ok\"},{\"id\":\"ko\",\"displayName\":\"ko\"}]}"
		},
		{
			"key": "AuthTree_Login_MFA_nodes_PageNode_subnodes_PlatformUsername_id",
			"value": "9f6d20be-ca41-4c85-a36d-5802a1b1fcf0"
		},
		{
			"key": "AuthTree_Login_MFA_nodes_PageNode_subnodes_PlatformPassword_id",
			"value": "cb11442d-e7e6-43e5-acf8-fb956e6d6ae7"
		},
		{
			"key": "AuthTree_Login_MFA_nodes_PageNode_subnodes_PlatformUsername_response",
			"value": "{\"_id\":\"9f6d20be-ca41-4c85-a36d-5802a1b1fcf0\",\"_rev\":\"-1764403738\",\"usernameAttribute\":\"userName\",\"validateInput\":false,\"_type\":{\"_id\":\"ValidatedUsernameNode\",\"name\":\"Platform Username\",\"collection\":true},\"_outcomes\":[{\"id\":\"outcome\",\"displayName\":\"Outcome\"}]}"
		},
		{
			"key": "AuthTree_Login_MFA_nodes_PageNode_subnodes_PlatformPassword_response",
			"value": "{\"_id\":\"cb11442d-e7e6-43e5-acf8-fb956e6d6ae7\",\"_rev\":\"1572617137\",\"passwordAttribute\":\"password\",\"validateInput\":false,\"_type\":{\"_id\":\"ValidatedPasswordNode\",\"name\":\"Platform Password\",\"collection\":true},\"_outcomes\":[{\"id\":\"outcome\",\"displayName\":\"Outcome\"}]}"
		},
		{
			"key": "AuthTree_Registration_nodes_PageNode1_subnodes",
			"value": "{\"_id\":\"93f65662-f30e-4bd4-8a2e-f664e89625d8\",\"nodeType\":\"AttributeCollectorNode\",\"displayName\":\"Attribute Collector\"}"
		},
		{
			"key": "AuthTree_Registration_nodes_PageNode2_subnodes",
			"value": "{\"_id\":\"779fbfd5-4aeb-4030-93b2-92d1f4b6df56\",\"nodeType\":\"ValidatedUsernameNode\",\"displayName\":\"Platform Username\"},{\"_id\":\"1f0e5e48-4313-4aec-bd97-796e785e90fa\",\"nodeType\":\"AttributeCollectorNode\",\"displayName\":\"Attribute Collector\"},{\"_id\":\"cb980168-39f1-4035-b293-f6e186f80442\",\"nodeType\":\"ValidatedPasswordNode\",\"displayName\":\"Platform Password\"},{\"_id\":\"9d433d67-1ff6-43d3-9eb9-434972e30014\",\"nodeType\":\"KbaCreateNode\",\"displayName\":\"KBA Definition\"},{\"_id\":\"5d0dcdea-1110-4db1-acde-9b450306975a\",\"nodeType\":\"AcceptTermsAndConditionsNode\",\"displayName\":\"Accept Terms and Conditions\"}"
		},
		{
			"key": "AuthTree_Registration_nodes_incrementLoginCount_response",
			"value": "{\"_id\":\"bec697b0-3836-4b3e-8b60-cce8699e5286\",\"_rev\":\"1325635430\",\"identityAttribute\":\"userName\",\"_type\":{\"_id\":\"IncrementLoginCountNode\",\"name\":\"Increment Login Count\",\"collection\":true},\"_outcomes\":[{\"id\":\"outcome\",\"displayName\":\"Outcome\"}]}"
		},
		{
			"key": "AuthTree_Registration_nodes_createObject_response",
			"value": "{\"_id\":\"3774750f-2cf9-4b21-a516-5dfb1cf576a7\",\"_rev\":\"-417392046\",\"identityResource\":\"managed/alpha_user\",\"_type\":{\"_id\":\"CreateObjectNode\",\"name\":\"Create Object\",\"collection\":true},\"_outcomes\":[{\"id\":\"CREATED\",\"displayName\":\"Created\"},{\"id\":\"FAILURE\",\"displayName\":\"Failed\"}]}"
		},
		{
			"key": "AuthTree_Registration_nodes_PageNode1_AttributeCollector_id",
			"value": "93f65662-f30e-4bd4-8a2e-f664e89625d8"
		},
		{
			"key": "AuthTree_Registration_nodes_PageNode1_AttributeCollector_response",
			"value": "{\"_id\":\"93f65662-f30e-4bd4-8a2e-f664e89625d8\",\"_rev\":\"-410584663\",\"attributesToCollect\":[\"telephoneNumber\"],\"identityAttribute\":\"userName\",\"required\":false,\"validateInputs\":false,\"_type\":{\"_id\":\"AttributeCollectorNode\",\"name\":\"Attribute Collector\",\"collection\":true},\"_outcomes\":[{\"id\":\"outcome\",\"displayName\":\"Outcome\"}]}"
		},
		{
			"key": "AuthTree_Registration_nodes_PageNode2_UserName_id",
			"value": "779fbfd5-4aeb-4030-93b2-92d1f4b6df56"
		},
		{
			"key": "AuthTree_Registration_nodes_PageNode2_UserName_response",
			"value": "{\"_id\":\"779fbfd5-4aeb-4030-93b2-92d1f4b6df56\",\"_rev\":\"-1222953818\",\"usernameAttribute\":\"userName\",\"validateInput\":true,\"_type\":{\"_id\":\"ValidatedUsernameNode\",\"name\":\"Platform Username\",\"collection\":true},\"_outcomes\":[{\"id\":\"outcome\",\"displayName\":\"Outcome\"}]}"
		},
		{
			"key": "AuthTree_Registration_nodes_PageNode2_AttributeCollector_id",
			"value": "1f0e5e48-4313-4aec-bd97-796e785e90fa"
		},
		{
			"key": "AuthTree_Registration_nodes_PageNode2_AttributeCollector_response",
			"value": "{\"_id\":\"1f0e5e48-4313-4aec-bd97-796e785e90fa\",\"_rev\":\"72768962\",\"attributesToCollect\":[\"givenName\",\"sn\",\"mail\",\"preferences/updates\",\"preferences/marketing\"],\"identityAttribute\":\"userName\",\"required\":false,\"validateInputs\":true,\"_type\":{\"_id\":\"AttributeCollectorNode\",\"name\":\"Attribute Collector\",\"collection\":true},\"_outcomes\":[{\"id\":\"outcome\",\"displayName\":\"Outcome\"}]}"
		},
		{
			"key": "AuthTree_Registration_nodes_PageNode2_password_id",
			"value": "cb980168-39f1-4035-b293-f6e186f80442"
		},
		{
			"key": "AuthTree_Registration_nodes_PageNode2_password_response",
			"value": "{\"_id\":\"cb980168-39f1-4035-b293-f6e186f80442\",\"_rev\":\"-1278779822\",\"passwordAttribute\":\"password\",\"validateInput\":true,\"_type\":{\"_id\":\"ValidatedPasswordNode\",\"name\":\"Platform Password\",\"collection\":true},\"_outcomes\":[{\"id\":\"outcome\",\"displayName\":\"Outcome\"}]}"
		},
		{
			"key": "AuthTree_Registration_nodes_PageNode2_kba_id",
			"value": "9d433d67-1ff6-43d3-9eb9-434972e30014"
		},
		{
			"key": "AuthTree_Registration_nodes_PageNode2_kba_response",
			"value": "{\"_id\":\"9d433d67-1ff6-43d3-9eb9-434972e30014\",\"_rev\":\"1937655408\",\"message\":{\"en\":\"Select a security question\"},\"_type\":{\"_id\":\"KbaCreateNode\",\"name\":\"KBA Definition\",\"collection\":true},\"_outcomes\":[{\"id\":\"outcome\",\"displayName\":\"Outcome\"}]}"
		},
		{
			"key": "AuthTree_Registration_nodes_PageNode2_AcceptTermsnConditions_id",
			"value": "5d0dcdea-1110-4db1-acde-9b450306975a"
		},
		{
			"key": "AuthTree_Registration_nodes_PageNode2_AcceptTermsnConditions_response",
			"value": "{\"_id\":\"5d0dcdea-1110-4db1-acde-9b450306975a\",\"_rev\":\"-1849059503\",\"_type\":{\"_id\":\"AcceptTermsAndConditionsNode\",\"name\":\"Accept Terms and Conditions\",\"collection\":true},\"_outcomes\":[{\"id\":\"outcome\",\"displayName\":\"Outcome\"}]}"
		},
		{
			"key": "UserRole_Lender_id",
			"value": "40a4ce31-21ac-4a5c-8dda-07760f0020f8"
		},
		{
			"key": "UserRole_Lender_response",
			"value": "{\"_id\":\"40a4ce31-21ac-4a5c-8dda-07760f0020f8\",\"_rev\":\"0000000073d777aa\",\"name\":\"Lender\",\"description\":\"A lender can file for any company in the CH systems\",\"realm\":\"alpha\"}"
		},
		{
			"key": "InternalRole_CHSupport_id",
			"value": "697d005c-a480-4967-89be-435f26816bab"
		},
		{
			"key": "InternalRole_CHSupport_name",
			"value": "CH Support"
		},
		{
			"key": "InternalRole_CHSupport_Description",
			"value": "Internal Role for Companies House support users"
		},
		{
			"key": "InternalRole_CHSupport_temporalConstraints",
			"value": ""
		},
		{
			"key": "InternalRole_CHSupport_condition",
			"value": "\"/userName co \\\"\\\"\""
		},
		{
			"key": "InternalRole_CHSupport_privileges_count",
			"value": "2"
		},
		{
			"key": "InternalRole_CHSupport_privileges",
			"value": "{\"path\":\"managed/alpha_user\",\"name\":\"Manage External Users\",\"actions\":[],\"permissions\":[\"VIEW\",\"CREATE\",\"UPDATE\",\"DELETE\"],\"accessFlags\":[{\"attribute\":\"userName\",\"readOnly\":false},{\"attribute\":\"password\",\"readOnly\":false},{\"attribute\":\"givenName\",\"readOnly\":false},{\"attribute\":\"cn\",\"readOnly\":false},{\"attribute\":\"sn\",\"readOnly\":false},{\"attribute\":\"mail\",\"readOnly\":false},{\"attribute\":\"description\",\"readOnly\":false},{\"attribute\":\"accountStatus\",\"readOnly\":false},{\"attribute\":\"telephoneNumber\",\"readOnly\":false},{\"attribute\":\"postalAddress\",\"readOnly\":false},{\"attribute\":\"city\",\"readOnly\":false},{\"attribute\":\"postalCode\",\"readOnly\":false},{\"attribute\":\"country\",\"readOnly\":false},{\"attribute\":\"stateProvince\",\"readOnly\":false},{\"attribute\":\"roles\",\"readOnly\":false},{\"attribute\":\"manager\",\"readOnly\":false},{\"attribute\":\"authzRoles\",\"readOnly\":false},{\"attribute\":\"reports\",\"readOnly\":false},{\"attribute\":\"effectiveRoles\",\"readOnly\":false},{\"attribute\":\"effectiveAssignments\",\"readOnly\":false},{\"attribute\":\"lastSync\",\"readOnly\":false},{\"attribute\":\"kbaInfo\",\"readOnly\":false},{\"attribute\":\"preferences\",\"readOnly\":false},{\"attribute\":\"consentedMappings\",\"readOnly\":false},{\"attribute\":\"frIndexedString1\",\"readOnly\":false},{\"attribute\":\"frIndexedString2\",\"readOnly\":false},{\"attribute\":\"frIndexedString3\",\"readOnly\":false},{\"attribute\":\"frIndexedString4\",\"readOnly\":false},{\"attribute\":\"frIndexedString5\",\"readOnly\":false},{\"attribute\":\"frUnindexedString1\",\"readOnly\":false},{\"attribute\":\"frUnindexedString2\",\"readOnly\":false},{\"attribute\":\"frUnindexedString3\",\"readOnly\":false},{\"attribute\":\"frUnindexedString4\",\"readOnly\":false},{\"attribute\":\"frUnindexedString5\",\"readOnly\":false},{\"attribute\":\"frIndexedMultivalued1\",\"readOnly\":false},{\"attribute\":\"frIndexedMultivalued2\",\"readOnly\":false},{\"attribute\":\"frIndexedMultivalued3\",\"readOnly\":false},{\"attribute\":\"frIndexedMultivalued4\",\"readOnly\":false},{\"attribute\":\"frIndexedMultivalued5\",\"readOnly\":false},{\"attribute\":\"frUnindexedMultivalued1\",\"readOnly\":false},{\"attribute\":\"frUnindexedMultivalued2\",\"readOnly\":false},{\"attribute\":\"frUnindexedMultivalued3\",\"readOnly\":false},{\"attribute\":\"frUnindexedMultivalued4\",\"readOnly\":false},{\"attribute\":\"frUnindexedMultivalued5\",\"readOnly\":false},{\"attribute\":\"frIndexedDate1\",\"readOnly\":false},{\"attribute\":\"frIndexedDate2\",\"readOnly\":false},{\"attribute\":\"frIndexedDate3\",\"readOnly\":false},{\"attribute\":\"frIndexedDate4\",\"readOnly\":false},{\"attribute\":\"frIndexedDate5\",\"readOnly\":false},{\"attribute\":\"frUnindexedDate1\",\"readOnly\":false},{\"attribute\":\"frUnindexedDate2\",\"readOnly\":false},{\"attribute\":\"frUnindexedDate3\",\"readOnly\":false},{\"attribute\":\"frUnindexedDate4\",\"readOnly\":false},{\"attribute\":\"frUnindexedDate5\",\"readOnly\":false},{\"attribute\":\"frIndexedInteger1\",\"readOnly\":false},{\"attribute\":\"frIndexedInteger2\",\"readOnly\":false},{\"attribute\":\"frIndexedInteger3\",\"readOnly\":false},{\"attribute\":\"frIndexedInteger4\",\"readOnly\":false},{\"attribute\":\"frIndexedInteger5\",\"readOnly\":false},{\"attribute\":\"frUnindexedInteger1\",\"readOnly\":false},{\"attribute\":\"frUnindexedInteger2\",\"readOnly\":false},{\"attribute\":\"frUnindexedInteger3\",\"readOnly\":false},{\"attribute\":\"frUnindexedInteger4\",\"readOnly\":false},{\"attribute\":\"frUnindexedInteger5\",\"readOnly\":false},{\"attribute\":\"aliasList\",\"readOnly\":false}],\"filter\":\"!(/frIndexedString1 eq \\\"internal\\\")\"},{\"path\":\"managed/alpha_user\",\"name\":\"Manage Support Users\",\"actions\":[],\"permissions\":[\"VIEW\",\"CREATE\",\"UPDATE\",\"DELETE\"],\"accessFlags\":[{\"attribute\":\"userName\",\"readOnly\":false},{\"attribute\":\"password\",\"readOnly\":false},{\"attribute\":\"givenName\",\"readOnly\":false},{\"attribute\":\"cn\",\"readOnly\":false},{\"attribute\":\"sn\",\"readOnly\":false},{\"attribute\":\"mail\",\"readOnly\":false},{\"attribute\":\"description\",\"readOnly\":false},{\"attribute\":\"accountStatus\",\"readOnly\":false},{\"attribute\":\"telephoneNumber\",\"readOnly\":false},{\"attribute\":\"postalAddress\",\"readOnly\":false},{\"attribute\":\"city\",\"readOnly\":false},{\"attribute\":\"postalCode\",\"readOnly\":false},{\"attribute\":\"country\",\"readOnly\":false},{\"attribute\":\"stateProvince\",\"readOnly\":false},{\"attribute\":\"roles\",\"readOnly\":false},{\"attribute\":\"manager\",\"readOnly\":false},{\"attribute\":\"authzRoles\",\"readOnly\":false},{\"attribute\":\"reports\",\"readOnly\":false},{\"attribute\":\"effectiveRoles\",\"readOnly\":false},{\"attribute\":\"effectiveAssignments\",\"readOnly\":false},{\"attribute\":\"lastSync\",\"readOnly\":false},{\"attribute\":\"kbaInfo\",\"readOnly\":false},{\"attribute\":\"preferences\",\"readOnly\":false},{\"attribute\":\"consentedMappings\",\"readOnly\":false},{\"attribute\":\"frIndexedString1\",\"readOnly\":false},{\"attribute\":\"frIndexedString2\",\"readOnly\":false},{\"attribute\":\"frIndexedString3\",\"readOnly\":false},{\"attribute\":\"frIndexedString4\",\"readOnly\":false},{\"attribute\":\"frIndexedString5\",\"readOnly\":false},{\"attribute\":\"frUnindexedString1\",\"readOnly\":false},{\"attribute\":\"frUnindexedString2\",\"readOnly\":false},{\"attribute\":\"frUnindexedString3\",\"readOnly\":false},{\"attribute\":\"frUnindexedString4\",\"readOnly\":false},{\"attribute\":\"frUnindexedString5\",\"readOnly\":false},{\"attribute\":\"frIndexedMultivalued1\",\"readOnly\":false},{\"attribute\":\"frIndexedMultivalued2\",\"readOnly\":false},{\"attribute\":\"frIndexedMultivalued3\",\"readOnly\":false},{\"attribute\":\"frIndexedMultivalued4\",\"readOnly\":false},{\"attribute\":\"frIndexedMultivalued5\",\"readOnly\":false},{\"attribute\":\"frUnindexedMultivalued1\",\"readOnly\":false},{\"attribute\":\"frUnindexedMultivalued2\",\"readOnly\":false},{\"attribute\":\"frUnindexedMultivalued3\",\"readOnly\":false},{\"attribute\":\"frUnindexedMultivalued4\",\"readOnly\":false},{\"attribute\":\"frUnindexedMultivalued5\",\"readOnly\":false},{\"attribute\":\"frIndexedDate1\",\"readOnly\":false},{\"attribute\":\"frIndexedDate2\",\"readOnly\":false},{\"attribute\":\"frIndexedDate3\",\"readOnly\":false},{\"attribute\":\"frIndexedDate4\",\"readOnly\":false},{\"attribute\":\"frIndexedDate5\",\"readOnly\":false},{\"attribute\":\"frUnindexedDate1\",\"readOnly\":false},{\"attribute\":\"frUnindexedDate2\",\"readOnly\":false},{\"attribute\":\"frUnindexedDate3\",\"readOnly\":false},{\"attribute\":\"frUnindexedDate4\",\"readOnly\":false},{\"attribute\":\"frUnindexedDate5\",\"readOnly\":false},{\"attribute\":\"frIndexedInteger1\",\"readOnly\":false},{\"attribute\":\"frIndexedInteger2\",\"readOnly\":false},{\"attribute\":\"frIndexedInteger3\",\"readOnly\":false},{\"attribute\":\"frIndexedInteger4\",\"readOnly\":false},{\"attribute\":\"frIndexedInteger5\",\"readOnly\":false},{\"attribute\":\"frUnindexedInteger1\",\"readOnly\":false},{\"attribute\":\"frUnindexedInteger2\",\"readOnly\":false},{\"attribute\":\"frUnindexedInteger3\",\"readOnly\":false},{\"attribute\":\"frUnindexedInteger4\",\"readOnly\":false},{\"attribute\":\"frUnindexedInteger5\",\"readOnly\":false},{\"attribute\":\"aliasList\",\"readOnly\":false}],\"filter\":\"/frIndexedString1 eq \\\"internal\\\"\"}"
		},
		{
			"key": "TermsAndCondition_response",
			"value": "{\"_id\":\"selfservice.terms\",\"active\":\"0.1\",\"uiConfig\":{\"buttonText\":\"Accept\",\"displayName\":\"We've updated our terms\",\"purpose\":\"You must accept the updated terms in order to proceed.\"},\"versions\":[{\"createDate\":\"2019-10-28T04:20:11.320Z\",\"termsTranslations\":{\"en\":\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\"},\"version\":\"0.0\"},{\"createDate\":\"2021-02-01T10:41:57.474Z\",\"termsTranslations\":{\"en\":\"Terms and conditions placeholder\"},\"version\":\"0.1\"}]}"
		},
		{
			"key": "TermsAndCondition_activeVersion",
			"value": "0.1"
		},
		{
			"key": "Script_Registration_email_id",
			"value": "c72754b6-1bfe-41cf-8758-1b77ef0a1f42"
		},
		{
			"key": "Script_Registration_email_response",
			"value": "{\"_id\":\"c72754b6-1bfe-41cf-8758-1b77ef0a1f42\",\"name\":\"Send Registration Email\",\"description\":\"Send Registration Email\",\"script\":\"dmFyIGZyID0gSmF2YUltcG9ydGVyKAogICAgb3JnLmZvcmdlcm9jay5vcGVuYW0uYXV0aC5ub2RlLmFwaS5BY3Rpb24KKQoKdmFyIG5vdGlmeUpXVCA9IHRyYW5zaWVudFN0YXRlLmdldCgibm90aWZ5SldUIik7CnZhciB0ZW1wbGF0ZXMgPSB0cmFuc2llbnRTdGF0ZS5nZXQoIm5vdGlmeVRlbXBsYXRlcyIpOwoKbG9nZ2VyLmVycm9yKCJKV1QgZnJvbSB0cmFuc2llbnQgc3RhdGU6ICIgKyBub3RpZnlKV1QpOwpsb2dnZXIuZXJyb3IoInRlbXBsYXRlcyBmcm9tIHRyYW5zaWVudCBzdGF0ZTogIiArIHRlbXBsYXRlcyk7Cgp2YXIgcmVxdWVzdCA9IG5ldyBvcmcuZm9yZ2Vyb2NrLmh0dHAucHJvdG9jb2wuUmVxdWVzdCgpCnJlcXVlc3Quc2V0VXJpKCJodHRwczovL2FwaS5ub3RpZmljYXRpb25zLnNlcnZpY2UuZ292LnVrL3YyL25vdGlmaWNhdGlvbnMvZW1haWwiKTsKdHJ5ewogIHZhciByZXF1ZXN0Qm9keUpzb24gPSB7CiAgICAiZW1haWxfYWRkcmVzcyI6ICJtYXR0ZW8uZm9ybWljYUBhbWlkby5jb20iLAogICAgInRlbXBsYXRlX2lkIjogSlNPTi5wYXJzZSh0ZW1wbGF0ZXMpLmludml0ZSwKICAgICJwZXJzb25hbGlzYXRpb24iOiB7CiAgICAgICAgIm5hbWUiOiAidGVzdCIsCiAgICAgICAgImludml0ZXIiOiAid2hhdGV2ZXIiLAogICAgICAgICJsaW5rIjogImJsYWgiLAogICAgICAgICJjb21wYW55IjogImFjbWUiCiAgICB9CiAgfQp9Y2F0Y2goZSl7CiAgbG9nZ2VyLmVycm9yKGUpOwp9CgpyZXF1ZXN0LnNldE1ldGhvZCgiUE9TVCIpOwpyZXF1ZXN0LmdldEhlYWRlcnMoKS5hZGQoIkNvbnRlbnQtVHlwZSIsICJhcHBsaWNhdGlvbi9qc29uIik7CnJlcXVlc3QuZ2V0SGVhZGVycygpLmFkZCgiQXV0aG9yaXphdGlvbiIsICJCZWFyZXIgIiArIG5vdGlmeUpXVCk7CnJlcXVlc3QuZ2V0RW50aXR5KCkuc2V0U3RyaW5nKEpTT04uc3RyaW5naWZ5KHJlcXVlc3RCb2R5SnNvbikpCgp2YXIgcmVzcG9uc2UgPSBodHRwQ2xpZW50LnNlbmQocmVxdWVzdCkuZ2V0KCk7Cgpsb2dnZXIuZXJyb3IoIlJlc3BvbnNlOiAiICsgcmVzcG9uc2UuZ2V0U3RhdHVzKCkuZ2V0Q29kZSgpICsgcmVzcG9uc2UuZ2V0Q2F1c2UoKSArIHJlc3BvbnNlLmdldEVudGl0eSgpLmdldFN0cmluZygpKTsKCmlmKHJlc3BvbnNlLmdldFN0YXR1cygpLmdldENvZGUoKSA9PSAyMDEpewogICBvdXRjb21lID0gInRydWUiOwp9ZWxzZXsKICAgb3V0Y29tZSA9ICJmYWxzZSI7Cn0=\",\"default\":false,\"language\":\"JAVASCRIPT\",\"context\":\"AUTHENTICATION_TREE_DECISION_NODE\",\"createdBy\":\"null\",\"creationDate\":0,\"lastModifiedBy\":\"null\",\"lastModifiedDate\":0}"
		},
		{
			"key": "Script_Registration_email_script",
			"value": "dmFyIGZyID0gSmF2YUltcG9ydGVyKAogICAgb3JnLmZvcmdlcm9jay5vcGVuYW0uYXV0aC5ub2RlLmFwaS5BY3Rpb24KKQoKdmFyIG5vdGlmeUpXVCA9IHRyYW5zaWVudFN0YXRlLmdldCgibm90aWZ5SldUIik7CnZhciB0ZW1wbGF0ZXMgPSB0cmFuc2llbnRTdGF0ZS5nZXQoIm5vdGlmeVRlbXBsYXRlcyIpOwoKbG9nZ2VyLmVycm9yKCJKV1QgZnJvbSB0cmFuc2llbnQgc3RhdGU6ICIgKyBub3RpZnlKV1QpOwpsb2dnZXIuZXJyb3IoInRlbXBsYXRlcyBmcm9tIHRyYW5zaWVudCBzdGF0ZTogIiArIHRlbXBsYXRlcyk7Cgp2YXIgcmVxdWVzdCA9IG5ldyBvcmcuZm9yZ2Vyb2NrLmh0dHAucHJvdG9jb2wuUmVxdWVzdCgpCnJlcXVlc3Quc2V0VXJpKCJodHRwczovL2FwaS5ub3RpZmljYXRpb25zLnNlcnZpY2UuZ292LnVrL3YyL25vdGlmaWNhdGlvbnMvZW1haWwiKTsKdHJ5ewogIHZhciByZXF1ZXN0Qm9keUpzb24gPSB7CiAgICAiZW1haWxfYWRkcmVzcyI6ICJtYXR0ZW8uZm9ybWljYUBhbWlkby5jb20iLAogICAgInRlbXBsYXRlX2lkIjogSlNPTi5wYXJzZSh0ZW1wbGF0ZXMpLmludml0ZSwKICAgICJwZXJzb25hbGlzYXRpb24iOiB7CiAgICAgICAgIm5hbWUiOiAidGVzdCIsCiAgICAgICAgImludml0ZXIiOiAid2hhdGV2ZXIiLAogICAgICAgICJsaW5rIjogImJsYWgiLAogICAgICAgICJjb21wYW55IjogImFjbWUiCiAgICB9CiAgfQp9Y2F0Y2goZSl7CiAgbG9nZ2VyLmVycm9yKGUpOwp9CgpyZXF1ZXN0LnNldE1ldGhvZCgiUE9TVCIpOwpyZXF1ZXN0LmdldEhlYWRlcnMoKS5hZGQoIkNvbnRlbnQtVHlwZSIsICJhcHBsaWNhdGlvbi9qc29uIik7CnJlcXVlc3QuZ2V0SGVhZGVycygpLmFkZCgiQXV0aG9yaXphdGlvbiIsICJCZWFyZXIgIiArIG5vdGlmeUpXVCk7CnJlcXVlc3QuZ2V0RW50aXR5KCkuc2V0U3RyaW5nKEpTT04uc3RyaW5naWZ5KHJlcXVlc3RCb2R5SnNvbikpCgp2YXIgcmVzcG9uc2UgPSBodHRwQ2xpZW50LnNlbmQocmVxdWVzdCkuZ2V0KCk7Cgpsb2dnZXIuZXJyb3IoIlJlc3BvbnNlOiAiICsgcmVzcG9uc2UuZ2V0U3RhdHVzKCkuZ2V0Q29kZSgpICsgcmVzcG9uc2UuZ2V0Q2F1c2UoKSArIHJlc3BvbnNlLmdldEVudGl0eSgpLmdldFN0cmluZygpKTsKCmlmKHJlc3BvbnNlLmdldFN0YXR1cygpLmdldENvZGUoKSA9PSAyMDEpewogICBvdXRjb21lID0gInRydWUiOwp9ZWxzZXsKICAgb3V0Y29tZSA9ICJmYWxzZSI7Cn0="
		},
		{
			"key": "Script_Send_MFA_text_id",
			"value": "b276c566-622e-11eb-ae93-0242ac130002"
		},
		{
			"key": "Script_Send_MFA_text_response",
			"value": "{\"_id\":\"b276c566-622e-11eb-ae93-0242ac130002\",\"name\":\"Send MFA text\",\"description\":\"Send MFA text\",\"script\":\"b3V0Y29tZT0idHJ1ZSI=\",\"default\":false,\"language\":\"JAVASCRIPT\",\"context\":\"AUTHENTICATION_TREE_DECISION_NODE\",\"createdBy\":\"null\",\"creationDate\":0,\"lastModifiedBy\":\"null\",\"lastModifiedDate\":0}"
		},
		{
			"key": "Script_Send_MFA_text_script",
			"value": "b3V0Y29tZT0idHJ1ZSI="
		},
		{
			"key": "Script_Create_Notify_id",
			"value": "df67765e-df3a-4503-9ba5-35c992b39259"
		},
		{
			"key": "Script_Create_Notify_response",
			"value": "{\"_id\":\"df67765e-df3a-4503-9ba5-35c992b39259\",\"name\":\"Create Notify JWT\",\"description\":\"This script creates a JWT compatible with Gov Notify service. \\nThe resulting JWT (along with the template IDs) is then put in the transient state.\",\"script\":\"dmFyIGZyID0gSmF2YUltcG9ydGVyKAogIG9yZy5mb3JnZXJvY2suanNvbi5qb3NlLmJ1aWxkZXJzLkp3dEJ1aWxkZXJGYWN0b3J5LAogb3JnLmZvcmdlcm9jay5qc29uLmpvc2UuandzLmhhbmRsZXJzLkhtYWNTaWduaW5nSGFuZGxlciwKIG9yZy5mb3JnZXJvY2suanNvbi5qb3NlLmp3dC5Kd3RDbGFpbXNTZXQsCiBvcmcuZm9yZ2Vyb2NrLmpzb24uam9zZS5qd3MuSndzQWxnb3JpdGhtCikKCgp2YXIgbm90aWZ5RGV0YWlscyA9ICJ7IFwia2V5TmFtZVwiOiBcImNoc2lkYW10ZXN0XCIsIFwiaXNzVXVpZFwiOiBcIjMxNGQ4MjlmLTRiOGMtNDBmZS1iOWY1LTUwZWQ2MDAxMTAyZFwiLCBcInNlY3JldEtleVwiOiBcIjA2ODJiNjYyLTQ1MDItNDMwZC1iY2ViLTQ1NDJiYzRlOWVlN1wiLCBcInRlbXBsYXRlc1wiOiB7IFwiaW52aXRlXCI6IFwiNjU1NzU2OGMtYjljYS00MjZkLTljZWQtYWMwZDY4NjQ5MGU0XCIsIFwicmVxdWVzdEF1dGh6XCI6IFwiNWNhYjllYjQtZTY0OC00YTBkLWEyN2ItNTU4OTgwMjU5NDQwXCIsIFwib3RwRW1haWxcIjogXCJhMWY3N2M2NC05MjY4LTQ5ZDktYmI2NC04ZGRjNmJhYzAxNjZcIiwgXCJvdHBTbXNcIjogXCIxMmFjNDNlYy01YjgzLTQ4ZWMtYjNkYi05YThmM2Q2NjI0ZjZcIiwgXCJ2ZXJpZnlSZWdcIjogXCJiZjllZmZhNy0zYzMwLTQ0OTAtYjEyYi1mMWY2NTI3ZjRjNjlcIiwgXCJyZXNldFB3ZFwiOiBcImExN2I4ODJmLTA4YTAtNGQ5MS04NjBjLWFhYzlkNDJjOGYwYlwifX0iCgp2YXIgbm90aWZ5T2JqID0gSlNPTi5wYXJzZShub3RpZnlEZXRhaWxzKTsKCmxvZ2dlci5lcnJvcigicGFyc2VkOiAiICsgSlNPTi5zdHJpbmdpZnkobm90aWZ5T2JqKSk7Cgp2YXIgaXNzdWVyPW5vdGlmeU9iai5pc3NVdWlkOwp2YXIgc2VjcmV0PW5vdGlmeU9iai5zZWNyZXRLZXk7CnZhciBzZWNyZXRieXRlcz1qYXZhLmxhbmcuU3RyaW5nKHNlY3JldCkuZ2V0Qnl0ZXMoKQp2YXIgc2lnbmluZ0hhbmRsZXI9bmV3IGZyLkhtYWNTaWduaW5nSGFuZGxlcihzZWNyZXRieXRlcyk7Cgp2YXIgand0Q2xhaW1zPW5ldyBmci5Kd3RDbGFpbXNTZXQ7Cmp3dENsYWltcy5zZXRJc3N1ZXIoaXNzdWVyKTsKand0Q2xhaW1zLnNldElzc3VlZEF0VGltZShuZXcgRGF0ZSgpKTsKdmFyIGp3dD1uZXcgZnIuSnd0QnVpbGRlckZhY3RvcnkoKQogICAgICAgLmp3cyhzaWduaW5nSGFuZGxlcikKICAgICAgIC5oZWFkZXJzKCkKICAgICAgIC5hbGcoZnIuSndzQWxnb3JpdGhtLkhTMjU2KQogICAgICAgLmRvbmUoKQogICAgICAgLmNsYWltcyhqd3RDbGFpbXMpCiAgICAgICAuYnVpbGQoKTsKbG9nZ2VyLmVycm9yKCJKV1Q6ICIgKyBqd3QpOwoKdHJ5ewogIHRyYW5zaWVudFN0YXRlLnB1dCgibm90aWZ5SldUIiwgand0KTsKICB0cmFuc2llbnRTdGF0ZS5wdXQoIm5vdGlmeVRlbXBsYXRlcyIsIEpTT04uc3RyaW5naWZ5KG5vdGlmeU9iai50ZW1wbGF0ZXMpKTsKfWNhdGNoKGUpewogIGxvZ2dlci5lcnJvcihlKTsKfQoKb3V0Y29tZSA9ICJ0cnVlIjs=\",\"default\":false,\"language\":\"JAVASCRIPT\",\"context\":\"AUTHENTICATION_TREE_DECISION_NODE\",\"createdBy\":\"null\",\"creationDate\":0,\"lastModifiedBy\":\"null\",\"lastModifiedDate\":0}"
		},
		{
			"key": "Script_Create_Notify_script",
			"value": "dmFyIGZyID0gSmF2YUltcG9ydGVyKAogIG9yZy5mb3JnZXJvY2suanNvbi5qb3NlLmJ1aWxkZXJzLkp3dEJ1aWxkZXJGYWN0b3J5LAogb3JnLmZvcmdlcm9jay5qc29uLmpvc2UuandzLmhhbmRsZXJzLkhtYWNTaWduaW5nSGFuZGxlciwKIG9yZy5mb3JnZXJvY2suanNvbi5qb3NlLmp3dC5Kd3RDbGFpbXNTZXQsCiBvcmcuZm9yZ2Vyb2NrLmpzb24uam9zZS5qd3MuSndzQWxnb3JpdGhtCikKCgp2YXIgbm90aWZ5RGV0YWlscyA9ICJ7IFwia2V5TmFtZVwiOiBcImNoc2lkYW10ZXN0XCIsIFwiaXNzVXVpZFwiOiBcIjMxNGQ4MjlmLTRiOGMtNDBmZS1iOWY1LTUwZWQ2MDAxMTAyZFwiLCBcInNlY3JldEtleVwiOiBcIjA2ODJiNjYyLTQ1MDItNDMwZC1iY2ViLTQ1NDJiYzRlOWVlN1wiLCBcInRlbXBsYXRlc1wiOiB7IFwiaW52aXRlXCI6IFwiNjU1NzU2OGMtYjljYS00MjZkLTljZWQtYWMwZDY4NjQ5MGU0XCIsIFwicmVxdWVzdEF1dGh6XCI6IFwiNWNhYjllYjQtZTY0OC00YTBkLWEyN2ItNTU4OTgwMjU5NDQwXCIsIFwib3RwRW1haWxcIjogXCJhMWY3N2M2NC05MjY4LTQ5ZDktYmI2NC04ZGRjNmJhYzAxNjZcIiwgXCJvdHBTbXNcIjogXCIxMmFjNDNlYy01YjgzLTQ4ZWMtYjNkYi05YThmM2Q2NjI0ZjZcIiwgXCJ2ZXJpZnlSZWdcIjogXCJiZjllZmZhNy0zYzMwLTQ0OTAtYjEyYi1mMWY2NTI3ZjRjNjlcIiwgXCJyZXNldFB3ZFwiOiBcImExN2I4ODJmLTA4YTAtNGQ5MS04NjBjLWFhYzlkNDJjOGYwYlwifX0iCgp2YXIgbm90aWZ5T2JqID0gSlNPTi5wYXJzZShub3RpZnlEZXRhaWxzKTsKCmxvZ2dlci5lcnJvcigicGFyc2VkOiAiICsgSlNPTi5zdHJpbmdpZnkobm90aWZ5T2JqKSk7Cgp2YXIgaXNzdWVyPW5vdGlmeU9iai5pc3NVdWlkOwp2YXIgc2VjcmV0PW5vdGlmeU9iai5zZWNyZXRLZXk7CnZhciBzZWNyZXRieXRlcz1qYXZhLmxhbmcuU3RyaW5nKHNlY3JldCkuZ2V0Qnl0ZXMoKQp2YXIgc2lnbmluZ0hhbmRsZXI9bmV3IGZyLkhtYWNTaWduaW5nSGFuZGxlcihzZWNyZXRieXRlcyk7Cgp2YXIgand0Q2xhaW1zPW5ldyBmci5Kd3RDbGFpbXNTZXQ7Cmp3dENsYWltcy5zZXRJc3N1ZXIoaXNzdWVyKTsKand0Q2xhaW1zLnNldElzc3VlZEF0VGltZShuZXcgRGF0ZSgpKTsKdmFyIGp3dD1uZXcgZnIuSnd0QnVpbGRlckZhY3RvcnkoKQogICAgICAgLmp3cyhzaWduaW5nSGFuZGxlcikKICAgICAgIC5oZWFkZXJzKCkKICAgICAgIC5hbGcoZnIuSndzQWxnb3JpdGhtLkhTMjU2KQogICAgICAgLmRvbmUoKQogICAgICAgLmNsYWltcyhqd3RDbGFpbXMpCiAgICAgICAuYnVpbGQoKTsKbG9nZ2VyLmVycm9yKCJKV1Q6ICIgKyBqd3QpOwoKdHJ5ewogIHRyYW5zaWVudFN0YXRlLnB1dCgibm90aWZ5SldUIiwgand0KTsKICB0cmFuc2llbnRTdGF0ZS5wdXQoIm5vdGlmeVRlbXBsYXRlcyIsIEpTT04uc3RyaW5naWZ5KG5vdGlmeU9iai50ZW1wbGF0ZXMpKTsKfWNhdGNoKGUpewogIGxvZ2dlci5lcnJvcihlKTsKfQoKb3V0Y29tZSA9ICJ0cnVlIjs="
		},
		{
			"key": "Script_Reset_Password_id",
			"value": "c056951c-622e-11eb-ae93-0242ac130002"
		},
		{
			"key": "Script_Reset_Password_response",
			"value": "{\"_id\":\"c056951c-622e-11eb-ae93-0242ac130002\",\"name\":\"Send Reset Password Email\",\"description\":\"Send Reset Password Email\",\"script\":\"b3V0Y29tZT0idHJ1ZSI=\",\"default\":false,\"language\":\"JAVASCRIPT\",\"context\":\"AUTHENTICATION_TREE_DECISION_NODE\",\"createdBy\":\"null\",\"creationDate\":0,\"lastModifiedBy\":\"null\",\"lastModifiedDate\":0}"
		},
		{
			"key": "Script_Reset_Password_script",
			"value": "b3V0Y29tZT0idHJ1ZSI="
		},
		{
			"key": "Script_Auth_Tree_id",
			"value": "01e1a3c0-038b-4c16-956a-6c9d89328cff"
		},
		{
			"key": "Script_Auth_Tree_response",
			"value": "{\"_id\":\"01e1a3c0-038b-4c16-956a-6c9d89328cff\",\"name\":\"Authentication Tree Decision Node Script\",\"description\":\"Default global script for a scripted decision node\",\"script\":\"LyoKICAtIERhdGEgbWFkZSBhdmFpbGFibGUgYnkgbm9kZXMgdGhhdCBoYXZlIGFscmVhZHkgZXhlY3V0ZWQgYXJlIGF2YWlsYWJsZSBpbiB0aGUgc2hhcmVkU3RhdGUgdmFyaWFibGUuCiAgLSBUaGUgc2NyaXB0IHNob3VsZCBzZXQgb3V0Y29tZSB0byBlaXRoZXIgInRydWUiIG9yICJmYWxzZSIuCiAqLwoKb3V0Y29tZSA9ICJ0cnVlIjs=\",\"default\":true,\"language\":\"JAVASCRIPT\",\"context\":\"AUTHENTICATION_TREE_DECISION_NODE\",\"createdBy\":\"null\",\"creationDate\":0,\"lastModifiedBy\":\"null\",\"lastModifiedDate\":0}"
		},
		{
			"key": "Script_Auth_Tree_script",
			"value": "LyoKICAtIERhdGEgbWFkZSBhdmFpbGFibGUgYnkgbm9kZXMgdGhhdCBoYXZlIGFscmVhZHkgZXhlY3V0ZWQgYXJlIGF2YWlsYWJsZSBpbiB0aGUgc2hhcmVkU3RhdGUgdmFyaWFibGUuCiAgLSBUaGUgc2NyaXB0IHNob3VsZCBzZXQgb3V0Y29tZSB0byBlaXRoZXIgInRydWUiIG9yICJmYWxzZSIuCiAqLwoKb3V0Y29tZSA9ICJ0cnVlIjs="
		},
		{
			"key": "Connector_Mongo_user_sync_name",
			"value": "MongoDBTest"
		},
		{
			"key": "Connector_Mongo_user_sync_id",
			"value": ""
		},
		{
			"key": "Connector_Mongo_user_sync_configurationProperties",
			"value": ""
		},
		{
			"key": "Connector_Mongo_user_sync_connectorRef",
			"value": ""
		},
		{
			"key": "Connector_Mongo_user_sync_enabled",
			"value": ""
		},
		{
			"key": "Connector_Mongo_user_sync_objectTypes",
			"value": ""
		},
		{
			"key": "Connector_Mongo_user_sync_operationTimeout",
			"value": ""
		},
		{
			"key": "Connector_Mongo_user_sync_poolConfigOption",
			"value": ""
		},
		{
			"key": "Connector_Mongo_user_sync_resultsHandlerConfig",
			"value": ""
		},
		{
			"key": "Connector_Mongo_company_sync_name",
			"value": ""
		},
		{
			"key": "Connector_Mongo_company_sync_id",
			"value": ""
		},
		{
			"key": "Connector_Mongo_company_sync_configurationProperties",
			"value": ""
		},
		{
			"key": "Connector_Mongo_company_sync_connectorRef",
			"value": ""
		},
		{
			"key": "Connector_Mongo_company_sync_enabled",
			"value": ""
		},
		{
			"key": "Connector_Mongo_company_sync_objectTypes",
			"value": ""
		},
		{
			"key": "Connector_Mongo_company_sync_operationTimeout",
			"value": ""
		},
		{
			"key": "Connector_Mongo_company_sync_poolConfigOption",
			"value": ""
		},
		{
			"key": "Connector_Mongo_company_sync_resultsHandlerConfig",
			"value": ""
		},
		{
			"key": "AuthTree_Login_nodes_MFA_IdentityExistingUser_id",
			"value": ""
		},
		{
			"key": "AuthTree_Login_nodes_MFA_IdentityExistingUser_response",
			"value": ""
		},
		{
			"key": "AuthTree_Login_nodes_MFA_OTPCollectionDecision_id",
			"value": ""
		},
		{
			"key": "AuthTree_Login_nodes_MFA_OTPCollectionDecision_response",
			"value": ""
		},
		{
			"key": "AuthTree_Login_nodes_MFA_HasPhoneNumber_id",
			"value": ""
		},
		{
			"key": "AuthTree_Login_nodes_MFA_HasPhoneNumber_response",
			"value": ""
		},
		{
			"key": "AuthTree_Login_nodes_MFA_HOTP_id",
			"value": ""
		},
		{
			"key": "AuthTree_Login_nodes_MFA_HOTP_response",
			"value": ""
		},
		{
			"key": "AuthTree_Login_nodes_MFA_SetUpNotify_id",
			"value": ""
		},
		{
			"key": "AuthTree_Login_nodes_MFA_SetUpNotify_response",
			"value": ""
		},
		{
			"key": "AuthTree_Login_nodes_MFA_StaticNodes_response",
			"value": ""
		},
		{
			"key": "AuthTree_Login_nodes_MFA_uiConfig_response",
			"value": ""
		}
	]
}