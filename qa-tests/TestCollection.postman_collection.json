{
	"info": {
		"_postman_id": "815f180e-d4f0-469c-9d1d-c5f52faa737c",
		"name": "FR Configuration Test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Managed Objects",
			"item": [
				{
					"name": "Access Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"const JSONResponse = JSON.parse(responseBody);",
									"",
									"pm.environment.set(\"access_token\",JSONResponse.access_token);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": false
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "client_id",
									"value": "{{ClientId}}",
									"description": "The ID of the Public OAuth Client.",
									"type": "text"
								},
								{
									"key": "response_type",
									"value": "token",
									"description": "Response types the client will support and use.",
									"type": "text",
									"disabled": true
								},
								{
									"key": "scope",
									"value": "fr:idm:*",
									"description": "Strings that are presented to the user for approval and included in tokens so that the protected resource may make decisions about what to give access to.",
									"type": "text"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "text"
								},
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{platformUrl}}/am/oauth2/{{realm}}/access_token",
							"host": [
								"{{platformUrl}}"
							],
							"path": [
								"am",
								"oauth2",
								"{{realm}}",
								"access_token"
							],
							"query": [
								{
									"key": "auth_chain",
									"value": "PasswordGrant",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Managed Object  - Users & Company",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"const jsonData = JSON.parse(responseBody);\r",
									"const companyObj_index = pm.collectionVariables.get(\"companyObj_index\");\r",
									"const alpha_user_Obj_index = pm.collectionVariables.get(\"alpha_user_Obj_index\");\r",
									"\r",
									"    let utils = eval(environment.utils)();\r",
									"\r",
									"pm.test(\"(Status code is 200)\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//validating that the response returns correct number of mapped objects\r",
									"pm.test(\"corrent number of mapped objects retuned in the response\", () => {\r",
									"    const response_mapped_object_length = jsonData.objects.length;\r",
									"    const mapped_object_count = parseInt(pm.collectionVariables.get(\"mapped_object_count\"));\r",
									"\r",
									"    pm.expect(mapped_object_count).to.eql(response_mapped_object_length);\r",
									"});\r",
									"\r",
									"//validating company object icon class value \r",
									"pm.test(\"validate company object iconclass\", () => {\r",
									"    const iconclass = jsonData.objects[companyObj_index].iconClass;\r",
									"\r",
									"    pm.expect(iconclass).to.be.eql(pm.collectionVariables.get(\"companyObj_iconClass\"));\r",
									"});\r",
									"\r",
									"//validating company object name \r",
									"pm.test(\"validate company object `name`\", () => {\r",
									"    const name = jsonData.objects[companyObj_index].name;\r",
									"\r",
									"    pm.expect(name).to.be.eql(pm.collectionVariables.get(\"companyObj_name\"));\r",
									"});\r",
									"\r",
									"//validating company object schema's title \r",
									"pm.test(\"validate company object schema's `title`\", () => {\r",
									"    const title_actual = jsonData.objects[companyObj_index].schema.title;\r",
									"    const title_expected = pm.collectionVariables.get(\"companyObj_schema_title\");\r",
									"\r",
									"    pm.expect(title_actual).to.be.eql(title_expected);\r",
									"});\r",
									"\r",
									"//validating company object schema's description\r",
									"pm.test(\"validate company object schema's `description`\", () => {\r",
									"    const description = jsonData.objects[companyObj_index].schema.description;\r",
									"\r",
									"    pm.expect(description).to.be.eql(pm.collectionVariables.get(\"companyObj_schema_description\"));\r",
									"});\r",
									"\r",
									"//validating company object schema's icon\r",
									"pm.test(\"validate company object `schema's icon`\", () => {\r",
									"    const icon = jsonData.objects[companyObj_index].schema.icon;\r",
									"    pm.expect(icon).to.be.eql(pm.collectionVariables.get(\"companyObj_schema_icon\"));\r",
									"});\r",
									"\r",
									"//validating properties `name` values of company object \r",
									"pm.test(\"validate company object property `name` config \", () => {\r",
									"\r",
									"    const root = jsonData.objects[companyObj_index].schema.properties.name;\r",
									"\r",
									"    const deleteQueryConfig_actual = JSON.stringify(root.deleteQueryConfig);\r",
									"    const description_actual = root.description;\r",
									"    const isVirtual_actual = JSON.stringify(root.isVirtual);\r",
									"    const searchable_actual = JSON.stringify(root.searchable);\r",
									"    const title_actual = root.title;\r",
									"    const type_actual = root.type;\r",
									"    const userEditable_actual = JSON.stringify(root.userEditable);\r",
									"    const viewable_actual = JSON.stringify(root.viewable);\r",
									"\r",
									"    const deleteQueryConfig_expected = pm.collectionVariables.get(\"companyObj_property_name_deleteQueryConfig\");\r",
									"    const description_expected = pm.collectionVariables.get(\"companyObj_property_name_description\");\r",
									"    const isVirtual_expected = pm.collectionVariables.get(\"companyObj_property_name_isVirtual\");\r",
									"    const searchable_expected = pm.collectionVariables.get(\"companyObj_property_name_searchable\");\r",
									"    const title_expected = pm.collectionVariables.get(\"companyObj_property_name_title\");\r",
									"    const type_expected = pm.collectionVariables.get(\"companyObj_property_name_type\");\r",
									"    const userEditable_expected = pm.collectionVariables.get(\"companyObj_property_name_userEditable\");\r",
									"    const viewable_expected = pm.collectionVariables.get(\"companyObj_property_name_viewable\");\r",
									"\r",
									"    pm.expect(deleteQueryConfig_expected).to.be.eql(deleteQueryConfig_actual);\r",
									"    pm.expect(description_expected).to.be.eql(description_actual);\r",
									"    pm.expect(isVirtual_expected).to.be.eql(isVirtual_actual);\r",
									"    pm.expect(searchable_expected).to.be.eql(searchable_actual);\r",
									"    pm.expect(title_expected).to.be.eql(title_actual);\r",
									"    pm.expect(type_expected).to.be.eql(type_actual);\r",
									"    pm.expect(userEditable_expected).to.be.eql(userEditable_actual);\r",
									"    pm.expect(viewable_expected).to.be.eql(viewable_actual);\r",
									"});\r",
									"\r",
									"//validating properties `number` values of company object \r",
									"pm.test(\"validate company object property `number` config \", () => {\r",
									"\r",
									"    const root = jsonData.objects[companyObj_index].schema.properties.number;\r",
									"\r",
									"    const deleteQueryConfig_actual = JSON.stringify(root.deleteQueryConfig);\r",
									"    const description_actual = root.description;\r",
									"    const isVirtual_actual = JSON.stringify(root.isVirtual);\r",
									"    const searchable_actual = JSON.stringify(root.searchable);\r",
									"    const title_actual = root.title;\r",
									"    const type_actual = root.type;\r",
									"    const userEditable_actual = JSON.stringify(root.userEditable);\r",
									"    const viewable_actual = JSON.stringify(root.viewable);\r",
									"\r",
									"    const deleteQueryConfig_expected = pm.collectionVariables.get(\"companyObj_property_number_deleteQueryConfig\");\r",
									"    const description_expected = pm.collectionVariables.get(\"companyObj_property_number_description\");\r",
									"    const isVirtual_expected = pm.collectionVariables.get(\"companyObj_property_number_isVirtual\");\r",
									"    const searchable_expected = pm.collectionVariables.get(\"companyObj_property_number_searchable\");\r",
									"    const title_expected = pm.collectionVariables.get(\"companyObj_property_number_title\");\r",
									"    const type_expected = pm.collectionVariables.get(\"companyObj_property_number_type\");\r",
									"    const userEditable_expected = pm.collectionVariables.get(\"companyObj_property_number_userEditable\");\r",
									"    const viewable_expected = pm.collectionVariables.get(\"companyObj_property_number_viewable\");\r",
									"\r",
									"    pm.expect(deleteQueryConfig_expected).to.be.eql(deleteQueryConfig_actual);\r",
									"    pm.expect(description_expected).to.be.eql(description_actual);\r",
									"    pm.expect(isVirtual_expected).to.be.eql(isVirtual_actual);\r",
									"    pm.expect(searchable_expected).to.be.eql(searchable_actual);\r",
									"    pm.expect(title_expected).to.be.eql(title_actual);\r",
									"    pm.expect(type_expected).to.be.eql(type_actual);\r",
									"    pm.expect(userEditable_expected).to.be.eql(userEditable_actual);\r",
									"    pm.expect(viewable_expected).to.be.eql(viewable_actual);\r",
									"});\r",
									"\r",
									"//validating properties `status` values of company object \r",
									"pm.test(\"validate company object property `status` config \", () => {\r",
									"\r",
									"    const root = jsonData.objects[companyObj_index].schema.properties.status;\r",
									"\r",
									"    const searchable_actual = JSON.stringify(root.searchable);\r",
									"    const title_actual = root.title;\r",
									"    const type_actual = root.type;\r",
									"    const userEditable_actual = JSON.stringify(root.userEditable);\r",
									"    const viewable_actual = JSON.stringify(root.viewable);\r",
									"\r",
									"    const searchable_expected = pm.collectionVariables.get(\"companyObj_property_status_searchable\");\r",
									"    const title_expected = pm.collectionVariables.get(\"companyObj_property_status_title\");\r",
									"    const type_expected = pm.collectionVariables.get(\"companyObj_property_status_type\");\r",
									"    const userEditable_expected = pm.collectionVariables.get(\"companyObj_property_status_userEditable\");\r",
									"    const viewable_expected = pm.collectionVariables.get(\"companyObj_property_status_viewable\");\r",
									"\r",
									"    pm.expect(searchable_expected).to.be.eql(searchable_actual);\r",
									"    pm.expect(title_expected).to.be.eql(title_actual);\r",
									"    pm.expect(type_expected).to.be.eql(type_actual);\r",
									"    pm.expect(userEditable_expected).to.be.eql(userEditable_actual);\r",
									"    pm.expect(viewable_expected).to.be.eql(viewable_actual);\r",
									"});\r",
									"\r",
									"//validating properties `type` values of company object \r",
									"pm.test(\"validate company object property `type` config \", () => {\r",
									"    const searchable_actual = JSON.stringify(jsonData.objects[companyObj_index].schema.properties.type.searchable);\r",
									"    const title_actual = jsonData.objects[companyObj_index].schema.properties.type.title;\r",
									"    const type_actual = jsonData.objects[companyObj_index].schema.properties.type.type;\r",
									"    const userEditable_actual = JSON.stringify(jsonData.objects[companyObj_index].schema.properties.type.userEditable);\r",
									"    const viewable_actual = JSON.stringify(jsonData.objects[companyObj_index].schema.properties.type.viewable);\r",
									"\r",
									"    const searchable_expected = pm.collectionVariables.get(\"companyObj_property_type_searchable\");\r",
									"    const title_expected = pm.collectionVariables.get(\"companyObj_property_type_title\");\r",
									"    const type_expected = pm.collectionVariables.get(\"companyObj_property_type_type\");\r",
									"    const userEditable_expected = pm.collectionVariables.get(\"companyObj_property_type_userEditable\");\r",
									"    const viewable_expected = pm.collectionVariables.get(\"companyObj_property_type_viewable\");\r",
									"\r",
									"    pm.expect(searchable_expected).to.be.eql(searchable_actual);\r",
									"    pm.expect(title_expected).to.be.eql(title_actual);\r",
									"    pm.expect(type_expected).to.be.eql(type_actual);\r",
									"    pm.expect(userEditable_expected).to.be.eql(userEditable_actual);\r",
									"    pm.expect(viewable_expected).to.be.eql(viewable_actual);\r",
									"});\r",
									"\r",
									"\r",
									"//validating properties `authorised User` values of company object \r",
									"pm.test(\"validate company object property `authorised User` config \", () => {\r",
									"\r",
									"    const root = jsonData.objects[companyObj_index].schema.properties.authorisedUsers;\r",
									"\r",
									"    const deleteQueryConfig_actual = JSON.stringify(root.deleteQueryConfig);\r",
									"    const description_actual = root.description;\r",
									"    const isVirtual_actual = JSON.stringify(root.isVirtual);\r",
									"    const minLength_actual = JSON.stringify(root.minLength);\r",
									"    const policies_actual = root.policies;\r",
									"    const referencedObjectFields_actual = root.referencedObjectFields;\r",
									"    const referencedRelationshipFields_actual = root.referencedRelationshipFields;\r",
									"    const requiredByParent_actual = JSON.stringify(root.requiredByParent);\r",
									"    const returnByDefault_actual = JSON.stringify(root.returnByDefault);\r",
									"    const searchable_actual = JSON.stringify(root.searchable);\r",
									"    const title_actual = root.title;\r",
									"    const type_actual = root.type;\r",
									"    const userEditable_actual = JSON.stringify(root.userEditable);\r",
									"    const viewable_actual = JSON.stringify(root.viewable);\r",
									"\r",
									"    const deleteQueryConfig_expected = pm.collectionVariables.get(\"companyObj_property_authorisedUsers_deleteQueryConfig\");\r",
									"    const description_expected = pm.collectionVariables.get(\"companyObj_property_authorisedUsers_description\");\r",
									"    const isVirtual_expected = pm.collectionVariables.get(\"companyObj_property_authorisedUsers_isVirtual\");\r",
									"    const minLength_expected = pm.collectionVariables.get(\"companyObj_property_authorisedUsers_minLength\");\r",
									"    const referencedObjectFields_expected = pm.collectionVariables.get(\"companyObj_property_authorisedUsers_referencedObjectFields\");\r",
									"    const referencedRelationshipFields_expected = pm.collectionVariables.get(\"companyObj_property_authorisedUsers_referencedRelationshipFields\");\r",
									"    const requiredByParent_expected = pm.collectionVariables.get(\"companyObj_property_authorisedUsers_requiredByParent\");\r",
									"    const returnByDefault_expected = pm.collectionVariables.get(\"companyObj_property_authorisedUsers_returnByDefault\");\r",
									"    const searchable_expected = pm.collectionVariables.get(\"companyObj_property_authorisedUsers_searchable\");\r",
									"    const title_expected = pm.collectionVariables.get(\"companyObj_property_authorisedUsers_title\");\r",
									"    const type_expected = pm.collectionVariables.get(\"companyObj_property_authorisedUsers_type\");\r",
									"    const userEditable_expected = pm.collectionVariables.get(\"companyObj_property_authorisedUsers_userEditable\");\r",
									"    const viewable_expected = pm.collectionVariables.get(\"companyObj_property_authorisedUsers_viewable\");\r",
									"\r",
									"\r",
									"    pm.expect(deleteQueryConfig_expected).to.be.eql(deleteQueryConfig_actual);\r",
									"    pm.expect(description_expected).to.be.eql(description_actual);\r",
									"    pm.expect(isVirtual_expected).to.be.eql(isVirtual_actual);\r",
									"\r",
									"    //mininum length\r",
									"    if (minLength_actual == null)\r",
									"        pm.expect(JSON.parse(minLength_expected)).to.be.null;\r",
									"    else\r",
									"        pm.expect(minLength_expected).to.be.eql(minLength_actual);\r",
									"\r",
									"    //policies for authoriseduser property \r",
									"    pm.expect(policies_actual).to.be.empty;\r",
									"\r",
									"    //reference object fields\r",
									"    if (referencedObjectFields_actual == null)\r",
									"        pm.expect(JSON.parse(referencedObjectFields_expected)).to.be.null;\r",
									"    else\r",
									"        pm.expect(referencedObjectFields_expected).to.be.eql(referencedObjectFields_actual);\r",
									"\r",
									"    //referenced relationships fields\r",
									"    if (referencedRelationshipFields_actual == null)\r",
									"        pm.expect(JSON.parse(referencedRelationshipFields_expected)).to.be.null;\r",
									"    else\r",
									"        pm.expect(referencedRelationshipFields_expected).to.be.eql(referencedRelationshipFields_actual);\r",
									"\r",
									"    pm.expect(requiredByParent_expected).to.be.eql(requiredByParent_actual);\r",
									"    pm.expect(returnByDefault_expected).to.be.eql(returnByDefault_actual);\r",
									"    pm.expect(searchable_expected).to.be.eql(searchable_actual);\r",
									"    pm.expect(title_expected).to.be.eql(title_actual);\r",
									"    pm.expect(type_expected).to.be.eql(type_actual);\r",
									"    pm.expect(userEditable_expected).to.be.eql(userEditable_actual);\r",
									"    pm.expect(viewable_expected).to.be.eql(viewable_actual);\r",
									"    pm.expect()\r",
									"});\r",
									"\r",
									"//validating properties `authorised User -> Items` values of company object \r",
									"pm.test(\"validate company object property `authorised User -> Items` config \", () => {\r",
									"\r",
									"    const root = jsonData.objects[companyObj_index].schema.properties.authorisedUsers.items;\r",
									"\r",
									"    const notifySelf_actual = JSON.stringify(root.notifySelf);\r",
									"    const reversePropertyName_actual = root.reversePropertyName;\r",
									"    const reverseRelationship_actual = JSON.stringify(root.reverseRelationship);\r",
									"    const type_actual = root.type;\r",
									"    const validate_actual = JSON.stringify(root.validate);\r",
									"\r",
									"    const notifySelf_expected = pm.collectionVariables.get(\"companyObj_property_authorisedUsers_items_notifySelf\");\r",
									"    const reversePropertyName_expected = pm.collectionVariables.get(\"companyObj_property_authorisedUsers_items_reversePropertyName\");\r",
									"    const reverseRelationship_expected = pm.collectionVariables.get(\"companyObj_property_authorisedUsers_items_reverseRelationship\");\r",
									"    const type_expected = pm.collectionVariables.get(\"companyObj_property_authorisedUsers_items_type\");\r",
									"    const validate_expected = pm.collectionVariables.get(\"companyObj_property_authorisedUsers_items_validate\");\r",
									"\r",
									"    pm.expect(notifySelf_expected).to.be.eql(notifySelf_actual);\r",
									"    pm.expect(reversePropertyName_expected).to.be.eql(reversePropertyName_actual);\r",
									"    pm.expect(reverseRelationship_expected).to.be.eql(reverseRelationship_actual);\r",
									"    pm.expect(type_expected).to.be.eql(type_actual);\r",
									"    pm.expect(validate_expected).to.be.eql(validate_actual);\r",
									"\r",
									"});\r",
									"\r",
									"//validating properties `authorised User -> Items -> properties` values of company object \r",
									"pm.test(\"validate company object property `authorised User -> Items -> properties` config \", () => {\r",
									"\r",
									"    const root = jsonData.objects[companyObj_index].schema.properties.authorisedUsers.items.properties;\r",
									"\r",
									"    const _ref_type_actual = root._ref.type;\r",
									"    const _refProperties_type_actual = root._refProperties.type;\r",
									"\r",
									"    //Actual ID property\r",
									"    const _refProperties_properties_id_propName_actual = root._refProperties.properties._id.propName;\r",
									"    const _refProperties_properties_id_required_actual = JSON.stringify(root._refProperties.properties._id.required);\r",
									"    const _refProperties_properties_id_type_actual = root._refProperties.properties._id.type;\r",
									"\r",
									"    //Actual Permission Admin property\r",
									"    const _refProperties_properties_permissionAdmin_label_actual = root._refProperties.properties.permissionAdmin.label;\r",
									"    const _refProperties_properties_permissionAdmin_propName_actual = root._refProperties.properties.permissionAdmin.propName;\r",
									"    const _refProperties_properties_permissionAdmin_required_actual = JSON.stringify(root._refProperties.properties.permissionAdmin.required);\r",
									"    const _refProperties_properties_permissionAdmin_type_actual = root._refProperties.properties.permissionAdmin.type;\r",
									"\r",
									"    //Actual Permission Filling property\r",
									"    const _refProperties_properties_permissionFilling_label_actual = root._refProperties.properties.permissionFiling.label;\r",
									"    const _refProperties_properties_permissionFilling_propName_actual = root._refProperties.properties.permissionFiling.propName;\r",
									"    const _refProperties_properties_permissionFilling_required_actual = JSON.stringify(root._refProperties.properties.permissionFiling.required);\r",
									"    const _refProperties_properties_permissionFilling_type_actual = root._refProperties.properties.permissionFiling.type;\r",
									"\r",
									"    //Actual Permission Update property \r",
									"    const _refProperties_properties_permissionUpdate_label_actual = root._refProperties.properties.permissionUpdate.label;\r",
									"    const _refProperties_properties_permissionUpdate_propName_actual = root._refProperties.properties.permissionUpdate.propName;\r",
									"    const _refProperties_properties_permissionUpdate_required_actual = JSON.stringify(root._refProperties.properties.permissionUpdate.required);\r",
									"    const _refProperties_properties_permissionUpdate_type_actual = root._refProperties.properties.permissionUpdate.type;\r",
									"\r",
									"\r",
									"    const _ref_type_expected = pm.collectionVariables.get(\"companyObj_property_authorisedUsers_items_properties_ref_type\");\r",
									"    const _refProperties_type_expected = pm.collectionVariables.get(\"companyObj_property_authorisedUsers_items_properties_refProperties_type\");\r",
									"\r",
									"    //Expected ID property\r",
									"    const _refProperties_properties_id_propName_expected = pm.collectionVariables.get(\"companyObj_property_authorisedUsers_items_properties_refProperties_Properties_id_PropName\");\r",
									"    const _refProperties_properties_id_required_expected = pm.collectionVariables.get(\"companyObj_property_authorisedUsers_items_properties_refProperties_Properties_id_required\");\r",
									"    const _refProperties_properties_id_type_expected = pm.collectionVariables.get(\"companyObj_property_authorisedUsers_items_properties_refProperties_Properties_id_type\");\r",
									"\r",
									"    //Expected Permission Admin property\r",
									"    const _refProperties_properties_permissionAdmin_label_expected = pm.collectionVariables.get(\"companyObj_property_authorisedUsers_items_properties_refProperties_Properties_permissionAdmin_label\");\r",
									"    const _refProperties_properties_permissionAdmin_propName_expected = pm.collectionVariables.get(\"companyObj_property_authorisedUsers_items_properties_refProperties_Properties_permissionAdmin_propName\");\r",
									"    const _refProperties_properties_permissionAdmin_required_expected = pm.collectionVariables.get(\"companyObj_property_authorisedUsers_items_properties_refProperties_Properties_permissionAdmin_required\");\r",
									"    const _refProperties_properties_permissionAdmin_type_expected = pm.collectionVariables.get(\"companyObj_property_authorisedUsers_items_properties_refProperties_Properties_permissionFiling_type\");\r",
									"\r",
									"    //Expected Permission Filling property\r",
									"    const _refProperties_properties_permissionFilling_label_expected = pm.collectionVariables.get(\"companyObj_property_authorisedUsers_items_properties_refProperties_Properties_permissionFiling_label\");\r",
									"    const _refProperties_properties_permissionFilling_propName_expected = pm.collectionVariables.get(\"companyObj_property_authorisedUsers_items_properties_refProperties_Properties_permissionFiling_propName\");\r",
									"    const _refProperties_properties_permissionFilling_required_expected = pm.collectionVariables.get(\"companyObj_property_authorisedUsers_items_properties_refProperties_Properties_permissionFiling_required\");\r",
									"    const _refProperties_properties_permissionFilling_type_expected = pm.collectionVariables.get(\"companyObj_property_authorisedUsers_items_properties_refProperties_Properties_permissionFiling_type\");\r",
									"\r",
									"    //Expected Permission Update property \r",
									"    const _refProperties_properties_permissionUpdate_label_expected = pm.collectionVariables.get(\"companyObj_property_authorisedUsers_items_properties_refProperties_Properties_permissionUpdate_label\");\r",
									"    const _refProperties_properties_permissionUpdate_propName_expected = pm.collectionVariables.get(\"companyObj_property_authorisedUsers_items_properties_refProperties_Properties_permissionUpdate_propName\");\r",
									"    const _refProperties_properties_permissionUpdate_required_expected = pm.collectionVariables.get(\"companyObj_property_authorisedUsers_items_properties_refProperties_Properties_permissionUpdate_required\");\r",
									"    const _refProperties_properties_permissionUpdate_type_expected = pm.collectionVariables.get(\"companyObj_property_authorisedUsers_items_properties_refProperties_Properties_permissionUpdate_type\");\r",
									"\r",
									"\r",
									"\r",
									"    pm.expect(_ref_type_expected).to.be.eql(_ref_type_actual);\r",
									"    pm.expect(_refProperties_type_expected).to.be.eql(_refProperties_type_actual);\r",
									"\r",
									"    //ID\r",
									"    pm.expect(_refProperties_properties_id_propName_expected).to.be.eql(_refProperties_properties_id_propName_actual);\r",
									"    pm.expect(_refProperties_properties_id_required_expected).to.be.eql(_refProperties_properties_id_required_actual);\r",
									"    pm.expect(_refProperties_properties_id_type_expected).to.be.eql(_refProperties_properties_id_type_actual);\r",
									"\r",
									"    //Permission Admin\r",
									"    pm.expect(_refProperties_properties_permissionAdmin_label_expected).to.be.eql(_refProperties_properties_permissionAdmin_label_actual);\r",
									"    pm.expect(_refProperties_properties_permissionAdmin_propName_expected).to.be.eql(_refProperties_properties_permissionAdmin_propName_actual);\r",
									"    pm.expect(_refProperties_properties_permissionAdmin_required_expected).to.be.eql(_refProperties_properties_permissionAdmin_required_actual);\r",
									"    pm.expect(_refProperties_properties_permissionAdmin_type_expected).to.be.eql(_refProperties_properties_permissionAdmin_type_actual);\r",
									"\r",
									"    //Permission Filing\r",
									"    pm.expect(_refProperties_properties_permissionFilling_label_expected).to.be.eql(_refProperties_properties_permissionFilling_label_actual);\r",
									"    pm.expect(_refProperties_properties_permissionFilling_propName_expected).to.be.eql(_refProperties_properties_permissionFilling_propName_actual);\r",
									"    pm.expect(_refProperties_properties_permissionFilling_required_expected).to.be.eql(_refProperties_properties_permissionFilling_required_actual);\r",
									"    pm.expect(_refProperties_properties_permissionFilling_type_expected).to.be.eql(_refProperties_properties_permissionFilling_type_actual);\r",
									"\r",
									"    //Permission Update\r",
									"    pm.expect(_refProperties_properties_permissionUpdate_label_expected).to.be.eql(_refProperties_properties_permissionUpdate_label_actual);\r",
									"    pm.expect(_refProperties_properties_permissionUpdate_propName_expected).to.be.eql(_refProperties_properties_permissionUpdate_propName_actual);\r",
									"    pm.expect(_refProperties_properties_permissionUpdate_required_expected).to.be.eql(_refProperties_properties_permissionUpdate_required_actual);\r",
									"    pm.expect(_refProperties_properties_permissionUpdate_type_expected).to.be.eql(_refProperties_properties_permissionUpdate_type_actual);\r",
									"\r",
									"});\r",
									"\r",
									"//validating properties `authorised User -> Items` values of company object \r",
									"// pm.test(\"validate company object property `authorised User -> Items` config \", () => {\r",
									"\r",
									"\r",
									"//validating company object attribute listing order \r",
									"pm.test(\"validate company object attributes `listing order`\", () => {\r",
									"    const companyObj_attribute_order_actual = jsonData.objects[companyObj_index].schema.order;\r",
									"    const companyObj_attribute_order_expected = JSON.parse(\"[\" + pm.collectionVariables.get(\"companyObj_schema_order\") + \"]\");\r",
									"\r",
									"    for (let attributes_index = 0; attributes_index < companyObj_attribute_order_actual.length; attributes_index++) {\r",
									"        pm.expect(companyObj_attribute_order_actual[attributes_index]).to.be.eql(companyObj_attribute_order_expected[attributes_index]);\r",
									"    }\r",
									"});\r",
									"\r",
									"//validating the required attributes in the company object \r",
									"pm.test(\"Verify correct company attributes are marked as `required`\", () => {\r",
									"    const companyObj_required_attributes_length = jsonData.objects[companyObj_index].schema.required.length;\r",
									"    const companyObj_required_attributes_list = JSON.parse(\"[\" + pm.collectionVariables.get(\"companyObj_required_attribute\") + \"]\");\r",
									"\r",
									"    for (var counter = 0; counter < companyObj_required_attributes_length; counter++) {\r",
									"        pm.expect(jsonData.objects[companyObj_index].schema.required[counter]).to.be.oneOf(companyObj_required_attributes_list);\r",
									"    }\r",
									"});\r",
									"\r",
									"//validating company object type\r",
									"pm.test(\"validate company object's `type`\", () => {\r",
									"    const type_actual = jsonData.objects[companyObj_index].type;\r",
									"    const type_expected = pm.collectionVariables.get(\"companyObj_type\");\r",
									"\r",
									"    pm.expect(type_actual).to.be.eql(type_expected);\r",
									"});\r",
									"\r",
									"\r",
									"//validating alpha user object's `type` and `name`\r",
									"pm.test(\"validate alpha_user object's `type` and `name`\", () => {\r",
									"\r",
									"    const type_actual = jsonData.objects[alpha_user_Obj_index].type;\r",
									"    const name_actual = jsonData.objects[alpha_user_Obj_index].name\r",
									"\r",
									"    const type_expected = pm.collectionVariables.get(\"alpha_user_Obj_type\");\r",
									"    const name_expected = pm.collectionVariables.get(\"alpha_user_Obj_name\");\r",
									"\r",
									"    pm.expect(type_expected).to.be.eql(type_actual);\r",
									"    pm.expect(name_expected).to.be.eql(name_actual);\r",
									"});\r",
									"\r",
									"//validating alpha user object's `meta data`\r",
									"pm.test(\"validate alpha_user object's `meta data`\", () => {\r",
									"\r",
									"    const root = jsonData.objects[alpha_user_Obj_index].meta\r",
									"\r",
									"    const resourceCollection_actual = root.resourceCollection;\r",
									"    const trackedProperties_actual = root.trackedProperties;\r",
									"\r",
									"    const resourceCollection_expected = pm.collectionVariables.get(\"alpha_user_Obj_meta_resourceCollection\");\r",
									"    const trackedProperties_expected = JSON.parse(\"[\" + pm.collectionVariables.get(\"alpha_user_Obj_meta_trackedProperties\") + \"]\");\r",
									"\r",
									"    for (var counter = 0; counter < trackedProperties_actual.length; counter++) {\r",
									"        pm.expect(trackedProperties_actual[counter]).to.be.oneOf(trackedProperties_expected);\r",
									"    }\r",
									"\r",
									"    pm.expect(resourceCollection_expected).to.be.eql(resourceCollection_actual);\r",
									"});\r",
									"\r",
									"\r",
									"//validating alpha user object's `notifications`\r",
									"pm.test(\"validate alpha_user object's `notifications`\", () => {\r",
									"\r",
									"    const root = jsonData.objects[alpha_user_Obj_index].notifications\r",
									"\r",
									"    const notifications_actual = root;\r",
									"    const notifications_length_expected = pm.collectionVariables.get(\"alpha_user_Obj_notifications_length\");\r",
									"\r",
									"    if (notifications_length_expected == 0)\r",
									"        pm.expect(notifications_actual).to.be.empty;\r",
									"});\r",
									"\r",
									"\r",
									"//validating alpha user object's `OnCreate` config\r",
									"pm.test(\"validate alpha_user object's `OnCreate` source\", () => {\r",
									"\r",
									"    const actual = jsonData.objects[alpha_user_Obj_index].onCreate\r",
									"    const expected = JSON.parse(pm.collectionVariables.get(\"alpha_user_Obj_onCreate\"));\r",
									"\r",
									"        pm.expect(utils.compare.deepEqual(actual,expected), `Script -> alpha user OnCreate incorrect.\r",
									"            Expected => ${JSON.stringify(expected)}   \r",
									"            Actual => ${JSON.stringify(actual)}`).to.be.true;\r",
									"});\r",
									"\r",
									"\r",
									"//validating alpha user object's `OnUpdate` config\r",
									"pm.test(\"validate alpha_user object's `OnUpdate` config\", () => {\r",
									"\r",
									"    const actual = jsonData.objects[alpha_user_Obj_index].onUpdate\r",
									"    const expected = JSON.parse(pm.collectionVariables.get(\"alpha_user_Obj_onUpdate\"));\r",
									"\r",
									"        pm.expect(utils.compare.deepEqual(actual,expected), `Script -> alpha user OnUpdate incorrect.\r",
									"            Expected => ${JSON.stringify(expected)}   \r",
									"            Actual => ${JSON.stringify(actual)}`).to.be.true;\r",
									"});\r",
									"\r",
									"//validating alpha user object's schema config\r",
									"pm.test(\"validate alpha_user object's `schema's` config\", () => {\r",
									"\r",
									"    const root = jsonData.objects[alpha_user_Obj_index].schema\r",
									"\r",
									"    const description_actual = root.description;\r",
									"    const title_actual = root.title;\r",
									"    const type_actual = root.type;\r",
									"\r",
									"\r",
									"    const description_expected = pm.collectionVariables.get(\"alpha_user_Obj_schema_description\");\r",
									"    const title_expected = pm.collectionVariables.get(\"alpha_user_Obj_schema_title\");\r",
									"    const type_expected = pm.collectionVariables.get(\"alpha_user_Obj_schema_type\");\r",
									"\r",
									"    //if description is empty\r",
									"    if (!description_actual)\r",
									"        pm.expect(description_expected).to.be.empty;\r",
									"    else\r",
									"        pm.expect(description_expected, \"description did not match\").to.be.eql(description_actual);\r",
									"\r",
									"    pm.expect(title_expected, \"title did not match\").to.be.eql(title_actual);\r",
									"    pm.expect(type_expected, \"type did not match\").to.be.eql(type_actual);\r",
									"});\r",
									"\r",
									"//validate aplpha user schema attributes order\r",
									"pm.test(\"validate alpha_user objects schema's attributes order \", () => {\r",
									"\r",
									"    const root = jsonData.objects[alpha_user_Obj_index].schema\r",
									"\r",
									"    const order_actual = root.order;\r",
									"    const order_expected = JSON.parse(\"[\" + pm.collectionVariables.get(\"alpha_user_Obj_schema_order\") + \"]\");\r",
									"\r",
									"    for (let index = 0; index < order_actual.length; index++) {\r",
									"        pm.expect(order_expected[index]).to.be.eql(order_actual[index]);\r",
									"    }\r",
									"\r",
									"});\r",
									"\r",
									"//validate aplpha user schema property - id\r",
									"pm.test(\"validate alpha_user objects schema's property `_id` config \", () => {\r",
									"\r",
									"    const root = jsonData.objects[alpha_user_Obj_index].schema.properties._id\r",
									"\r",
									"    const deleteQueryConfig_actual = JSON.stringify(root.deleteQueryConfig);\r",
									"    const description_actual = root.description;\r",
									"    const isPersonal_actual = JSON.stringify(root.isPersonal);\r",
									"    const isVirtual_actual = JSON.stringify(root.isVirtual);\r",
									"    const policies_actual = root.policies;\r",
									"    const searchable_actual = JSON.stringify(root.searchable);\r",
									"    const title_actual = root.title;\r",
									"    const type_actual = root.type;\r",
									"    const usageDescription_actual = root.usageDescription;\r",
									"    const userEditable_actual = JSON.stringify(root.userEditable);\r",
									"    const viewable_actual = JSON.stringify(root.viewable);\r",
									"\r",
									"    const deleteQueryConfig_expected = pm.collectionVariables.get(\"alpha_user_Obj_schema_property_id_deleteQueryConfig\");\r",
									"    const description_expected = pm.collectionVariables.get(\"alpha_user_Obj_schema_properties_description\");\r",
									"    const isPersonal_expected = pm.collectionVariables.get(\"alpha_user_Obj_schema_property_id_isPersonal\");\r",
									"    const isVirtual_expected = pm.collectionVariables.get(\"alpha_user_Obj_schema_property_id_isVirtual\");\r",
									"    const policies_expected = JSON.parse(\"[\" + pm.collectionVariables.get(\"alpha_user_Obj_schema_property_id_policies\") + \"]\");\r",
									"    const searchable_expected = pm.collectionVariables.get(\"alpha_user_Obj_schema_property_id_searchable\");\r",
									"    const title_expected = pm.collectionVariables.get(\"alpha_user_Obj_schema_property_id_title\");\r",
									"    const type_expected = pm.collectionVariables.get(\"alpha_user_Obj_schema_property_id_type\");\r",
									"    const usageDescription_expected = pm.collectionVariables.get(\"alpha_user_Obj_schema_property_id_usageDescription\")\r",
									"    const userEditable_expected = pm.collectionVariables.get(\"alpha_user_Obj_schema_property_id_userEditable\")\r",
									"    const viewable_expected = pm.collectionVariables.get(\"alpha_user_Obj_schema_property_id_viewable\")\r",
									"\r",
									"\r",
									"    pm.expect(deleteQueryConfig_expected, \"Id deleteQueryConfig values did not match\").to.be.eql(deleteQueryConfig_actual);\r",
									"    pm.expect(description_expected, \"Id description values did not match\").to.be.eql(description_actual);\r",
									"    pm.expect(isPersonal_expected, \"Id isPersonal values did not match\").to.be.eql(isPersonal_actual);\r",
									"    pm.expect(isVirtual_expected, \"Id isVirtual values did not match\").to.be.eql(isVirtual_actual);\r",
									"    pm.expect(searchable_expected, \"Id searchable values did not match\").to.be.eql(searchable_actual);\r",
									"\r",
									"    if (title_actual)\r",
									"        pm.expect(title_expected, \"Id title values did not match\").to.be.eql(title_actual);\r",
									"    else\r",
									"        pm.expect(title_expected, \"Id title values did not match\").to.be.empty\r",
									"\r",
									"    pm.expect(type_expected, \"Id type values did not match\").to.be.eql(type_actual);\r",
									"\r",
									"    if (usageDescription_actual)\r",
									"        pm.expect(usageDescription_expected, \"Id usageDescription values did not match\").to.be.eql(usageDescription_actual);\r",
									"    else\r",
									"        pm.expect(usageDescription_expected, \"Id usageDescription values did not match\").to.be.empty\r",
									"\r",
									"    pm.expect(userEditable_expected, \"Id userEditable values did not match\").to.be.eql(userEditable_actual);\r",
									"    pm.expect(viewable_expected, \"Id viewable values did not match\").to.be.eql(viewable_actual);\r",
									"\r",
									"\r",
									"    if (policies_expected.length == policies_actual.length) {\r",
									"        for (let index = 0; index < policies_actual.length; index++) {\r",
									"            pm.expect(utils.compare.deepEqual(policies_actual[index], policies_expected[index]), 'policies objects did not match').to.be.true;\r",
									"        }\r",
									"    }\r",
									"    else\r",
									"        pm.expect(policies_expected.length, \"policies array of different size\").to.be.eql(policies_actual.length);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"//validate aplpha user schema attributes order property - account status  \r",
									"pm.test(\"validate alpha_user objects schema's property `accountStatus` config \", () => {\r",
									"\r",
									"    const root = jsonData.objects[alpha_user_Obj_index].schema.properties.accountStatus\r",
									"\r",
									"    const deleteQueryConfig_actual = JSON.stringify(root.deleteQueryConfig);\r",
									"    const description_actual = root.description;\r",
									"    const isPersonal_actual = JSON.stringify(root.isPersonal);\r",
									"    const searchable_actual = JSON.stringify(root.searchable);\r",
									"    const title_actual = root.title;\r",
									"    const type_actual = root.type;\r",
									"    const usageDescription_actual = root.usageDescription;\r",
									"    const isVirtual_actual = JSON.stringify(root.isVirtual);\r",
									"    const userEditable_actual = JSON.stringify(root.userEditable);\r",
									"    const viewable_actual = JSON.stringify(root.viewable);\r",
									"\r",
									"    const deleteQueryConfig_expected = pm.collectionVariables.get(\"alpha_user_Obj_schema_property_accountStatus_deleteQueryConfig\");\r",
									"    const description_expected = pm.collectionVariables.get(\"alpha_user_Obj_schema_property_accountStatus_description\");\r",
									"    const isPersonal_expected = pm.collectionVariables.get(\"alpha_user_Obj_schema_property_accountStatus_isPersonal\");\r",
									"    const isVirtual_expected = pm.collectionVariables.get(\"alpha_user_Obj_schema_property_accountStatus_isVirtual\");\r",
									"    const searchable_expected = pm.collectionVariables.get(\"alpha_user_Obj_schema_property_accountStatus_searchable\");\r",
									"    const title_expected = pm.collectionVariables.get(\"alpha_user_Obj_schema_property_accountStatus_title\");\r",
									"    const type_expected = pm.collectionVariables.get(\"alpha_user_Obj_schema_property_accountStatus_type\");\r",
									"    const usageDescription_expected = pm.collectionVariables.get(\"alpha_user_Obj_schema_property_accountStatus_usageDescription\")\r",
									"    const userEditable_expected = pm.collectionVariables.get(\"alpha_user_Obj_schema_property_accountStatus_userEditable\")\r",
									"    const viewable_expected = pm.collectionVariables.get(\"alpha_user_Obj_schema_property_accountStatus_viewable\")\r",
									"\r",
									"   // pm.expect(deleteQueryConfig_expected, \"account status deleteQueryConfig values did not match\").to.be.eql(deleteQueryConfig_actual);\r",
									"    pm.expect(description_expected, \"account status description values did not match\").to.be.eql(description_actual);\r",
									"    pm.expect(isPersonal_expected, \"account status isPersonal values did not match\").to.be.eql(isPersonal_actual);\r",
									"   // pm.expect(isVirtual_expected, \"account status isVirtual values did not match\").to.be.eql(isVirtual_actual);\r",
									"    pm.expect(searchable_expected, \"account status searchable values did not match\").to.be.eql(searchable_actual);\r",
									"\r",
									"    if (title_actual)\r",
									"        pm.expect(title_expected, \"account status title values did not match\").to.be.eql(title_actual);\r",
									"    else\r",
									"        pm.expect(title_expected, \"account status title values did not match\").to.be.empty\r",
									"\r",
									"    pm.expect(type_expected, \"account status type values did not match\").to.be.eql(type_actual);\r",
									"\r",
									"    if (usageDescription_actual)\r",
									"        pm.expect(usageDescription_expected, \"account status usageDescription values did not match\").to.be.eql(usageDescription_actual);\r",
									"    else\r",
									"        pm.expect(usageDescription_expected, \"account status usageDescription values did not match\").to.be.empty\r",
									"\r",
									"    pm.expect(userEditable_expected, \"account status userEditable values did not match\").to.be.eql(userEditable_actual);\r",
									"    pm.expect(viewable_expected, \"account status viewable values did not match\").to.be.eql(viewable_actual);\r",
									"});\r",
									"\r",
									"//validate aplpha user schema attributes order property - aliasList\r",
									"pm.test(\"validate alpha_user objects schema's property `aliasList` config \", () => {\r",
									"\r",
									"    const root = jsonData.objects[alpha_user_Obj_index].schema.properties.aliasList\r",
									"\r",
									"    const description_actual = root.description;\r",
									"    const isVirtual_actual = JSON.stringify(root.isVirtual);\r",
									"    const item_title_actual = root.items.title;\r",
									"    const item_type_actual = root.items.type;\r",
									"    const returnByDefault_actual = JSON.stringify(root.returnByDefault);\r",
									"    const searchable_actual = JSON.stringify(root.searchable);\r",
									"    const title_actual = root.title;\r",
									"    const type_actual = root.type;\r",
									"    const userEditable_actual = JSON.stringify(root.userEditable);\r",
									"    const viewable_actual = JSON.stringify(root.viewable);\r",
									"\r",
									"    const description_expected = pm.collectionVariables.get(\"alpha_user_Obj_schema_property_aliasList_description\");\r",
									"    const isVirtual_expected = pm.collectionVariables.get(\"alpha_user_Obj_schema_property_aliasList_isVirtual\");\r",
									"    const item_title_expected = pm.collectionVariables.get(\"alpha_user_Obj_schema_property_aliasList_items_title\");\r",
									"    const item_type_expected = pm.collectionVariables.get(\"alpha_user_Obj_schema_property_aliasList_items_type\");\r",
									"    const returnByDefault_expected = pm.collectionVariables.get(\"alpha_user_Obj_schema_property_aliasList_returnByDefault\");\r",
									"    const searchable_expected = pm.collectionVariables.get(\"alpha_user_Obj_schema_property_aliasList_searchable\");\r",
									"    const title_expected = pm.collectionVariables.get(\"alpha_user_Obj_schema_property_aliasList_title\");\r",
									"    const type_expected = pm.collectionVariables.get(\"alpha_user_Obj_schema_property_aliasList_type\")\r",
									"    const userEditable_expected = pm.collectionVariables.get(\"alpha_user_Obj_schema_property_aliasList_userEditable\")\r",
									"    const viewable_expected = pm.collectionVariables.get(\"alpha_user_Obj_schema_property_aliasList_viewable\")\r",
									"\r",
									"\r",
									"    pm.expect(description_expected, \"aliasList description values did not match\").to.be.eql(description_actual);\r",
									"    pm.expect(isVirtual_expected, \"aliasList isVirtual values did not match\").to.be.eql(isVirtual_actual);\r",
									"    pm.expect(item_title_expected, \"aliasList - item->title values did not match\").to.be.eql(item_title_actual);\r",
									"    pm.expect(item_type_expected, \"aliasList item->type values did not match\").to.be.eql(item_type_expected);\r",
									"    pm.expect(returnByDefault_expected, \"aliasList returnByDefault values did not match\").to.be.eql(returnByDefault_actual);\r",
									"    pm.expect(searchable_expected, \"aliasList searchable values did not match\").to.be.eql(searchable_actual);\r",
									"\r",
									"    if (title_actual)\r",
									"        pm.expect(title_expected, \"aliasList title values did not match\").to.be.eql(title_actual);\r",
									"    else\r",
									"        pm.expect(title_expected, \"aliasList title values did not match\").to.be.empty\r",
									"\r",
									"    pm.expect(type_expected, \"aliasList type values did not match\").to.be.eql(type_actual);\r",
									"    pm.expect(userEditable_expected, \"aliasList userEditable values did not match\").to.be.eql(userEditable_actual);\r",
									"    pm.expect(viewable_expected, \"aliasList viewable values did not match\").to.be.eql(viewable_actual);\r",
									"});\r",
									"\r",
									"//validate aplpha user schema attributes order property - authzRoles\r",
									"pm.test(\"validate alpha_user objects schema's property `authzRoles` config \", () => {\r",
									"\r",
									"    const root = jsonData.objects[alpha_user_Obj_index].schema.properties.authzRoles\r",
									"\r",
									"    //actual values\r",
									"    const description_actual = root.description;\r",
									"    const id_actual = root.id;\r",
									"    const isPersonal_actual = JSON.stringify(root.isPersonal);\r",
									"    const item_id_actual = root.items.id;\r",
									"\r",
									"    const item_ref_description_actual = root.items.properties._ref.description;\r",
									"    const item_ref_type_actual = root.items.properties._ref.type;\r",
									"\r",
									"    const item_refProperties_description_actual = root.items.properties._refProperties.description;\r",
									"    const item_refProperties_title_actual = root.items.properties._refProperties.title;\r",
									"    const item_refProperties_type_actual = root.items.properties._refProperties.type;\r",
									"    const item_refProperties_Properties_id_desc_actual = root.items.properties._refProperties.properties._id.description;\r",
									"    const item_refProperties_Properties_id_type_actual = root.items.properties._refProperties.properties._id.type;\r",
									"\r",
									"    const item_resourceCollection_actual = root.items.resourceCollection;\r",
									"    const item_reversePropertyName_actual = root.items.reversePropertyName;\r",
									"    const item_reverseRelationship_actual = JSON.stringify(root.items.reverseRelationship);\r",
									"    const item_title_actual = root.items.title;\r",
									"    const item_type_actual = root.items.type;\r",
									"    const item_validate_actual = JSON.stringify(root.items.validate);\r",
									"\r",
									"    const returnByDefault_actual = JSON.stringify(root.returnByDefault);\r",
									"    const title_actual = root.title;\r",
									"    const type_actual = root.type;\r",
									"    const usageDescription_actual = root.usageDescription;\r",
									"    const userEditable_actual = JSON.stringify(root.userEditable);\r",
									"    const viewable_actual = JSON.stringify(root.viewable);\r",
									"\r",
									"    //expected values\r",
									"    const description_expected = pm.collectionVariables.get(\"alpha_user_Obj_schema_property_authzRoles_description\");\r",
									"    const id_expected = pm.collectionVariables.get(\"alpha_user_Obj_schema_property_authzRoles_id\");\r",
									"    const isPersonal_expected = pm.collectionVariables.get(\"alpha_user_Obj_schema_property_authzRoles_isPersonal\");\r",
									"    const item_id_expected = pm.collectionVariables.get(\"alpha_user_Obj_schema_property_authzRoles_items_id\");\r",
									"\r",
									"    const item_ref_description_expected = pm.collectionVariables.get(\"alpha_user_Obj_schema_property_authzRoles_items_properties_ref_description\");\r",
									"    const item_ref_type_expected = pm.collectionVariables.get(\"alpha_user_Obj_schema_property_authzRoles_items_properties_ref_type\");\r",
									"\r",
									"    const item_refProperties_description_expected = pm.collectionVariables.get(\"alpha_user_Obj_schema_property_authzRoles_items_properties__refProperties_description\");\r",
									"    const item_refProperties_title_expected = pm.collectionVariables.get(\"alpha_user_Obj_schema_property_authzRoles_items_properties__refProperties_title\");\r",
									"    const item_refProperties_type_expected = pm.collectionVariables.get(\"alpha_user_Obj_schema_property_authzRoles_items_properties__refProperties_type\");\r",
									"    const item_refProperties_Properties_id_desc_expected = pm.collectionVariables.get(\"alpha_user_Obj_schema_property_authzRoles_items_properties__refProperties_properties_id_description\");\r",
									"    const item_refProperties_Properties_id_type_expected = pm.collectionVariables.get(\"alpha_user_Obj_schema_property_authzRoles_items_properties__refProperties_properties_id_type\");\r",
									"\r",
									"    const item_resourceCollection_expected = JSON.parse(\"[\" + pm.collectionVariables.get(\"alpha_user_Obj_schema_property_authzRoles_items_resourceCollection\") + \"]\");\r",
									"    const item_reversePropertyName_expected = pm.collectionVariables.get(\"alpha_user_Obj_schema_property_authzRoles_items_reversePropertyName\");\r",
									"    const item_reverseRelationship_expected = pm.collectionVariables.get(\"alpha_user_Obj_schema_property_authzRoles_items_reverseRelationship\");\r",
									"    const item_title_expected = pm.collectionVariables.get(\"alpha_user_Obj_schema_property_authzRoles_items_title\");\r",
									"    const item_type_expected = pm.collectionVariables.get(\"alpha_user_Obj_schema_property_authzRoles_items_type\");\r",
									"    const item_validate_expected = pm.collectionVariables.get(\"alpha_user_Obj_schema_property_authzRoles_items_validate\");\r",
									"\r",
									"    const returnByDefault_expected = pm.collectionVariables.get(\"alpha_user_Obj_schema_property_authzRoles_returnByDefault\");\r",
									"    const title_expected = pm.collectionVariables.get(\"alpha_user_Obj_schema_property_authzRoles_title\");\r",
									"    const type_expected = pm.collectionVariables.get(\"alpha_user_Obj_schema_property_authzRoles_type\");\r",
									"    const usageDescription_expected = pm.collectionVariables.get(\"alpha_user_Obj_schema_property_authzRoles_usageDescription\");\r",
									"    const userEditable_expected = pm.collectionVariables.get(\"alpha_user_Obj_schema_property_authzRoles_userEditable\");\r",
									"    const viewable_expected = pm.collectionVariables.get(\"alpha_user_Obj_schema_property_authzRoles_viewable\");\r",
									"\r",
									"\r",
									"    pm.expect(description_expected, \"authzRoles description values did not match\").to.be.eql(description_actual);\r",
									"    pm.expect(id_expected, \"authzRoles id values did not match\").to.be.eql(id_actual);\r",
									"    pm.expect(isPersonal_expected, \"authzRoles isPersonal values did not match\").to.be.eql(isPersonal_actual);\r",
									"    pm.expect(item_id_expected, \"authzRoles->item->id values did not match\").to.be.eql(item_id_actual);\r",
									"    pm.expect(item_ref_description_expected, \"authzRoles->item->ref->description values did not match\").to.be.eql(item_ref_description_actual);\r",
									"    pm.expect(item_ref_type_expected, \"authzRoles->item->ref->type values did not match\").to.be.eql(item_ref_type_actual);\r",
									"\r",
									"    pm.expect(item_refProperties_description_expected, \"authzRoles->ref property->description values did not match\").to.be.eql(item_refProperties_description_actual);\r",
									"    pm.expect(item_refProperties_title_expected, \"authzRoles->ref property->title values did not match\").to.be.eql(item_refProperties_title_actual);\r",
									"    pm.expect(item_refProperties_type_expected, \"authzRoles->ref property->type values did not match\").to.be.eql(item_refProperties_type_actual);\r",
									"    pm.expect(item_refProperties_Properties_id_desc_expected, \"authzRoles->ref property->id->description values did not match\").to.be.eql(item_refProperties_Properties_id_desc_actual);\r",
									"    pm.expect(item_refProperties_Properties_id_type_expected, \"authzRoles->ref property->property->id->type values did not match\").to.be.eql(item_refProperties_Properties_id_type_actual);\r",
									"\r",
									"    if (item_resourceCollection_expected.length == item_resourceCollection_actual.length) {\r",
									"        for (let index = 0; index < item_resourceCollection_actual.length; index++) {\r",
									"            pm.expect(utils.compare.deepEqual(item_resourceCollection_expected[index], item_resourceCollection_actual[index]), 'resourceCollection object did not match').to.be.true;\r",
									"        }\r",
									"    }\r",
									"    else\r",
									"        pm.expect(item_resourceCollection_expected.length, 'resourceCollection object did not match').to.be.eql(item_resourceCollection_actual.length)\r",
									"\r",
									"    pm.expect(item_reversePropertyName_expected, \"authzRoles->item->reversePropertyName values did not match\").to.be.eql(item_reversePropertyName_actual);\r",
									"    pm.expect(item_reverseRelationship_expected, \"authzRoles->item->reverseRelationship values did not match\").to.be.eql(item_reverseRelationship_actual);\r",
									"    pm.expect(item_title_expected, \"authzRoles->item->title values did not match\").to.be.eql(item_title_actual);\r",
									"    pm.expect(item_type_expected, \"authzRoles->item->type values did not match\").to.be.eql(item_type_actual);\r",
									"\r",
									"    pm.expect(item_validate_expected, \"authzRoles->item->validate values did not match\").to.be.eql(item_validate_actual);\r",
									"    pm.expect(returnByDefault_expected, \"authzRoles->returnByDefault values did not match\").to.be.eql(returnByDefault_actual);\r",
									"\r",
									"    if (title_actual)\r",
									"        pm.expect(title_expected, \"authzRoles title values did not match\").to.be.eql(title_actual);\r",
									"    else\r",
									"        pm.expect(title_expected, \"authzRoles title values did not match\").to.be.empty\r",
									"\r",
									"    pm.expect(type_expected, \"authzRoles->type values did not match\").to.be.eql(type_expected);\r",
									"\r",
									"    if (usageDescription_actual)\r",
									"        pm.expect(usageDescription_expected, \"authzRoles -> usageDescription values did not match\").to.be.eql(usageDescription_actual);\r",
									"    else\r",
									"        pm.expect(usageDescription_expected, \"authzRoles -> usageDescription values did not match\").to.be.empty\r",
									"\r",
									"    pm.expect(userEditable_expected, \"authzRoles userEditable values did not match\").to.be.eql(userEditable_actual);\r",
									"    pm.expect(viewable_expected, \"authzRoles viewable values did not match\").to.be.eql(viewable_actual);\r",
									"});\r",
									"\r",
									"\r",
									"//validate aplpha user schema attributes order property - city\r",
									"pm.test(\"validate alpha_user objects schema's property `city` config \", () => {\r",
									"\r",
									"    const cityObj_actual = jsonData.objects[alpha_user_Obj_index].schema.properties.city;\r",
									"    const cityObj_expected = JSON.parse(pm.collectionVariables.get(\"alpha_user_Obj_schema_property_city\"));\r",
									"\r",
									"    pm.expect(utils.compare.deepEqual(cityObj_actual, cityObj_expected), `alpha user property city object did not match\r",
									"    Actual => ${JSON.stringify(cityObj_actual)}\r",
									"    expected => ${JSON.stringify(cityObj_expected)}`).to.be.true;\r",
									"});\r",
									"\r",
									"//validate aplpha user schema attributes order property - common name\r",
									"pm.test(\"validate alpha_user objects schema's property `cn` config \", () => {\r",
									"\r",
									"    const cnObj_actual = jsonData.objects[alpha_user_Obj_index].schema.properties.cn;\r",
									"    const cnObj_expected = JSON.parse(pm.collectionVariables.get(\"alpha_user_Obj_schema_property_cn\"));\r",
									"\r",
									"    pm.expect(utils.compare.deepEqual(cnObj_actual, cnObj_expected),  `alpha user property cn object did not match\r",
									"    Actual => ${JSON.stringify(cnObj_actual)}\r",
									"    expected => ${JSON.stringify(cnObj_expected)}`).to.be.true;\r",
									"});\r",
									"\r",
									"//validate aplpha user schema attributes order property - consentedMappings\r",
									"pm.test(\"validate alpha_user objects schema's property `consentedMappings` config \", () => {\r",
									"\r",
									"    const consentedMappingsObj_actual = jsonData.objects[alpha_user_Obj_index].schema.properties.consentedMappings;\r",
									"    const consentedMappingsObj_expected = JSON.parse(pm.collectionVariables.get(\"alpha_user_Obj_schema_property_consentedMappings\"));\r",
									"\r",
									"    pm.expect(utils.compare.deepEqual(consentedMappingsObj_actual, consentedMappingsObj_expected),  `alpha user property consentedMappings object did not match\r",
									"    Actual => ${JSON.stringify(consentedMappingsObj_actual)}\r",
									"    expected => ${JSON.stringify(consentedMappingsObj_expected)}`).to.be.true;\r",
									"});\r",
									"\r",
									"//validate aplpha user schema attributes order property - country\r",
									"pm.test(\"validate alpha_user objects schema's property `country` config \", () => {\r",
									"\r",
									"    const countryObj_actual = jsonData.objects[alpha_user_Obj_index].schema.properties.country;\r",
									"    const countryObj_expected = JSON.parse(pm.collectionVariables.get(\"alpha_user_Obj_schema_property_country\"));\r",
									"\r",
									"    pm.expect(utils.compare.deepEqual(countryObj_actual, countryObj_expected), `alpha user property country object did not match\r",
									"    Actual => ${JSON.stringify(countryObj_actual)}\r",
									"    expected => ${JSON.stringify(countryObj_expected)}`).to.be.true;\r",
									"});\r",
									"\r",
									"//validate aplpha user schema attributes order property - description\r",
									"pm.test(\"validate alpha_user objects schema's property `description` config \", () => {\r",
									"\r",
									"    const descriptionObj_actual = jsonData.objects[alpha_user_Obj_index].schema.properties.description;\r",
									"    const descriptionObj_expected = JSON.parse(pm.collectionVariables.get(\"alpha_user_Obj_schema_property_description\"));\r",
									"\r",
									"    pm.expect(utils.compare.deepEqual(descriptionObj_actual, descriptionObj_expected), `alpha user property description object did not match\r",
									"    Actual => ${JSON.stringify(descriptionObj_actual)}\r",
									"    expected => ${JSON.stringify(descriptionObj_expected)}`).to.be.true;\r",
									"});\r",
									"\r",
									"//validate aplpha user schema attributes order property - effectiveAssignments\r",
									"pm.test(\"validate alpha_user objects schema's property `effectiveAssignments` config \", () => {\r",
									"\r",
									"    const effectiveAssignmentsObj_actual = jsonData.objects[alpha_user_Obj_index].schema.properties.effectiveAssignments;\r",
									"    const effectiveAssignmentsObj_expected = JSON.parse(pm.collectionVariables.get(\"alpha_user_Obj_schema_property_effectiveAssignments\"));\r",
									"\r",
									"    pm.expect(utils.compare.deepEqual(effectiveAssignmentsObj_actual, effectiveAssignmentsObj_expected), `alpha user property effectiveAssignments object did not match\r",
									"    Actual => ${JSON.stringify(effectiveAssignmentsObj_actual)}\r",
									"    expected => ${JSON.stringify(effectiveAssignmentsObj_expected)}`).to.be.true;\r",
									"});\r",
									"\r",
									"//validate aplpha user schema attributes order property - effectiveRoles\r",
									"pm.test(\"validate alpha_user objects schema's property `effectiveRoles` config \", () => {\r",
									"\r",
									"    const effectiveRolesObj_actual = jsonData.objects[alpha_user_Obj_index].schema.properties.effectiveRoles;\r",
									"    const effectiveRolesObj_expected = JSON.parse(pm.collectionVariables.get(\"alpha_user_Obj_schema_property_effectiveRoles\"));\r",
									"\r",
									"    pm.expect(utils.compare.deepEqual(effectiveRolesObj_actual, effectiveRolesObj_expected), `alpha user property effectiveRoles object did not match\r",
									"    Actual => ${JSON.stringify(effectiveRolesObj_actual)}\r",
									"    expected => ${JSON.stringify(effectiveRolesObj_expected)}`).to.be.true;\r",
									"});\r",
									"\r",
									"//validate aplpha user schema attributes order property - givenName\r",
									"pm.test(\"validate alpha_user objects schema's property `givenName` config \", () => {\r",
									"\r",
									"    const givenNameObj_actual = jsonData.objects[alpha_user_Obj_index].schema.properties.givenName;\r",
									"    const givenNameObj_expected = JSON.parse(pm.collectionVariables.get(\"alpha_user_Obj_schema_property_givenName\"));\r",
									"\r",
									"    pm.expect(utils.compare.deepEqual(givenNameObj_actual, givenNameObj_expected), `alpha user property givenName object did not match\r",
									"    Actual => ${JSON.stringify(givenNameObj_actual)}\r",
									"    expected => ${JSON.stringify(givenNameObj_expected)}`).to.be.true;\r",
									"});\r",
									"\r",
									"//validate aplpha user schema attributes order property - isAuthorisedUserOf\r",
									"pm.test(\"validate alpha_user objects schema's property `isAuthorisedUserOf` config \", () => {\r",
									"\r",
									"    const isAuthorisedUserOfObj_actual = jsonData.objects[alpha_user_Obj_index].schema.properties.isAuthorisedUserOf;\r",
									"    const isAuthorisedUserOfObj_expected = JSON.parse(pm.collectionVariables.get(\"alpha_user_Obj_schema_property_isAuthorisedUserOf\"));\r",
									"\r",
									"    pm.expect(utils.compare.deepEqual(isAuthorisedUserOfObj_actual, isAuthorisedUserOfObj_expected), `alpha user property isAuthorisedUserOf object did not match\r",
									"    Actual => ${JSON.stringify(isAuthorisedUserOfObj_actual)}\r",
									"    expected => ${JSON.stringify(isAuthorisedUserOfObj_expected)}`).to.be.true;\r",
									"});\r",
									"\r",
									"//validate aplpha user schema attributes order property - kbaInfo\r",
									"pm.test(\"validate alpha_user objects schema's property `kbaInfo` config \", () => {\r",
									"\r",
									"    const kbaInfoObj_actual = jsonData.objects[alpha_user_Obj_index].schema.properties.kbaInfo;\r",
									"    const kbaInfoObj_expected = JSON.parse(pm.collectionVariables.get(\"alpha_user_Obj_schema_property_kbaInfo\"));\r",
									"\r",
									"    pm.expect(utils.compare.deepEqual(kbaInfoObj_actual, kbaInfoObj_expected), `alpha user property kbaInfo object did not match\r",
									"    Actual => ${JSON.stringify(kbaInfoObj_actual)}\r",
									"    expected => ${JSON.stringify(kbaInfoObj_expected)}`).to.be.true;\r",
									"});\r",
									"\r",
									"//validate aplpha user schema attributes order property - lastSync\r",
									"pm.test(\"validate alpha_user objects schema's property `lastSync` config \", () => {\r",
									"\r",
									"    const lastSyncObj_actual = jsonData.objects[alpha_user_Obj_index].schema.properties.lastSync;\r",
									"    const lastSyncObj_expected = JSON.parse(pm.collectionVariables.get(\"alpha_user_Obj_schema_property_lastSync\"));\r",
									"\r",
									"    pm.expect(utils.compare.deepEqual(lastSyncObj_actual, lastSyncObj_expected), `alpha user property lastSync object did not match\r",
									"    Actual => ${JSON.stringify(lastSyncObj_actual)}\r",
									"    expected => ${JSON.stringify(lastSyncObj_expected)}`).to.be.true;\r",
									"});\r",
									"\r",
									"//validate aplpha user schema attributes order property - mail\r",
									"pm.test(\"validate alpha_user objects schema's property `mail` config \", () => {\r",
									"\r",
									"    const mailObj_actual = jsonData.objects[alpha_user_Obj_index].schema.properties.mail;\r",
									"    const mailObj_expected = JSON.parse(pm.collectionVariables.get(\"alpha_user_Obj_schema_property_mail\"));\r",
									"\r",
									"    pm.expect(utils.compare.deepEqual(mailObj_actual, mailObj_expected), `alpha user property mail object did not match\r",
									"    Actual => ${JSON.stringify(mailObj_actual)}\r",
									"    expected => ${JSON.stringify(mailObj_expected)}`).to.be.true;\r",
									"});\r",
									"\r",
									"//validate aplpha user schema attributes order property - manager\r",
									"pm.test(\"validate alpha_user objects schema's property `manager` config \", () => {\r",
									"\r",
									"    const managerObj_actual = jsonData.objects[alpha_user_Obj_index].schema.properties.manager;\r",
									"    const managerObj_expected = JSON.parse(pm.collectionVariables.get(\"alpha_user_Obj_schema_property_manager\"));\r",
									"\r",
									"    pm.expect(utils.compare.deepEqual(managerObj_actual, managerObj_expected), `alpha user property manager object did not match\r",
									"    Actual => ${JSON.stringify(managerObj_actual)}\r",
									"    expected => ${JSON.stringify(managerObj_expected)}`).to.be.true;\r",
									"});\r",
									"\r",
									"\r",
									"//validate aplpha user schema attributes order property - password\r",
									"pm.test(\"validate alpha_user objects schema's property `password` config \", () => {\r",
									"\r",
									"    const passwordObj_actual = jsonData.objects[alpha_user_Obj_index].schema.properties.password;\r",
									"    const passwordObj_expected = JSON.parse(pm.collectionVariables.get(\"alpha_user_Obj_schema_property_password\"));\r",
									"\r",
									"    pm.expect(utils.compare.deepEqual(passwordObj_actual, passwordObj_expected), `alpha user property password object did not match\r",
									"    Actual => ${JSON.stringify(passwordObj_actual)}\r",
									"    expected => ${JSON.stringify(passwordObj_expected)}`).to.be.true;\r",
									"});\r",
									"\r",
									"//validate aplpha user schema attributes order property - postalAddress\r",
									"pm.test(\"validate alpha_user objects schema's property `postalAddress` config \", () => {\r",
									"\r",
									"    const postalAddressObj_actual = jsonData.objects[alpha_user_Obj_index].schema.properties.postalAddress;\r",
									"    const postalAddressObj_expected = JSON.parse(pm.collectionVariables.get(\"alpha_user_Obj_schema_property_postalAddress\"));\r",
									"\r",
									"    pm.expect(utils.compare.deepEqual(postalAddressObj_actual, postalAddressObj_expected),`alpha user property postalAddress object did not match\r",
									"    Actual => ${JSON.stringify(postalAddressObj_actual)}\r",
									"    expected => ${JSON.stringify(postalAddressObj_expected)}`).to.be.true;\r",
									"});\r",
									"\r",
									"//validate aplpha user schema attributes order property - postalCode\r",
									"pm.test(\"validate alpha_user objects schema's property `postalCode` config \", () => {\r",
									"\r",
									"    const postalCodeObj_actual = jsonData.objects[alpha_user_Obj_index].schema.properties.postalCode;\r",
									"    const postalCodeObj_expected = JSON.parse(pm.collectionVariables.get(\"alpha_user_Obj_schema_property_postalCode\"));\r",
									"\r",
									"    pm.expect(utils.compare.deepEqual(postalCodeObj_actual, postalCodeObj_expected),`alpha user property postalCode object did not match\r",
									"    Actual => ${JSON.stringify(postalCodeObj_actual)}\r",
									"    expected => ${JSON.stringify(postalCodeObj_expected)}`).to.be.true;\r",
									"});\r",
									"\r",
									"//validate aplpha user schema attributes order property - preferences\r",
									"pm.test(\"validate alpha_user objects schema's property `preferences` config \", () => {\r",
									"\r",
									"    const preferencesObj_actual = jsonData.objects[alpha_user_Obj_index].schema.properties.preferences;\r",
									"    const preferencesObj_expected = JSON.parse(pm.collectionVariables.get(\"alpha_user_Obj_schema_property_preferences\"));\r",
									"\r",
									"    pm.expect(utils.compare.deepEqual(preferencesObj_actual, preferencesObj_expected),`alpha user property preferences object did not match\r",
									"    Actual => ${JSON.stringify(preferencesObj_actual)}\r",
									"    expected => ${JSON.stringify(preferencesObj_expected)}`).to.be.true;\r",
									"});\r",
									"\r",
									"//validate aplpha user schema attributes order property - reports\r",
									"pm.test(\"validate alpha_user objects schema's property `reports` config \", () => {\r",
									"\r",
									"    const reportsObj_actual = jsonData.objects[alpha_user_Obj_index].schema.properties.reports;\r",
									"    const reportsObj_expected = JSON.parse(pm.collectionVariables.get(\"alpha_user_Obj_schema_property_reports\"));\r",
									"\r",
									"    pm.expect(utils.compare.deepEqual(reportsObj_actual, reportsObj_expected), `alpha user property reports object did not match\r",
									"    Actual => ${JSON.stringify(reportsObj_actual)}\r",
									"    expected => ${JSON.stringify(reportsObj_expected)}`).to.be.true;\r",
									"});\r",
									"\r",
									"//validate aplpha user schema attributes order property - roles\r",
									"pm.test(\"validate alpha_user objects schema's property `roles` config \", () => {\r",
									"\r",
									"    const rolesObj_actual = jsonData.objects[alpha_user_Obj_index].schema.properties.roles;\r",
									"    const rolesObj_expected = JSON.parse(pm.collectionVariables.get(\"alpha_user_Obj_schema_property_roles\"));\r",
									"\r",
									"    pm.expect(utils.compare.deepEqual(rolesObj_actual, rolesObj_expected), `alpha user property roles object did not match\r",
									"    Actual => ${JSON.stringify(rolesObj_actual)}\r",
									"    expected => ${JSON.stringify(rolesObj_expected)}`).to.be.true;\r",
									"});\r",
									"\r",
									"//validate aplpha user schema attributes order property - sn\r",
									"pm.test(\"validate alpha_user objects schema's property `sn` config \", () => {\r",
									"\r",
									"    const snObj_actual = jsonData.objects[alpha_user_Obj_index].schema.properties.sn;\r",
									"    const snObj_expected = JSON.parse(pm.collectionVariables.get(\"alpha_user_Obj_schema_property_sn\"));\r",
									"\r",
									"    pm.expect(utils.compare.deepEqual(snObj_actual, snObj_expected), `alpha user property sn object did not match \r",
									"    Actual => ${JSON.stringify(snObj_actual)}\r",
									"    expected => ${JSON.stringify(snObj_expected)}`).to.be.true;  \r",
									"});\r",
									"\r",
									"//validate aplpha user schema attributes order property - stateProvince\r",
									"pm.test(\"validate alpha_user objects schema's property `stateProvince` config \", () => {\r",
									"\r",
									"    const stateProvinceObj_actual = jsonData.objects[alpha_user_Obj_index].schema.properties.stateProvince;\r",
									"    const stateProvinceObj_expected = JSON.parse(pm.collectionVariables.get(\"alpha_user_Obj_schema_property_stateProvince\"));\r",
									"\r",
									"    pm.expect(utils.compare.deepEqual(stateProvinceObj_actual, stateProvinceObj_expected), `alpha user property stateProvince object did not match \r",
									"    Actual => ${JSON.stringify(stateProvinceObj_actual)}\r",
									"    expected => ${JSON.stringify(stateProvinceObj_expected)}`).to.be.true;\r",
									"});\r",
									"\r",
									"//validate aplpha user schema attributes order property - telephoneNumber\r",
									"pm.test(\"validate alpha_user objects schema's property `telephoneNumber` config \", () => {\r",
									"\r",
									"    const telephoneNumberObj_actual = jsonData.objects[alpha_user_Obj_index].schema.properties.telephoneNumber;\r",
									"    const telephoneNumberObj_expected = JSON.parse(pm.collectionVariables.get(\"alpha_user_Obj_schema_property_telephoneNumber\"));\r",
									"\r",
									"    pm.expect(utils.compare.deepEqual(telephoneNumberObj_actual, telephoneNumberObj_expected), `alpha user property telephoneNumber object did not match\r",
									"    Actual => ${JSON.stringify(telephoneNumberObj_actual)}\r",
									"    Expected => ${JSON.stringify(telephoneNumberObj_expected)}`).to.be.true;\r",
									"});\r",
									"\r",
									"//validate aplpha user schema attributes order property - userName\r",
									"pm.test(\"validate alpha_user objects schema's property `userName` config \", () => {\r",
									"\r",
									"    const userNameObj_actual = jsonData.objects[alpha_user_Obj_index].schema.properties.userName;\r",
									"    const userNameObj_expected = JSON.parse(pm.collectionVariables.get(\"alpha_user_Obj_schema_property_userName\"));\r",
									"\r",
									"    pm.expect(utils.compare.deepEqual(userNameObj_actual, userNameObj_expected), `alpha user property userName object did not match \r",
									"    Actual => ${JSON.stringify(userNameObj_actual)}\r",
									"    expected => ${JSON.stringify(userNameObj_expected)}`).to.be.true;\r",
									"});\r",
									"\r",
									"//validate aplpha user - correct fields are marked as required\r",
									"pm.test(\"validate alpha_user -> correct fields are marked as required \", () => {\r",
									"\r",
									"    const requiredFields_actual = jsonData.objects[alpha_user_Obj_index].schema.required;\r",
									"    const requiredFields_expected = JSON.parse(\"[\" + pm.collectionVariables.get(\"alpha_user_Obj_schema_requiredFields\") + \"]\");\r",
									"\r",
									"    for (index = 0; index < requiredFields_actual.length; index++) {\r",
									"       \r",
									"        pm.expect(requiredFields_actual[index], `alpha user -> incorrect fields are marked as required \\n\r",
									"        Actual => ${requiredFields_actual} \\n\r",
									"        Expected => ${requiredFields_expected} \\n`).to.be.eql(requiredFields_expected[index]);\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"validate alpha_user -> last login property has correct config \", () => {\r",
									"\r",
									"    const lastLogin_actual = jsonData.objects[alpha_user_Obj_index].schema.properties.frIndexedDate1;\r",
									"    const lastLogin_expected = JSON.parse(pm.collectionVariables.get(\"alpha_user_Obj_schema_property_lastLogin\"));\r",
									"\r",
									"    pm.expect(utils.compare.deepEqual(lastLogin_actual, lastLogin_expected), `alpha user property Last Login object did not match \r",
									"    Actual => ${JSON.stringify(lastLogin_actual)}\r",
									"    expected => ${JSON.stringify(lastLogin_expected)}`).to.be.true;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {
							"content-type": true,
							"content-length": true,
							"connection": true,
							"accept-encoding": true,
							"accept": true,
							"user-agent": true
						}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{platformUrl}}/openidm/config/managed",
							"host": [
								"{{platformUrl}}"
							],
							"path": [
								"openidm",
								"config",
								"managed"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "noauth"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Auth Tree",
			"item": [
				{
					"name": "Registration",
					"item": [
						{
							"name": "Authentication to Top-Level Realm",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const JSONResponse = JSON.parse(responseBody);",
											"",
											"// Did request have a callback?",
											"if(JSONResponse.authId && JSONResponse.authId != \"\")",
											"{",
											"  // Set `authId` variable",
											"  pm.environment.set(\"authId\", JSONResponse.authId);",
											"}",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"description": "The media type of the resource.",
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"description": "This collection documents version 2.1 of the authentication resource.",
										"key": "Accept-API-Version",
										"value": "resource=2.1",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/authenticate",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"authenticate"
									]
								},
								"description": "To get started, request the callbacks from the top-level realm."
							},
							"response": []
						},
						{
							"name": "Authenticate as ID Cloud Admin and Get Session Token, and Cookie Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const JSONResponse = JSON.parse(responseBody);",
											"",
											"// Did request return SSO Token?",
											"if(JSONResponse.tokenId && JSONResponse.tokenId != \"\")",
											"{",
											"  // Set `session token` variable",
											"  pm.environment.set(\"session_token\", JSONResponse.tokenId);",
											"",
											"  // Remove `authId` variable",
											"  pm.environment.unset(\"authId\");",
											"",
											"}",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"description": "Specifies that the `/json/authenticate` endpoint uses JSON format for requests.",
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"description": "Specifies the version of the `/json/authenticate` endpoint to use.",
										"key": "Accept-API-Version",
										"value": "resource=2.1, protocol=1.0",
										"disabled": true
									},
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"authId\": \"{{authId}}\",\n    \"callbacks\": [\n        {\n            \"type\": \"NameCallback\",\n            \"output\": [\n                {\n                    \"name\": \"prompt\",\n                    \"value\": \"User Name\"\n                }\n            ],\n            \"input\": [\n                {\n                    \"name\": \"IDToken1\",\n                    \"value\": \"{{IDCloudAdminUsername}}\"\n                }\n            ],\n            \"_id\": 0\n        },\n        {\n            \"type\": \"PasswordCallback\",\n            \"output\": [\n                {\n                    \"name\": \"prompt\",\n                    \"value\": \"Password\"\n                }\n            ],\n            \"input\": [\n                {\n                    \"name\": \"IDToken2\",\n                    \"value\": \"{{IDCloudAdminPassword}}\"\n                }\n            ],\n            \"_id\": 1\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platformUrl}}/am/json/authenticate",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"authenticate"
									]
								},
								"description": "Return the callback, specifying the credentials of an administrative user.\nThis request obtains the name used in headers to specify the session token. To manually provide the session token name, in the ID Cloud console, navigate to **Tenant Settings**, and copy the *Cookie Name* value. Use this value in the `cookieName` variable in your Postman Collection."
							},
							"response": []
						},
						{
							"name": "CHVerifyReg",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = JSON.parse(responseBody);\r",
											"\r",
											"    //actual\r",
											"    const _id_actual = jsonData._id;\r",
											"    const description_actual = jsonData.description\r",
											"    const entryNodeId_actual = jsonData.entryNodeId\r",
											"    const identityResource_actual = jsonData.identityResource\r",
											"\r",
											"    //expected\r",
											"    const _id_expected = pm.collectionVariables.get(\"AuthTree_CHVerifyReg_id\");\r",
											"    const description_expected = pm.collectionVariables.get(\"AuthTree_CHVerifyReg_description\");\r",
											"    const entryNodeId_expected = pm.collectionVariables.get(\"AuthTree_CHVerifyReg_entryNode\");\r",
											"    const identityResource_expected = pm.collectionVariables.get(\"AuthTree_CHVerifyReg_identityResource\");\r",
											"\r",
											"    let utils = eval(environment.utils)();\r",
											"\r",
											"//validating auth-tree CH Registration id\r",
											"pm.test(\"Auth Tree CHVerifyReg response contains correct _id\", () => {\r",
											"    pm.expect(_id_expected, 'CHVerifyReg _id did not match').to.be.eql(_id_actual);\r",
											"});\r",
											"\r",
											"//validating auth-tree CH Registration description\r",
											"pm.test(\"Auth Tree CHVerifyReg response contains correct description\", () => {\r",
											"    pm.expect(description_expected, 'CHVerifyReg -> description did not match').to.be.eql(description_actual);\r",
											"});\r",
											"\r",
											"//validating auth-tree CH Registration entry node Id\r",
											"pm.test(\"Auth Tree CHVerifyReg response contains correct entry node Id\", () => {\r",
											"    pm.expect(entryNodeId_expected, 'CHVerifyReg -> entry node Id did not match').to.be.eql(entryNodeId_actual);\r",
											"});\r",
											"\r",
											"//validating auth-tree CH Registration identity resource\r",
											"pm.test(\"Auth Tree CHVerifyReg response contains correct identity resource\", () => {\r",
											"    pm.expect(identityResource_actual, 'CHVerifyReg -> identity resource did not match').to.be.eql(identityResource_expected);\r",
											"});\r",
											"\r",
											"//validating auth-tree CH Registration contains correct number of nodes\r",
											"pm.test(\"Validate auth Tree CHVerifyReg contains correct number of nodes \", () => {\r",
											"    const totalNodes_length_actual = Object.keys(jsonData.nodes).length;\r",
											"    const totalNodes_length_expected = parseInt(pm.collectionVariables.get(\"AuthTree_CHVerifyReg_nodes_count\"));\r",
											"\r",
											"    //validate total number of nodes \r",
											"    pm.expect(totalNodes_length_expected, \" Incorrect number of nodes in the auth tree\").to.be.eql(totalNodes_length_actual)\r",
											"});\r",
											"\r",
											"//validating auth-tree CH Registration node create users\r",
											"pm.test(\"Validate auth Tree CHVerifyReg -> Node -> create users entries \", () => {\r",
											"    const createUser_id = pm.collectionVariables.get(\"AuthTree_CHVerifyReg_nodes_createUser_id\");\r",
											"    const createUser_actual = jsonData.nodes[createUser_id];\r",
											"    const createUser_expected = JSON.parse(pm.collectionVariables.get(\"AuthTree_CHVerifyReg_nodes_createUser\"));\r",
											"   \r",
											"        pm.expect(utils.compare.deepEqualAuthTree(createUser_actual,createUser_expected), `Auth Tree CHVerifyReg -> Node -> Create User node has incorrect entries.\r",
											"            Expected => ${JSON.stringify(createUser_expected)}   \r",
											"            Actual => ${JSON.stringify(createUser_actual)}`).to.be.true;\r",
											"});\r",
											"\r",
											"//validating auth-tree CH Registration node Verify Reg Token\r",
											"pm.test(\"Validate auth Tree CHVerifyReg -> Node -> Verify Reg Token entries \", () => {\r",
											"    const verifyRegToken_id = pm.collectionVariables.get(\"AuthTree_CHVerifyReg_nodes_verifyRegToken_id\");\r",
											"    const verifyRegToken_actual = jsonData.nodes[verifyRegToken_id];\r",
											"    const verifyRegToken_expected = JSON.parse(pm.collectionVariables.get(\"AuthTree_CHVerifyReg_nodes_verifyRegToken\"));\r",
											"   \r",
											"        pm.expect(utils.compare.deepEqualAuthTree(verifyRegToken_actual,verifyRegToken_expected), `Auth Tree CHVerifyReg -> Node -> Verify Reg Token node has incorrect entries.\r",
											"            Expected => ${JSON.stringify(verifyRegToken_expected)}   \r",
											"            Actual => ${JSON.stringify(verifyRegToken_actual)}`).to.be.true;\r",
											"});\r",
											"\r",
											"//validating auth-tree CH Registration node OTP Not Valid   \r",
											"pm.test(\"Validate auth Tree CHVerifyReg -> Node -> Identify Existing User entries \", () => {\r",
											"    const identifyExistingUser_id = pm.collectionVariables.get(\"AuthTree_CHVerifyReg_node_identifyExistingUser_id\");\r",
											"    const identifyExistingUser_actual = jsonData.nodes[identifyExistingUser_id];\r",
											"    const identifyExistingUser_expected = JSON.parse(pm.collectionVariables.get(\"AuthTree_CHVerifyReg_node_identifyExistingUser\"));\r",
											"   \r",
											"        pm.expect(utils.compare.deepEqualAuthTree(identifyExistingUser_actual,identifyExistingUser_expected), `Auth Tree CHVerifyReg -> Node -> Identify Existing User has incorrect entries.\r",
											"            Expected => ${JSON.stringify(identifyExistingUser_expected)}   \r",
											"            Actual => ${JSON.stringify(identifyExistingUser_actual)}`).to.be.true;\r",
											"});\r",
											"\r",
											"//validating auth-tree CH Registration node Callback Existing User  \r",
											"pm.test(\"Validate auth Tree CHVerifyReg -> Node -> Callback Existing User entries \", () => {\r",
											"    const callbackExistingUser_id = pm.collectionVariables.get(\"AuthTree_CHVerifyReg_node_callbackExistingUser_id\");\r",
											"    const callbackExistingUser_actual = jsonData.nodes[callbackExistingUser_id];\r",
											"    const callbackExistingUser_expected = JSON.parse(pm.collectionVariables.get(\"AuthTree_CHVerifyReg_node_callbackExistingUser\"));\r",
											"   \r",
											"        pm.expect(utils.compare.deepEqualAuthTree(callbackExistingUser_actual,callbackExistingUser_expected), `Auth Tree CHVerifyReg -> Node -> Callback Existing User has incorrect entries.\r",
											"            Expected => ${JSON.stringify(callbackExistingUser_expected)}   \r",
											"            Actual => ${JSON.stringify(callbackExistingUser_actual)}`).to.be.true;\r",
											"});\r",
											"\r",
											"//validating auth-tree CH Registration node Password Collector\r",
											"pm.test(\"Validate auth Tree CHVerifyReg -> Node -> Password Collector entries \", () => {\r",
											"    const passwordCollector_id = pm.collectionVariables.get(\"AuthTree_CHVerifyReg_node_passwordCollector_id\");\r",
											"    const passwordCollector_actual = jsonData.nodes[passwordCollector_id];\r",
											"    const passwordCollector_expected = JSON.parse(pm.collectionVariables.get(\"AuthTree_CHVerifyReg_node_passwordCollector\"));\r",
											"   \r",
											"        pm.expect(utils.compare.deepEqualAuthTree(passwordCollector_actual,passwordCollector_expected), `Auth Tree CHVerifyReg -> Node -> Password Collector has incorrect entries.\r",
											"            Expected => ${JSON.stringify(passwordCollector_expected)}   \r",
											"            Actual => ${JSON.stringify(passwordCollector_actual)}`).to.be.true;\r",
											"});\r",
											"\r",
											"//validating auth-tree CH Registration node OTP Not Valid   \r",
											"pm.test(\"Validate auth Tree CHVerifyReg -> Node -> Identify Existing User (last node) entries \", () => {\r",
											"    const identifyExistingUser_id = pm.collectionVariables.get(\"AuthTree_CHVerifyReg_node_identifyExistingUser1_id\");\r",
											"    const identifyExistingUser_actual = jsonData.nodes[identifyExistingUser_id];\r",
											"    const identifyExistingUser_expected = JSON.parse(pm.collectionVariables.get(\"AuthTree_CHVerifyReg_node_identifyExistingUser1\"));\r",
											"   \r",
											"        pm.expect(utils.compare.deepEqualAuthTree(identifyExistingUser_actual,identifyExistingUser_expected), `Auth Tree CHVerifyReg -> Node -> Identify Existing User has incorrect entries.\r",
											"            Expected => ${JSON.stringify(identifyExistingUser_expected)}   \r",
											"            Actual => ${JSON.stringify(identifyExistingUser_actual)}`).to.be.true;\r",
											"});\r",
											"\r",
											"//validating auth-tree CH Registration static nodes\r",
											"pm.test(\"Validate auth Tree CHVerifyReg -> Node -> static nodes entries \", () => {\r",
											"    const staticNode_actual = jsonData.staticNodes;\r",
											"    const staticNode_expected = JSON.parse(pm.collectionVariables.get(\"AuthTree_CHVerifyReg_node_static\"));\r",
											"   \r",
											"        pm.expect(utils.compare.deepEqualAuthTree(staticNode_expected,staticNode_actual), `Auth Tree CHVerifyReg -> Node -> static nodes has incorrect entries.\r",
											"            Expected => ${JSON.stringify(staticNode_expected)}   \r",
											"            Actual => ${JSON.stringify(staticNode_actual)}`).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/realm-config/authentication/authenticationtrees/trees/{{AuthTree_CHVerifyReg_id}}",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"realm-config",
										"authentication",
										"authenticationtrees",
										"trees",
										"{{AuthTree_CHVerifyReg_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "CHRegistration",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = JSON.parse(responseBody);\r",
											"\r",
											"    //actual\r",
											"    const _id_actual = jsonData._id;\r",
											"    const description_actual = jsonData.description\r",
											"    const entryNodeId_actual = jsonData.entryNodeId\r",
											"    const identityResource_actual = jsonData.identityResource\r",
											"\r",
											"    //expected\r",
											"    const _id_expected = pm.collectionVariables.get(\"AuthTree_CHRegistration_id\");\r",
											"    const description_expected = pm.collectionVariables.get(\"AuthTree_CHRegistration_description\");\r",
											"    const entryNodeId_expected = pm.collectionVariables.get(\"AuthTree_CHRegistration_entryNode\");\r",
											"    const identityResource_expected = pm.collectionVariables.get(\"AuthTree_CHRegistration_identityResource\");\r",
											"\r",
											"    let utils = eval(environment.utils)();\r",
											"\r",
											"//validating auth-tree CH Registration id\r",
											"pm.test(\"Auth Tree CHRegistration response contains correct _id\", () => {\r",
											"    pm.expect(_id_expected, 'CHRegistration _id did not match').to.be.eql(_id_actual);\r",
											"});\r",
											"\r",
											"//validating auth-tree CH Registration description\r",
											"pm.test(\"Auth Tree CHRegistration response contains correct description\", () => {\r",
											"    pm.expect(description_expected, 'CHRegistration -> description did not match').to.be.eql(description_actual);\r",
											"});\r",
											"\r",
											"//validating auth-tree CH Registration entry node Id\r",
											"pm.test(\"Auth Tree CHRegistration response contains correct entry node Id\", () => {\r",
											"    pm.expect(entryNodeId_expected, 'CHRegistration -> entry node Id did not match').to.be.eql(entryNodeId_actual);\r",
											"});\r",
											"\r",
											"//validating auth-tree CH Registration identity resource\r",
											"pm.test(\"Auth Tree CHRegistration response contains correct identity resource\", () => {\r",
											"    pm.expect(identityResource_actual, 'CHRegistration -> identity resource did not match').to.be.eql(identityResource_expected);\r",
											"});\r",
											"\r",
											"//validating auth-tree CH Registration contains correct number of nodes\r",
											"pm.test(\"Validate auth Tree CHRegistration contains correct number of nodes \", () => {\r",
											"    const totalNodes_length_actual = Object.keys(jsonData.nodes).length;\r",
											"    const totalNodes_length_expected = parseInt(pm.collectionVariables.get(\"AuthTree_CHRegistration_nodes_count\"));\r",
											"\r",
											"    //validate total number of nodes \r",
											"    pm.expect(totalNodes_length_expected, \" Incorrect number of nodes in the auth tree\").to.be.eql(totalNodes_length_actual)\r",
											"});\r",
											"\r",
											"//validating auth-tree CH Registration node retry limit decision \r",
											"pm.test(\"Validate auth Tree CHRegistration -> Node -> retry limit decision entries \", () => {\r",
											"    const retryLimitDecision_id = pm.collectionVariables.get(\"AuthTree_CHRegistration_nodes_retryLimitDecision_id\");\r",
											"    const retryLimitDecision_actual = jsonData.nodes[retryLimitDecision_id];\r",
											"    const retryLimitDecision_expected = JSON.parse(pm.collectionVariables.get(\"AuthTree_CHRegistration_nodes_retryLimitDecision\"));\r",
											"   \r",
											"        pm.expect(utils.compare.deepEqualAuthTree(retryLimitDecision_actual,retryLimitDecision_expected), `Auth Tree CHRegistration -> Node -> retry limit decision node has incorrect entries.\r",
											"            Expected => ${JSON.stringify(retryLimitDecision_expected)}   \r",
											"            Actual => ${JSON.stringify(retryLimitDecision_actual)}`).to.be.true;\r",
											"});\r",
											"\r",
											"//validating auth-tree CH Registration node HOTP Generator  \r",
											"pm.test(\"Validate auth Tree CHRegistration -> Node -> HOTP Generator entries \", () => {\r",
											"    const HOTPGenerator_id = pm.collectionVariables.get(\"AuthTree_CHRegistration_nodes_HOTPGenerator_id\");\r",
											"    const HOTPGenerator_actual = jsonData.nodes[HOTPGenerator_id];\r",
											"    const HOTPGenerator_expected = JSON.parse(pm.collectionVariables.get(\"AuthTree_CHRegistration_nodes_HOTPGenerator\"));\r",
											"   \r",
											"        pm.expect(utils.compare.deepEqualAuthTree(HOTPGenerator_actual,HOTPGenerator_expected), `Auth Tree CHRegistration -> Node -> HOTP Generator node has incorrect entries.\r",
											"            Expected => ${JSON.stringify(HOTPGenerator_expected)}   \r",
											"            Actual => ${JSON.stringify(HOTPGenerator_actual)}`).to.be.true;\r",
											"});\r",
											"\r",
											"//validating auth-tree CH Registration node OTP Not Valid   \r",
											"pm.test(\"Validate auth Tree CHRegistration -> Node -> OTP Not Valid entries \", () => {\r",
											"    const OTPNotValid_id = pm.collectionVariables.get(\"AuthTree_CHRegistration_node_OTPNotValid_id\");\r",
											"    const OTPNotValid_actual = jsonData.nodes[OTPNotValid_id];\r",
											"    const OTPNotValid_expected = JSON.parse(pm.collectionVariables.get(\"AuthTree_CHRegistration_node_OTPNotValid\"));\r",
											"   \r",
											"        pm.expect(utils.compare.deepEqualAuthTree(OTPNotValid_actual,OTPNotValid_expected), `Auth Tree CHRegistration -> Node -> OTP Not valid has incorrect entries.\r",
											"            Expected => ${JSON.stringify(OTPNotValid_expected)}   \r",
											"            Actual => ${JSON.stringify(OTPNotValid_actual)}`).to.be.true;\r",
											"});\r",
											"\r",
											"//validating auth-tree CH Registration node send OTP  \r",
											"pm.test(\"Validate auth Tree CHRegistration -> Node -> Send OTP entries \", () => {\r",
											"    const SendOTP_id = pm.collectionVariables.get(\"AuthTree_CHRegistration_node_SendOTP_id\");\r",
											"    const SendOTP_actual = jsonData.nodes[SendOTP_id];\r",
											"    const SendOTP_expected = JSON.parse(pm.collectionVariables.get(\"AuthTree_CHRegistration_node_SendOTP\"));\r",
											"   \r",
											"        pm.expect(utils.compare.deepEqualAuthTree(SendOTP_actual,SendOTP_expected), `Auth Tree CHRegistration -> Node -> Send OTP has incorrect entries.\r",
											"            Expected => ${JSON.stringify(SendOTP_expected)}   \r",
											"            Actual => ${JSON.stringify(SendOTP_actual)}`).to.be.true;\r",
											"});\r",
											"\r",
											"//validating auth-tree CH Registration node OTP Page  \r",
											"pm.test(\"Validate auth Tree CHRegistration -> Node -> OTP Page entries \", () => {\r",
											"    const OTPPage_id = pm.collectionVariables.get(\"AuthTree_CHRegistration_node_OTPPage_id\");\r",
											"    const OTPPage_actual = jsonData.nodes[OTPPage_id];\r",
											"    const OTPPage_expected = JSON.parse(pm.collectionVariables.get(\"AuthTree_CHRegistration_node_OTPPage\"));\r",
											"   \r",
											"        pm.expect(utils.compare.deepEqualAuthTree(OTPPage_actual,OTPPage_expected), `Auth Tree CHRegistration -> Node -> OTP Page has incorrect entries.\r",
											"            Expected => ${JSON.stringify(OTPPage_expected)}   \r",
											"            Actual => ${JSON.stringify(OTPPage_actual)}`).to.be.true;\r",
											"});\r",
											"\r",
											"//validating auth-tree CH Registration node create notify JWT SMS\r",
											"pm.test(\"Validate auth Tree CHRegistration -> Node -> Create Notify JWT SMS entries \", () => {\r",
											"    const CreateNotifyJWTSMS_id = pm.collectionVariables.get(\"AuthTree_CHRegistration_node_CreateNotifyJWTSMS_id\");\r",
											"    const CreateNotifyJWTSMS_actual = jsonData.nodes[CreateNotifyJWTSMS_id];\r",
											"    const CreateNotifyJWTSMS_expected = JSON.parse(pm.collectionVariables.get(\"AuthTree_CHRegistration_node_CreateNotifyJWTSMS\"));\r",
											"   \r",
											"        pm.expect(utils.compare.deepEqualAuthTree(CreateNotifyJWTSMS_actual,CreateNotifyJWTSMS_expected), `Auth Tree CHRegistration -> Node -> Create Notify SMS has incorrect entries.\r",
											"            Expected => ${JSON.stringify(CreateNotifyJWTSMS_expected)}   \r",
											"            Actual => ${JSON.stringify(CreateNotifyJWTSMS_actual)}`).to.be.true;\r",
											"});\r",
											"\r",
											"//validating auth-tree CH Registration node create notify JWT Email\r",
											"pm.test(\"Validate auth Tree CHRegistration -> Node -> Create Notify JWT Email entries \", () => {\r",
											"    const CreateNotifyJWTEmail_id = pm.collectionVariables.get(\"AuthTree_CHRegistration_node_CreateNotifyJWTEmail_id\");\r",
											"    const CreateNotifyJWTEmail_actual = jsonData.nodes[CreateNotifyJWTEmail_id];\r",
											"    const CreateNotifyJWTEmail_expected = JSON.parse(pm.collectionVariables.get(\"AuthTree_CHRegistration_node_CreateNotifyJWTEmail\"));\r",
											"   \r",
											"        pm.expect(utils.compare.deepEqualAuthTree(CreateNotifyJWTEmail_actual,CreateNotifyJWTEmail_expected), `Auth Tree CHRegistration -> Node -> Create Notify Email has incorrect entries.\r",
											"            Expected => ${JSON.stringify(CreateNotifyJWTEmail_expected)}   \r",
											"            Actual => ${JSON.stringify(CreateNotifyJWTEmail_actual)}`).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"//validating auth-tree CH Registration node Create & Email link\r",
											"pm.test(\"Validate auth Tree CHRegistration -> Node -> Create & Email link entries \", () => {\r",
											"    const CreateEmailLink_id = pm.collectionVariables.get(\"AuthTree_CHRegistration_node_CreateEmailLink_id\");\r",
											"    const CreateEmailLink_actual = jsonData.nodes[CreateEmailLink_id];\r",
											"    const CreateEmailLink_expected = JSON.parse(pm.collectionVariables.get(\"AuthTree_CHRegistration_node_CreateEmailLink\"));\r",
											"   \r",
											"        pm.expect(utils.compare.deepEqualAuthTree(CreateEmailLink_actual,CreateEmailLink_expected), `Auth Tree CHRegistration -> Node -> Create & Email link has incorrect entries.\r",
											"            Expected => ${JSON.stringify(CreateEmailLink_expected)}   \r",
											"            Actual => ${JSON.stringify(CreateEmailLink_actual)}`).to.be.true;\r",
											"});\r",
											"\r",
											"//validating auth-tree CH Registration node check phone\r",
											"pm.test(\"Validate auth Tree CHRegistration -> Node -> Check Phone entries \", () => {\r",
											"    const CheckPhone_id = pm.collectionVariables.get(\"AuthTree_CHRegistration_node_CheckPhone_id\");\r",
											"    const CheckPhone_actual = jsonData.nodes[CheckPhone_id];\r",
											"    const CheckPhone_expected = JSON.parse(pm.collectionVariables.get(\"AuthTree_CHRegistration_node_CheckPhone\"));\r",
											"   \r",
											"        pm.expect(utils.compare.deepEqualAuthTree(CheckPhone_actual,CheckPhone_expected), `Auth Tree CHRegistration -> Node -> Check phone has incorrect entries.\r",
											"            Expected => ${JSON.stringify(CheckPhone_expected)}   \r",
											"            Actual => ${JSON.stringify(CheckPhone_actual)}`).to.be.true;\r",
											"});\r",
											"\r",
											"//validating auth-tree CH Registration node check phone\r",
											"pm.test(\"Validate auth Tree CHRegistration -> Node -> Email Collector entries \", () => {\r",
											"    const EmailCollector_id = pm.collectionVariables.get(\"AuthTree_CHRegistration_node_EmailCollector_id\");\r",
											"    const EmailCollector_actual = jsonData.nodes[EmailCollector_id];\r",
											"    const EmailCollector_expected = JSON.parse(pm.collectionVariables.get(\"AuthTree_CHRegistration_node_EmailCollector\"));\r",
											"   \r",
											"        pm.expect(utils.compare.deepEqualAuthTree(EmailCollector_actual,EmailCollector_expected), `Auth Tree CHRegistration -> Node -> Email Collector has incorrect entries.\r",
											"            Expected => ${JSON.stringify(EmailCollector_expected)}   \r",
											"            Actual => ${JSON.stringify(EmailCollector_actual)}`).to.be.true;\r",
											"});\r",
											"\r",
											"//validating auth-tree CH Registration static nodes\r",
											"pm.test(\"Validate auth Tree CHRegistration -> Node -> static nodes entries \", () => {\r",
											"    const staticNode_actual = jsonData.staticNodes;\r",
											"    const staticNode_expected = JSON.parse(pm.collectionVariables.get(\"AuthTree_CHRegistration_node_static\"));\r",
											"   \r",
											"        pm.expect(utils.compare.deepEqualAuthTree(staticNode_expected,staticNode_actual), `Auth Tree CHRegistration -> Node -> static nodes has incorrect entries.\r",
											"            Expected => ${JSON.stringify(staticNode_expected)}   \r",
											"            Actual => ${JSON.stringify(staticNode_actual)}`).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/realm-config/authentication/authenticationtrees/trees/{{AuthTree_CHRegistration_id}}",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"realm-config",
										"authentication",
										"authenticationtrees",
										"trees",
										"{{AuthTree_CHRegistration_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Login",
					"item": [
						{
							"name": "CHLoginMFA",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"AuthTree -> CHLoginMFA contains correct subnodes\", () => {\r",
											"    const actual = jsonData;\r",
											"    const expected = JSON.parse(pm.collectionVariables.get(\"AuthTree_CHLoginMFA\"));\r",
											"\r",
											"    let utils = eval(environment.utils)();\r",
											"    pm.expect(utils.compare.deepEqualAuthTree(actual, expected), `AuthTree -> CHLoginMFA contains incorrect subnodes,  \r",
											"            Expected => ${JSON.stringify(expected)}   \r",
											"            Actual => ${JSON.stringify(actual)}`).to.be.true;\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/realm-config/authentication/authenticationtrees/trees/chloginmfa",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"realm-config",
										"authentication",
										"authenticationtrees",
										"trees",
										"chloginmfa"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Reset Password",
					"item": [
						{
							"name": "Authentication to Top-Level Realm",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const JSONResponse = JSON.parse(responseBody);",
											"",
											"// Did request have a callback?",
											"if(JSONResponse.authId && JSONResponse.authId != \"\")",
											"{",
											"  // Set `authId` variable",
											"  pm.environment.set(\"authId\", JSONResponse.authId);",
											"}",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"description": "The media type of the resource.",
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"description": "This collection documents version 2.1 of the authentication resource.",
										"key": "Accept-API-Version",
										"value": "resource=2.1",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/authenticate",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"authenticate"
									]
								},
								"description": "To get started, request the callbacks from the top-level realm."
							},
							"response": []
						},
						{
							"name": "Authenticate as ID Cloud Admin and Get Session Token, and Cookie Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const JSONResponse = JSON.parse(responseBody);",
											"",
											"// Did request return SSO Token?",
											"if(JSONResponse.tokenId && JSONResponse.tokenId != \"\")",
											"{",
											"  // Set `session token` variable",
											"  pm.environment.set(\"session_token\", JSONResponse.tokenId);",
											"",
											"  // Remove `authId` variable",
											"  pm.environment.unset(\"authId\");",
											"",
											"}",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"description": "Specifies that the `/json/authenticate` endpoint uses JSON format for requests.",
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"description": "Specifies the version of the `/json/authenticate` endpoint to use.",
										"key": "Accept-API-Version",
										"value": "resource=2.1, protocol=1.0",
										"disabled": true
									},
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"authId\": \"{{authId}}\",\n    \"callbacks\": [\n        {\n            \"type\": \"NameCallback\",\n            \"output\": [\n                {\n                    \"name\": \"prompt\",\n                    \"value\": \"User Name\"\n                }\n            ],\n            \"input\": [\n                {\n                    \"name\": \"IDToken1\",\n                    \"value\": \"{{IDCloudAdminUsername}}\"\n                }\n            ],\n            \"_id\": 0\n        },\n        {\n            \"type\": \"PasswordCallback\",\n            \"output\": [\n                {\n                    \"name\": \"prompt\",\n                    \"value\": \"Password\"\n                }\n            ],\n            \"input\": [\n                {\n                    \"name\": \"IDToken2\",\n                    \"value\": \"{{IDCloudAdminPassword}}\"\n                }\n            ],\n            \"_id\": 1\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platformUrl}}/am/json/authenticate",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"authenticate"
									]
								},
								"description": "Return the callback, specifying the credentials of an administrative user.\nThis request obtains the name used in headers to specify the session token. To manually provide the session token name, in the ID Cloud console, navigate to **Tenant Settings**, and copy the *Cookie Name* value. Use this value in the `cookieName` variable in your Postman Collection."
							},
							"response": []
						},
						{
							"name": "CHResetPassword",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"AuthTree -> CHResetPassword contains correct subnodes\", () => {\r",
											"    const actual = jsonData;\r",
											"    const expected = JSON.parse(pm.collectionVariables.get(\"AuthTree_CHResetPassword\"));\r",
											"\r",
											"    let utils = eval(environment.utils)();\r",
											"    pm.expect(utils.compare.deepEqualAuthTree(actual, expected), `AuthTree -> CHResetPassword contains incorrect subnodes,  \r",
											"            Expected => ${JSON.stringify(expected)}   \r",
											"            Actual => ${JSON.stringify(actual)}`).to.be.true;\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/realm-config/authentication/authenticationtrees/trees/CHResetPassword",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"realm-config",
										"authentication",
										"authenticationtrees",
										"trees",
										"CHResetPassword"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Nodes",
			"item": [
				{
					"name": "CHLoginMFA",
					"item": [
						{
							"name": "Authentication to Top-Level Realm Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const JSONResponse = JSON.parse(responseBody);",
											"",
											"// Did request have a callback?",
											"if(JSONResponse.authId && JSONResponse.authId != \"\")",
											"{",
											"  // Set `authId` variable",
											"  pm.environment.set(\"authId\", JSONResponse.authId);",
											"}",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"description": "The media type of the resource.",
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"description": "This collection documents version 2.1 of the authentication resource.",
										"key": "Accept-API-Version",
										"value": "resource=2.1",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/authenticate",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"authenticate"
									]
								},
								"description": "To get started, request the callbacks from the top-level realm."
							},
							"response": []
						},
						{
							"name": "Authenticate as ID Cloud Admin and Get Session Token, and Cookie Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const JSONResponse = JSON.parse(responseBody);",
											"",
											"// Did request return SSO Token?",
											"if(JSONResponse.tokenId && JSONResponse.tokenId != \"\")",
											"{",
											"  // Set `session token` variable",
											"  pm.environment.set(\"session_token\", JSONResponse.tokenId);",
											"",
											"  // Remove `authId` variable",
											"  pm.environment.unset(\"authId\");",
											"",
											"}",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"description": "Specifies that the `/json/authenticate` endpoint uses JSON format for requests.",
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"description": "Specifies the version of the `/json/authenticate` endpoint to use.",
										"key": "Accept-API-Version",
										"value": "resource=2.1, protocol=1.0",
										"disabled": true
									},
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"authId\": \"{{authId}}\",\n    \"callbacks\": [\n        {\n            \"type\": \"NameCallback\",\n            \"output\": [\n                {\n                    \"name\": \"prompt\",\n                    \"value\": \"User Name\"\n                }\n            ],\n            \"input\": [\n                {\n                    \"name\": \"IDToken1\",\n                    \"value\": \"{{IDCloudAdminUsername}}\"\n                }\n            ],\n            \"_id\": 0\n        },\n        {\n            \"type\": \"PasswordCallback\",\n            \"output\": [\n                {\n                    \"name\": \"prompt\",\n                    \"value\": \"Password\"\n                }\n            ],\n            \"input\": [\n                {\n                    \"name\": \"IDToken2\",\n                    \"value\": \"{{IDCloudAdminPassword}}\"\n                }\n            ],\n            \"_id\": 1\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platformUrl}}/am/json/authenticate",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"authenticate"
									]
								},
								"description": "Return the callback, specifying the credentials of an administrative user.\nThis request obtains the name used in headers to specify the session token. To manually provide the session token name, in the ID Cloud console, navigate to **Tenant Settings**, and copy the *Cookie Name* value. Use this value in the `cookieName` variable in your Postman Collection."
							},
							"response": []
						},
						{
							"name": "Increment Login Count",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"CHLoginMFA -> Nodes -> Increment Login Count contains correct subnodes\", () => {\r",
											"    const actual = jsonData;\r",
											"    const expected = JSON.parse(pm.collectionVariables.get(\"CHLoginMFA_nodes_IncrementLogin\"));\r",
											"\r",
											"    let utils = eval(environment.utils)();\r",
											"    pm.expect(utils.compare.deepEqualNodes(expected, actual), `CHLoginMFA -> Nodes -> Increment Login Count contains incorrect subnodes,  \r",
											"            Expected => ${JSON.stringify(expected)}   \r",
											"            Actual => ${JSON.stringify(actual)}`).to.be.true;\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/realm-config/authentication/authenticationtrees/nodes/IncrementLoginCountNode/15993a44-70e7-4799-b35c-a245acb9ccc6",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"realm-config",
										"authentication",
										"authenticationtrees",
										"nodes",
										"IncrementLoginCountNode",
										"15993a44-70e7-4799-b35c-a245acb9ccc6"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send MFA text via Notify",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"CHLoginMFA -> Nodes -> Send MFA text via Notify contains correct subnodes\", () => {\r",
											"    const actual = jsonData;\r",
											"    const expected = JSON.parse(pm.collectionVariables.get(\"CHLoginMFA_nodes_SendMFAText\"));\r",
											"\r",
											"    let utils = eval(environment.utils)();\r",
											"    pm.expect(utils.compare.deepEqualNodes(expected, actual), `CHLoginMFA -> Nodes -> Send MFA text via Notify contains incorrect subnodes,  \r",
											"            Expected => ${JSON.stringify(expected)}   \r",
											"            Actual => ${JSON.stringify(actual)}`).to.be.true;\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/realm-config/authentication/authenticationtrees/nodes/ScriptedDecisionNode/5c3d2eda-3ea6-4fdc-8421-e29a5b2aecda",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"realm-config",
										"authentication",
										"authenticationtrees",
										"nodes",
										"ScriptedDecisionNode",
										"5c3d2eda-3ea6-4fdc-8421-e29a5b2aecda"
									]
								}
							},
							"response": []
						},
						{
							"name": "Data Store Decision",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"CHLoginMFA -> Nodes -> Data Store Decision contains correct subnodes\", () => {\r",
											"    const actual = jsonData;\r",
											"    const expected = JSON.parse(pm.collectionVariables.get(\"CHLoginMFA_nodes_DataStoreDecision\"));\r",
											"\r",
											"    let utils = eval(environment.utils)();\r",
											"    pm.expect(utils.compare.deepEqualNodes(expected, actual), `CHLoginMFA -> Nodes ->Data Store Decision contains incorrect subnodes,  \r",
											"            Expected => ${JSON.stringify(expected)}   \r",
											"            Actual => ${JSON.stringify(actual)}`).to.be.true;\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/realm-config/authentication/authenticationtrees/nodes/DataStoreDecisionNode/77f75f06-34de-4045-a9f2-73b01bf79a3b",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"realm-config",
										"authentication",
										"authenticationtrees",
										"nodes",
										"DataStoreDecisionNode",
										"77f75f06-34de-4045-a9f2-73b01bf79a3b"
									]
								}
							},
							"response": []
						},
						{
							"name": "Identify Existing User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"CHLoginMFA -> Nodes -> Identify Existing User contains correct subnodes\", () => {\r",
											"    const actual = jsonData;\r",
											"    const expected = JSON.parse(pm.collectionVariables.get(\"CHLoginMFA_nodes_IdentifyExistingUser\"));\r",
											"\r",
											"    let utils = eval(environment.utils)();\r",
											"    pm.expect(utils.compare.deepEqualNodes(expected, actual), `CHLoginMFA -> Nodes -> Identify Existing User contains incorrect subnodes,  \r",
											"            Expected => ${JSON.stringify(expected)}   \r",
											"            Actual => ${JSON.stringify(actual)}`).to.be.true;\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/realm-config/authentication/authenticationtrees/nodes/IdentifyExistingUserNode/97b35ef6-74bf-4f46-a0d3-dab716e40249",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"realm-config",
										"authentication",
										"authenticationtrees",
										"nodes",
										"IdentifyExistingUserNode",
										"97b35ef6-74bf-4f46-a0d3-dab716e40249"
									]
								}
							},
							"response": []
						},
						{
							"name": "Page Node",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"CHLoginMFA -> Nodes -> Page Node contains correct subnodes\", () => {\r",
											"    const actual = jsonData;\r",
											"    const expected = JSON.parse(pm.collectionVariables.get(\"CHLoginMFA_nodes_PageNode\"));\r",
											"\r",
											"    let utils = eval(environment.utils)();\r",
											"    pm.expect(utils.compare.deepEqualNodes(expected, actual), `CHLoginMFA -> Nodes -> Page Node contains incorrect subnodes,  \r",
											"            Expected => ${JSON.stringify(expected)}   \r",
											"            Actual => ${JSON.stringify(actual)}`).to.be.true;\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/realm-config/authentication/authenticationtrees/nodes/PageNode/a6eb5385-ac12-4359-8f0f-9a588ca5a334",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"realm-config",
										"authentication",
										"authenticationtrees",
										"nodes",
										"PageNode",
										"a6eb5385-ac12-4359-8f0f-9a588ca5a334"
									]
								}
							},
							"response": []
						},
						{
							"name": "Has Phone Number",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"CHLoginMFA -> Nodes -> Has Phone Number contains correct subnodes\", () => {\r",
											"    const actual = jsonData;\r",
											"    const expected = JSON.parse(pm.collectionVariables.get(\"CHLoginMFA_nodes_HasPhoneNumber\"));\r",
											"\r",
											"    let utils = eval(environment.utils)();\r",
											"    pm.expect(utils.compare.deepEqualNodes(expected, actual), `CHLoginMFA -> Nodes ->Has Phone Number contains incorrect subnodes,  \r",
											"            Expected => ${JSON.stringify(expected)}   \r",
											"            Actual => ${JSON.stringify(actual)}`).to.be.true;\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/realm-config/authentication/authenticationtrees/nodes/ScriptedDecisionNode/c3f22327-1e32-4f18-957f-731aa9c97dd5",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"realm-config",
										"authentication",
										"authenticationtrees",
										"nodes",
										"ScriptedDecisionNode",
										"c3f22327-1e32-4f18-957f-731aa9c97dd5"
									]
								}
							},
							"response": []
						},
						{
							"name": "Inner Tree Evaluator",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"CHLoginMFA -> Nodes -> Inner Tree Evaluator contains correct subnodes\", () => {\r",
											"    const actual = jsonData;\r",
											"    const expected = JSON.parse(pm.collectionVariables.get(\"CHLoginMFA_nodes_InnerTreeEvaluator\"));\r",
											"\r",
											"    let utils = eval(environment.utils)();\r",
											"    pm.expect(utils.compare.deepEqualNodes(expected, actual), `CHLoginMFA -> Nodes ->Inner Tree Evaluator contains incorrect subnodes,  \r",
											"            Expected => ${JSON.stringify(expected)}   \r",
											"            Actual => ${JSON.stringify(actual)}`).to.be.true;\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/realm-config/authentication/authenticationtrees/nodes/InnerTreeEvaluatorNode/de45e2b0-1462-4423-a397-80df1255f4ea",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"realm-config",
										"authentication",
										"authenticationtrees",
										"nodes",
										"InnerTreeEvaluatorNode",
										"de45e2b0-1462-4423-a397-80df1255f4ea"
									]
								}
							},
							"response": []
						},
						{
							"name": "HOTP Generator",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"CHLoginMFA -> Nodes -> HOTP Generator contains correct subnodes\", () => {\r",
											"    const actual = jsonData;\r",
											"    const expected = JSON.parse(pm.collectionVariables.get(\"CHLoginMFA_nodes_HOTPGenerator\"));\r",
											"\r",
											"    let utils = eval(environment.utils)();\r",
											"    pm.expect(utils.compare.deepEqualNodes(expected, actual), `CHLoginMFA -> Nodes ->HOTP Generator contains incorrect subnodes,  \r",
											"            Expected => ${JSON.stringify(expected)}   \r",
											"            Actual => ${JSON.stringify(actual)}`).to.be.true;\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/realm-config/authentication/authenticationtrees/nodes/OneTimePasswordGeneratorNode/f8cba5d7-0906-40c0-bd61-df601a04cf9f",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"realm-config",
										"authentication",
										"authenticationtrees",
										"nodes",
										"OneTimePasswordGeneratorNode",
										"f8cba5d7-0906-40c0-bd61-df601a04cf9f"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Notify JWT - SMS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"CHLoginMFA -> Nodes -> Create Notify JWT - SMS contains correct subnodes\", () => {\r",
											"    const actual = jsonData;\r",
											"    const expected = JSON.parse(pm.collectionVariables.get(\"CHLoginMFA_nodes_CreateNotifyJWTSMS\"));\r",
											"\r",
											"    let utils = eval(environment.utils)();\r",
											"    pm.expect(utils.compare.deepEqualNodes(expected, actual), `CHLoginMFA -> Nodes -> Create Notify JWT - SMS contains incorrect subnodes,  \r",
											"            Expected => ${JSON.stringify(expected)}   \r",
											"            Actual => ${JSON.stringify(actual)}`).to.be.true;\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/realm-config/authentication/authenticationtrees/nodes/ScriptedDecisionNode/fdcf16b0-de65-4219-a8e6-713f20235fe4",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"realm-config",
										"authentication",
										"authenticationtrees",
										"nodes",
										"ScriptedDecisionNode",
										"fdcf16b0-de65-4219-a8e6-713f20235fe4"
									]
								}
							},
							"response": []
						},
						{
							"name": "Require MFA",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"CHLoginMFA -> Nodes -> Require MFA contains correct subnodes\", () => {\r",
											"    const actual = jsonData;\r",
											"    const expected = JSON.parse(pm.collectionVariables.get(\"CHLoginMFA_nodes_RequireMFA\"));\r",
											"\r",
											"    let utils = eval(environment.utils)();\r",
											"    pm.expect(utils.compare.deepEqualNodes(expected, actual), `CHLoginMFA -> Nodes -> Require MFA contains incorrect subnodes,  \r",
											"            Expected => ${JSON.stringify(expected)}   \r",
											"            Actual => ${JSON.stringify(actual)}`).to.be.true;\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/realm-config/authentication/authenticationtrees/nodes/ScriptedDecisionNode/028a75de-c133-4e3f-8569-158ee1094b78",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"realm-config",
										"authentication",
										"authenticationtrees",
										"nodes",
										"ScriptedDecisionNode",
										"028a75de-c133-4e3f-8569-158ee1094b78"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Last Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"CHLoginMFA -> Nodes -> Update Last Login contains correct subnodes\", () => {\r",
											"    const actual = jsonData;\r",
											"    const expected = JSON.parse(pm.collectionVariables.get(\"CHLoginMFA_nodes_UpdateLastLogin\"));\r",
											"\r",
											"    let utils = eval(environment.utils)();\r",
											"    pm.expect(utils.compare.deepEqualNodes(expected, actual), `CHLoginMFA -> Nodes -> Update Last Login contains incorrect subnodes,  \r",
											"            Expected => ${JSON.stringify(expected)}   \r",
											"            Actual => ${JSON.stringify(actual)}`).to.be.true;\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/realm-config/authentication/authenticationtrees/nodes/ScriptedDecisionNode/0c25a25f-7673-4bff-9d20-b4eecf9b6ca5",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"realm-config",
										"authentication",
										"authenticationtrees",
										"nodes",
										"ScriptedDecisionNode",
										"0c25a25f-7673-4bff-9d20-b4eecf9b6ca5"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Notify JWT - Email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"CHLoginMFA -> Nodes -> Create Notify JWT - Email contains correct subnodes\", () => {\r",
											"    const actual = jsonData;\r",
											"    const expected = JSON.parse(pm.collectionVariables.get(\"CHLoginMFA_nodes_CreateNotifyJWTEmail\"));\r",
											"\r",
											"    let utils = eval(environment.utils)();\r",
											"    pm.expect(utils.compare.deepEqualNodes(expected, actual), `CHLoginMFA -> Nodes -> Create Notify JWT - Email contains incorrect subnodes,  \r",
											"            Expected => ${JSON.stringify(expected)}   \r",
											"            Actual => ${JSON.stringify(actual)}`).to.be.true;\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/realm-config/authentication/authenticationtrees/nodes/ScriptedDecisionNode/b6c21d0e-4e55-47c0-8a58-e86939c93c14",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"realm-config",
										"authentication",
										"authenticationtrees",
										"nodes",
										"ScriptedDecisionNode",
										"b6c21d0e-4e55-47c0-8a58-e86939c93c14"
									]
								}
							},
							"response": []
						},
						{
							"name": "HOTP Generator 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"CHLoginMFA -> Nodes -> HOTP Generator 2 contains correct subnodes\", () => {\r",
											"    const actual = jsonData;\r",
											"    const expected = JSON.parse(pm.collectionVariables.get(\"CHLoginMFA_nodes_HOTPGenerator2\"));\r",
											"\r",
											"    let utils = eval(environment.utils)();\r",
											"    pm.expect(utils.compare.deepEqualNodes(expected, actual), `CHLoginMFA -> Nodes ->HOTP Generator 2 contains incorrect subnodes,  \r",
											"            Expected => ${JSON.stringify(expected)}   \r",
											"            Actual => ${JSON.stringify(actual)}`).to.be.true;\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/realm-config/authentication/authenticationtrees/nodes/OneTimePasswordGeneratorNode/c8e1a748-a423-41ff-9971-b4a879ec01d7",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"realm-config",
										"authentication",
										"authenticationtrees",
										"nodes",
										"OneTimePasswordGeneratorNode",
										"c8e1a748-a423-41ff-9971-b4a879ec01d7"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send MFA email via Notify",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"CHLoginMFA -> Nodes -> Send MFA email via Notify contains correct subnodes\", () => {\r",
											"    const actual = jsonData;\r",
											"    const expected = JSON.parse(pm.collectionVariables.get(\"CHLoginMFA_nodes_SendMFAEmailViaNotify\"));\r",
											"\r",
											"    let utils = eval(environment.utils)();\r",
											"    pm.expect(utils.compare.deepEqualNodes(expected, actual), `CHLoginMFA -> Nodes ->Send MFA email via Notify contains incorrect subnodes,  \r",
											"            Expected => ${JSON.stringify(expected)}   \r",
											"            Actual => ${JSON.stringify(actual)}`).to.be.true;\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/realm-config/authentication/authenticationtrees/nodes/ScriptedDecisionNode/1cf909f8-28a3-45de-9c61-8653f8fe2398",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"realm-config",
										"authentication",
										"authenticationtrees",
										"nodes",
										"ScriptedDecisionNode",
										"1cf909f8-28a3-45de-9c61-8653f8fe2398"
									]
								}
							},
							"response": []
						},
						{
							"name": "Choose Email/SMS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"CHLoginMFA -> Nodes -> Choose Email/SMS contains correct subnodes\", () => {\r",
											"    const actual = jsonData;\r",
											"    const expected = JSON.parse(pm.collectionVariables.get(\"CHLoginMFA_nodes_ChooseEmailSMS\"));\r",
											"\r",
											"    let utils = eval(environment.utils)();\r",
											"    pm.expect(utils.compare.deepEqualNodes(expected, actual), `CHLoginMFA -> Nodes -> Choose Email/SMS contains incorrect subnodes,  \r",
											"            Expected => ${JSON.stringify(expected)}   \r",
											"            Actual => ${JSON.stringify(actual)}`).to.be.true;\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/realm-config/authentication/authenticationtrees/nodes/PageNode/bed7617c-467f-49df-bb86-2e42de21d706",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"realm-config",
										"authentication",
										"authenticationtrees",
										"nodes",
										"PageNode",
										"bed7617c-467f-49df-bb86-2e42de21d706"
									]
								}
							},
							"response": []
						},
						{
							"name": "Enter OTP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"CHLoginMFA -> Nodes -> Enter OTP contains correct subnodes\", () => {\r",
											"    const actual = jsonData;\r",
											"    const expected = JSON.parse(pm.collectionVariables.get(\"CHLoginMFA_nodes_EnterOTP\"));\r",
											"\r",
											"    let utils = eval(environment.utils)();\r",
											"    pm.expect(utils.compare.deepEqualNodes(expected, actual), `CHLoginMFA -> Nodes -> Enter OTP contains incorrect subnodes,  \r",
											"            Expected => ${JSON.stringify(expected)}   \r",
											"            Actual => ${JSON.stringify(actual)}`).to.be.true;\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/realm-config/authentication/authenticationtrees/nodes/PageNode/82b05c8c-258d-41fd-a38e-5d3326a709bc",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"realm-config",
										"authentication",
										"authenticationtrees",
										"nodes",
										"PageNode",
										"82b05c8c-258d-41fd-a38e-5d3326a709bc"
									]
								}
							},
							"response": []
						},
						{
							"name": "Raise Error",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"CHLoginMFA -> Nodes -> Raise Error contains correct subnodes\", () => {\r",
											"    const actual = jsonData;\r",
											"    const expected = JSON.parse(pm.collectionVariables.get(\"CHLoginMFA_nodes_RaiseError\"));\r",
											"\r",
											"    let utils = eval(environment.utils)();\r",
											"    pm.expect(utils.compare.deepEqualNodes(expected, actual), `CHLoginMFA -> Nodes -> Raise Error contains incorrect subnodes,  \r",
											"            Expected => ${JSON.stringify(expected)}   \r",
											"            Actual => ${JSON.stringify(actual)}`).to.be.true;\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/realm-config/authentication/authenticationtrees/nodes/ScriptedDecisionNode/6982586f-8c46-4f87-b315-bfba9ea0a704",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"realm-config",
										"authentication",
										"authenticationtrees",
										"nodes",
										"ScriptedDecisionNode",
										"6982586f-8c46-4f87-b315-bfba9ea0a704"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retry Limit Decision",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"CHLoginMFA -> Nodes -> Retry Limit Decision contains correct subnodes\", () => {\r",
											"    const actual = jsonData;\r",
											"    const expected = JSON.parse(pm.collectionVariables.get(\"CHLoginMFA_nodes_RetryLimitDecision\"));\r",
											"\r",
											"    let utils = eval(environment.utils)();\r",
											"    pm.expect(utils.compare.deepEqualNodes(expected, actual), `CHLoginMFA -> Nodes -> Retry Limit Decision contains incorrect subnodes,  \r",
											"            Expected => ${JSON.stringify(expected)}   \r",
											"            Actual => ${JSON.stringify(actual)}`).to.be.true;\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/realm-config/authentication/authenticationtrees/nodes/RetryLimitDecisionNode/cec99933-f999-4718-840b-2327746a9a98",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"realm-config",
										"authentication",
										"authenticationtrees",
										"nodes",
										"RetryLimitDecisionNode",
										"cec99933-f999-4718-840b-2327746a9a98"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Registration Nodes",
					"item": [
						{
							"name": "CHRegistration",
							"item": [
								{
									"name": "Authentication to Top-Level Realm",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const JSONResponse = JSON.parse(responseBody);",
													"",
													"// Did request have a callback?",
													"if(JSONResponse.authId && JSONResponse.authId != \"\")",
													"{",
													"  // Set `authId` variable",
													"  pm.environment.set(\"authId\", JSONResponse.authId);",
													"}",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableCookies": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"description": "The media type of the resource.",
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"description": "This collection documents version 2.1 of the authentication resource.",
												"key": "Accept-API-Version",
												"value": "resource=2.1",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{platformUrl}}/am/json/authenticate",
											"host": [
												"{{platformUrl}}"
											],
											"path": [
												"am",
												"json",
												"authenticate"
											]
										},
										"description": "To get started, request the callbacks from the top-level realm."
									},
									"response": []
								},
								{
									"name": "Authenticate as ID Cloud Admin and Get Session Token, and Cookie Name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const JSONResponse = JSON.parse(responseBody);",
													"",
													"// Did request return SSO Token?",
													"if(JSONResponse.tokenId && JSONResponse.tokenId != \"\")",
													"{",
													"  // Set `session token` variable",
													"  pm.environment.set(\"session_token\", JSONResponse.tokenId);",
													"",
													"  // Remove `authId` variable",
													"  pm.environment.unset(\"authId\");",
													"",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableCookies": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"description": "Specifies that the `/json/authenticate` endpoint uses JSON format for requests.",
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"description": "Specifies the version of the `/json/authenticate` endpoint to use.",
												"key": "Accept-API-Version",
												"value": "resource=2.1, protocol=1.0",
												"disabled": true
											},
											{
												"key": "",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"authId\": \"{{authId}}\",\n    \"callbacks\": [\n        {\n            \"type\": \"NameCallback\",\n            \"output\": [\n                {\n                    \"name\": \"prompt\",\n                    \"value\": \"User Name\"\n                }\n            ],\n            \"input\": [\n                {\n                    \"name\": \"IDToken1\",\n                    \"value\": \"{{IDCloudAdminUsername}}\"\n                }\n            ],\n            \"_id\": 0\n        },\n        {\n            \"type\": \"PasswordCallback\",\n            \"output\": [\n                {\n                    \"name\": \"prompt\",\n                    \"value\": \"Password\"\n                }\n            ],\n            \"input\": [\n                {\n                    \"name\": \"IDToken2\",\n                    \"value\": \"{{IDCloudAdminPassword}}\"\n                }\n            ],\n            \"_id\": 1\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{platformUrl}}/am/json/authenticate",
											"host": [
												"{{platformUrl}}"
											],
											"path": [
												"am",
												"json",
												"authenticate"
											]
										},
										"description": "Return the callback, specifying the credentials of an administrative user.\nThis request obtains the name used in headers to specify the session token. To manually provide the session token name, in the ID Cloud console, navigate to **Tenant Settings**, and copy the *Cookie Name* value. Use this value in the `cookieName` variable in your Postman Collection."
									},
									"response": []
								},
								{
									"name": "Retry Limit Decision",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = JSON.parse(responseBody);\r",
													"\r",
													"pm.test(\"CHRegistration -> Node -> Retry Limit decision node contains correct subnodes\", () => {\r",
													"    const retryLimitDecision_actual = jsonData;\r",
													"    const retryLimitDecision_expected = JSON.parse(pm.collectionVariables.get(\"AuthTree_CHRegistration_nodes_retryLimitDecision_subnodes\"));\r",
													"\r",
													"    let utils = eval(environment.utils)();\r",
													"    pm.expect(utils.compare.deepEqualNodes(retryLimitDecision_actual, retryLimitDecision_expected), `CHRegistration -> Retry Limit decision node contains incorrect subnode in the collection,  \r",
													"            Expected => ${JSON.stringify(retryLimitDecision_expected)}   \r",
													"            Actual => ${JSON.stringify(retryLimitDecision_actual)}`).to.be.true;\r",
													"\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "cookie",
												"value": "{{cookie_Name}} = {{session_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{platformUrl}}/am/json/{{realm}}/realm-config/authentication/authenticationtrees/nodes/RetryLimitDecisionNode/{{AuthTree_CHRegistration_nodes_retryLimitDecision_id}}",
											"host": [
												"{{platformUrl}}"
											],
											"path": [
												"am",
												"json",
												"{{realm}}",
												"realm-config",
												"authentication",
												"authenticationtrees",
												"nodes",
												"RetryLimitDecisionNode",
												"{{AuthTree_CHRegistration_nodes_retryLimitDecision_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "HOTP Generator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = JSON.parse(responseBody);\r",
													"\r",
													"pm.test(\"CHRegistration -> Node ->  HOTP Generator node contains correct subnodes\", () => {\r",
													"    const HOTPGenerator_actual = jsonData;\r",
													"    const HOTPGenerator_expected = JSON.parse(pm.collectionVariables.get(\"AuthTree_CHRegistration_nodes_HOTPGenerator_subnodes\"));\r",
													"\r",
													"    let utils = eval(environment.utils)();\r",
													"    pm.expect(utils.compare.deepEqualNodes(HOTPGenerator_actual, HOTPGenerator_expected), `CHRegistration -> HOTP Generator node contains incorrect subnode in the collection,  \r",
													"            Expected => ${JSON.stringify(HOTPGenerator_expected)}   \r",
													"            Actual => ${JSON.stringify(HOTPGenerator_actual)}`).to.be.true;\r",
													"        \r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "cookie",
												"value": "{{cookie_Name}} = {{session_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{platformUrl}}/am/json/{{realm}}/realm-config/authentication/authenticationtrees/nodes/OneTimePasswordGeneratorNode/{{AuthTree_CHRegistration_nodes_HOTPGenerator_id}}",
											"host": [
												"{{platformUrl}}"
											],
											"path": [
												"am",
												"json",
												"{{realm}}",
												"realm-config",
												"authentication",
												"authenticationtrees",
												"nodes",
												"OneTimePasswordGeneratorNode",
												"{{AuthTree_CHRegistration_nodes_HOTPGenerator_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "OTP Not Valid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = JSON.parse(responseBody);\r",
													"\r",
													"pm.test(\"CHRegistration -> Node -> OTP Not Valid node contains correct subnodes\", () => {\r",
													"    const OTPNotValid_actual = jsonData;\r",
													"    const OTPNotValid_expected = JSON.parse(pm.collectionVariables.get(\"AuthTree_CHRegistration_node_OTPNotValid_subnodes\"));\r",
													"\r",
													"    let utils = eval(environment.utils)();\r",
													"    pm.expect(utils.compare.deepEqualNodes(OTPNotValid_actual, OTPNotValid_expected), `CHRegistration -> OTP Not Valid node contains incorrect subnode in the collection,  \r",
													"            Expected => ${JSON.stringify(OTPNotValid_expected)}   \r",
													"            Actual => ${JSON.stringify(OTPNotValid_actual)}`).to.be.true;\r",
													"        \r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "cookie",
												"value": "{{cookie_Name}} = {{session_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{platformUrl}}/am/json/{{realm}}/realm-config/authentication/authenticationtrees/nodes/ScriptedDecisionNode/{{AuthTree_CHRegistration_node_OTPNotValid_id}}",
											"host": [
												"{{platformUrl}}"
											],
											"path": [
												"am",
												"json",
												"{{realm}}",
												"realm-config",
												"authentication",
												"authenticationtrees",
												"nodes",
												"ScriptedDecisionNode",
												"{{AuthTree_CHRegistration_node_OTPNotValid_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Send OTP",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = JSON.parse(responseBody);\r",
													"\r",
													"pm.test(\"CHRegistration -> Node -> Send OTP node contains correct subnodes\", () => {\r",
													"    const SendOTP_actual = jsonData;\r",
													"    const SendOTP_expected = JSON.parse(pm.collectionVariables.get(\"AuthTree_CHRegistration_node_SendOTP_subnodes\"));\r",
													"\r",
													"    let utils = eval(environment.utils)();\r",
													"    pm.expect(utils.compare.deepEqualNodes(SendOTP_actual, SendOTP_expected), `CHRegistration -> Send OTP node contains incorrect subnode in the collection,  \r",
													"            Expected => ${JSON.stringify(SendOTP_expected)}   \r",
													"            Actual => ${JSON.stringify(SendOTP_actual)}`).to.be.true;\r",
													"        \r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "cookie",
												"value": "{{cookie_Name}} = {{session_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{platformUrl}}/am/json/{{realm}}/realm-config/authentication/authenticationtrees/nodes/ScriptedDecisionNode/{{AuthTree_CHRegistration_node_SendOTP_id}}",
											"host": [
												"{{platformUrl}}"
											],
											"path": [
												"am",
												"json",
												"{{realm}}",
												"realm-config",
												"authentication",
												"authenticationtrees",
												"nodes",
												"ScriptedDecisionNode",
												"{{AuthTree_CHRegistration_node_SendOTP_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "OTP Page",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = JSON.parse(responseBody);\r",
													"\r",
													"pm.test(\"CHRegistration -> Node -> OTP Page node contains correct subnodes\", () => {\r",
													"    const OTPPage_actual = jsonData;\r",
													"    const OTPPage_expected = JSON.parse(pm.collectionVariables.get(\"AuthTree_CHRegistration_node_OTPPage_subnodes\"));\r",
													"\r",
													"    let utils = eval(environment.utils)();\r",
													"    pm.expect(utils.compare.deepEqualNodes(OTPPage_actual, OTPPage_expected), `CHRegistration -> OTP Page node contains incorrect subnode in the collection,  \r",
													"            Expected => ${JSON.stringify(OTPPage_expected)}   \r",
													"            Actual => ${JSON.stringify(OTPPage_actual)}`).to.be.true;\r",
													"\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "cookie",
												"value": "{{cookie_Name}} = {{session_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{platformUrl}}/am/json/{{realm}}/realm-config/authentication/authenticationtrees/nodes/PageNode/{{AuthTree_CHRegistration_node_OTPPage_id}}",
											"host": [
												"{{platformUrl}}"
											],
											"path": [
												"am",
												"json",
												"{{realm}}",
												"realm-config",
												"authentication",
												"authenticationtrees",
												"nodes",
												"PageNode",
												"{{AuthTree_CHRegistration_node_OTPPage_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Notify JWT - SMS",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = JSON.parse(responseBody);\r",
													"\r",
													"pm.test(\"CHRegistration -> Node -> Create Notify JWT - SMS node contains correct subnodes\", () => {\r",
													"    const CreateNotify_actual = jsonData;\r",
													"    const CreateNotify_expected = JSON.parse(pm.collectionVariables.get(\"AuthTree_CHRegistration_node_CreateNotifyJWTSMS_subnodes\"));\r",
													"\r",
													"    let utils = eval(environment.utils)();\r",
													"    pm.expect(utils.compare.deepEqualNodes(CreateNotify_actual, CreateNotify_expected), `CHRegistration ->Create Notify JWT - SMS node contains incorrect subnode in the collection,  \r",
													"            Expected => ${JSON.stringify(CreateNotify_expected)}   \r",
													"            Actual => ${JSON.stringify(CreateNotify_actual)}`).to.be.true;\r",
													"\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "cookie",
												"value": "{{cookie_Name}} = {{session_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{platformUrl}}/am/json/{{realm}}/realm-config/authentication/authenticationtrees/nodes/ScriptedDecisionNode/{{AuthTree_CHRegistration_node_CreateNotifyJWTSMS_id}}",
											"host": [
												"{{platformUrl}}"
											],
											"path": [
												"am",
												"json",
												"{{realm}}",
												"realm-config",
												"authentication",
												"authenticationtrees",
												"nodes",
												"ScriptedDecisionNode",
												"{{AuthTree_CHRegistration_node_CreateNotifyJWTSMS_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Notify JWT - Email",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = JSON.parse(responseBody);\r",
													"\r",
													"pm.test(\"CHRegistration -> Node -> Create Notify JWT - Email node contains correct subnodes\", () => {\r",
													"    const CreateNotify_actual = jsonData;\r",
													"    const CreateNotify_expected = JSON.parse(pm.collectionVariables.get(\"AuthTree_CHRegistration_node_CreateNotifyJWTEmail_subnodes\"));\r",
													"\r",
													"    let utils = eval(environment.utils)();\r",
													"    pm.expect(utils.compare.deepEqualNodes(CreateNotify_actual, CreateNotify_expected), `CHRegistration ->Create Notify JWT - Email node contains incorrect subnode in the collection,  \r",
													"            Expected => ${JSON.stringify(CreateNotify_expected)}   \r",
													"            Actual => ${JSON.stringify(CreateNotify_actual)}`).to.be.true;\r",
													"        \r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "cookie",
												"value": "{{cookie_Name}} = {{session_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{platformUrl}}/am/json/{{realm}}/realm-config/authentication/authenticationtrees/nodes/ScriptedDecisionNode/{{AuthTree_CHRegistration_node_CreateNotifyJWTEmail_id}}",
											"host": [
												"{{platformUrl}}"
											],
											"path": [
												"am",
												"json",
												"{{realm}}",
												"realm-config",
												"authentication",
												"authenticationtrees",
												"nodes",
												"ScriptedDecisionNode",
												"{{AuthTree_CHRegistration_node_CreateNotifyJWTEmail_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create & Email link",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = JSON.parse(responseBody);\r",
													"\r",
													"pm.test(\"CHRegistration -> Node -> Create Notify JWT - Email node contains correct subnodes\", () => {\r",
													"    const CreateNotify_actual = jsonData;\r",
													"    const CreateNotify_expected = JSON.parse(pm.collectionVariables.get(\"AuthTree_CHRegistration_node_CreateEmailLink_subnodes\"));\r",
													"\r",
													"    let utils = eval(environment.utils)();\r",
													"    pm.expect(utils.compare.deepEqualNodes(CreateNotify_actual, CreateNotify_expected), `CHRegistration ->Create Notify JWT - Email node contains incorrect subnode in the collection,  \r",
													"            Expected => ${JSON.stringify(CreateNotify_expected)}   \r",
													"            Actual => ${JSON.stringify(CreateNotify_actual)}`).to.be.true;\r",
													"        \r",
													"});\r",
													"\r",
													"//deep comparing two objects \r",
													"function deepEqual(object1, object2) {\r",
													"    const keys1 = Object.keys(object1);\r",
													"    const keys2 = Object.keys(object2);\r",
													"\r",
													"    if (keys1.length !== keys2.length) {\r",
													"        return false;\r",
													"    }\r",
													"\r",
													"    for (const key of keys1) {\r",
													"        const val1 = object1[key];\r",
													"        const val2 = object2[key];\r",
													"        const areObjects = isObject(val1) && isObject(val2);\r",
													"        if (\r",
													"            areObjects && !deepEqual(val1, val2) ||\r",
													"            !areObjects && val1 !== val2\r",
													"        ) {\r",
													"            return false;\r",
													"        }\r",
													"    }\r",
													"\r",
													"    return true;\r",
													"}\r",
													"\r",
													"//validate if object is valid\r",
													"function isObject(object) {\r",
													"    return object != null && typeof object === 'object';\r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "cookie",
												"value": "{{cookie_Name}} = {{session_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{platformUrl}}/am/json/{{realm}}/realm-config/authentication/authenticationtrees/nodes/ScriptedDecisionNode/{{AuthTree_CHRegistration_node_CreateEmailLink_id}}",
											"host": [
												"{{platformUrl}}"
											],
											"path": [
												"am",
												"json",
												"{{realm}}",
												"realm-config",
												"authentication",
												"authenticationtrees",
												"nodes",
												"ScriptedDecisionNode",
												"{{AuthTree_CHRegistration_node_CreateEmailLink_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Check phone entered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = JSON.parse(responseBody);\r",
													"\r",
													"pm.test(\"CHRegistration -> Node -> check phone number node contains correct subnodes\", () => {\r",
													"    const phoneNumberNode_actual = jsonData;\r",
													"    const phoneNumberNode_expected = JSON.parse(pm.collectionVariables.get(\"AuthTree_CHRegistration_node_CheckPhone_subnodes\"));\r",
													"\r",
													"    let utils = eval(environment.utils)();\r",
													"    pm.expect(utils.compare.deepEqualNodes(phoneNumberNode_actual, phoneNumberNode_expected), `CHRegistration -> check phone number node contains incorrect subnode in the collection,  \r",
													"            Expected => ${JSON.stringify(phoneNumberNode_actual)}   \r",
													"            Actual => ${JSON.stringify(phoneNumberNode_expected)}`).to.be.true;\r",
													"        \r",
													"});\r",
													"\r",
													"//deep comparing two objects \r",
													"function deepEqual(object1, object2) {\r",
													"    const keys1 = Object.keys(object1);\r",
													"    const keys2 = Object.keys(object2);\r",
													"\r",
													"    if (keys1.length !== keys2.length) {\r",
													"        return false;\r",
													"    }\r",
													"\r",
													"    for (const key of keys1) {\r",
													"        const val1 = object1[key];\r",
													"        const val2 = object2[key];\r",
													"        const areObjects = isObject(val1) && isObject(val2);\r",
													"        if (\r",
													"            areObjects && !deepEqual(val1, val2) ||\r",
													"            !areObjects && val1 !== val2\r",
													"        ) {\r",
													"            return false;\r",
													"        }\r",
													"    }\r",
													"\r",
													"    return true;\r",
													"}\r",
													"\r",
													"//validate if object is valid\r",
													"function isObject(object) {\r",
													"    return object != null && typeof object === 'object';\r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "cookie",
												"value": "{{cookie_Name}} = {{session_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{platformUrl}}/am/json/{{realm}}/realm-config/authentication/authenticationtrees/nodes/ScriptedDecisionNode/{{AuthTree_CHRegistration_node_CheckPhone_id}}",
											"host": [
												"{{platformUrl}}"
											],
											"path": [
												"am",
												"json",
												"{{realm}}",
												"realm-config",
												"authentication",
												"authenticationtrees",
												"nodes",
												"ScriptedDecisionNode",
												"{{AuthTree_CHRegistration_node_CheckPhone_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Email Collector",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = JSON.parse(responseBody);\r",
													"\r",
													"pm.test(\"CHRegistration -> Node -> Email collector node contains correct subnodes\", () => {\r",
													"    const  EmailCollector_actual = jsonData;\r",
													"    const  EmailCollector_expected = JSON.parse(pm.collectionVariables.get(\"AuthTree_CHRegistration_node_EmailCollector_subnodes\"));\r",
													"\r",
													"    let utils = eval(environment.utils)();\r",
													"    pm.expect(utils.compare.deepEqualNodes(EmailCollector_actual, EmailCollector_expected), `CHRegistration -> Email collector node contains incorrect subnode in the collection,  \r",
													"            Expected => ${JSON.stringify(EmailCollector_expected)}   \r",
													"            Actual => ${JSON.stringify(EmailCollector_actual)}`).to.be.true;\r",
													"        \r",
													"});\r",
													"\r",
													"//deep comparing two objects \r",
													"function deepEqual(object1, object2) {\r",
													"    const keys1 = Object.keys(object1);\r",
													"    const keys2 = Object.keys(object2);\r",
													"\r",
													"    if (keys1.length !== keys2.length) {\r",
													"        return false;\r",
													"    }\r",
													"\r",
													"    for (const key of keys1) {\r",
													"        const val1 = object1[key];\r",
													"        const val2 = object2[key];\r",
													"        const areObjects = isObject(val1) && isObject(val2);\r",
													"        if (\r",
													"            areObjects && !deepEqual(val1, val2) ||\r",
													"            !areObjects && val1 !== val2\r",
													"        ) {\r",
													"            return false;\r",
													"        }\r",
													"    }\r",
													"\r",
													"    return true;\r",
													"}\r",
													"\r",
													"//validate if object is valid\r",
													"function isObject(object) {\r",
													"    return object != null && typeof object === 'object';\r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "cookie",
												"value": "{{cookie_Name}} = {{session_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{platformUrl}}/am/json/{{realm}}/realm-config/authentication/authenticationtrees/nodes/PageNode/{{AuthTree_CHRegistration_node_EmailCollector_id}}",
											"host": [
												"{{platformUrl}}"
											],
											"path": [
												"am",
												"json",
												"{{realm}}",
												"realm-config",
												"authentication",
												"authenticationtrees",
												"nodes",
												"PageNode",
												"{{AuthTree_CHRegistration_node_EmailCollector_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Email Collector -> Attribute collector",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = JSON.parse(responseBody);\r",
													"\r",
													"pm.test(\"CHRegistration -> Node -> Email Collector -> Attribute collector node contains correct subnodes\", () => {\r",
													"    const Attributecollector_actual = jsonData;\r",
													"    const Attributecollector_expected = JSON.parse(pm.collectionVariables.get(\"AuthTree_CHRegistration_node_EmailCollector_AttributeCollector_subnodes\"));\r",
													"\r",
													"    let utils = eval(environment.utils)();\r",
													"    pm.expect(utils.compare.deepEqualNodes(Attributecollector_actual, Attributecollector_expected), `CHRegistration -> Email Collector -> Attribute collector contains incorrect subnode in the collection,  \r",
													"            Expected => ${JSON.stringify(Attributecollector_expected)}   \r",
													"            Actual => ${JSON.stringify(Attributecollector_actual)}`).to.be.true;\r",
													"        \r",
													"});\r",
													"\r",
													"//deep comparing two objects \r",
													"function deepEqual(object1, object2) {\r",
													"    const keys1 = Object.keys(object1);\r",
													"    const keys2 = Object.keys(object2);\r",
													"\r",
													"    if (keys1.length !== keys2.length) {\r",
													"        return false;\r",
													"    }\r",
													"\r",
													"    for (const key of keys1) {\r",
													"        const val1 = object1[key];\r",
													"        const val2 = object2[key];\r",
													"        const areObjects = isObject(val1) && isObject(val2);\r",
													"        if (\r",
													"            areObjects && !deepEqual(val1, val2) ||\r",
													"            !areObjects && val1 !== val2\r",
													"        ) {\r",
													"            return false;\r",
													"        }\r",
													"    }\r",
													"\r",
													"    return true;\r",
													"}\r",
													"\r",
													"//validate if object is valid\r",
													"function isObject(object) {\r",
													"    return object != null && typeof object === 'object';\r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "cookie",
												"value": "{{cookie_Name}} = {{session_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{platformUrl}}/am/json/{{realm}}/realm-config/authentication/authenticationtrees/nodes/AttributeCollectorNode/{{AuthTree_CHRegistration_node_EmailCollector_AttributeCollector_id}}",
											"host": [
												"{{platformUrl}}"
											],
											"path": [
												"am",
												"json",
												"{{realm}}",
												"realm-config",
												"authentication",
												"authenticationtrees",
												"nodes",
												"AttributeCollectorNode",
												"{{AuthTree_CHRegistration_node_EmailCollector_AttributeCollector_id}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "CHVerifyReg",
							"item": [
								{
									"name": "Authentication to Top-Level Realm",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const JSONResponse = JSON.parse(responseBody);",
													"",
													"// Did request have a callback?",
													"if(JSONResponse.authId && JSONResponse.authId != \"\")",
													"{",
													"  // Set `authId` variable",
													"  pm.environment.set(\"authId\", JSONResponse.authId);",
													"}",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableCookies": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"description": "The media type of the resource.",
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"description": "This collection documents version 2.1 of the authentication resource.",
												"key": "Accept-API-Version",
												"value": "resource=2.1",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{platformUrl}}/am/json/authenticate",
											"host": [
												"{{platformUrl}}"
											],
											"path": [
												"am",
												"json",
												"authenticate"
											]
										},
										"description": "To get started, request the callbacks from the top-level realm."
									},
									"response": []
								},
								{
									"name": "Authenticate as ID Cloud Admin and Get Session Token, and Cookie Name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const JSONResponse = JSON.parse(responseBody);",
													"",
													"// Did request return SSO Token?",
													"if(JSONResponse.tokenId && JSONResponse.tokenId != \"\")",
													"{",
													"  // Set `session token` variable",
													"  pm.environment.set(\"session_token\", JSONResponse.tokenId);",
													"",
													"  // Remove `authId` variable",
													"  pm.environment.unset(\"authId\");",
													"",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableCookies": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"description": "Specifies that the `/json/authenticate` endpoint uses JSON format for requests.",
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"description": "Specifies the version of the `/json/authenticate` endpoint to use.",
												"key": "Accept-API-Version",
												"value": "resource=2.1, protocol=1.0",
												"disabled": true
											},
											{
												"key": "",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"authId\": \"{{authId}}\",\n    \"callbacks\": [\n        {\n            \"type\": \"NameCallback\",\n            \"output\": [\n                {\n                    \"name\": \"prompt\",\n                    \"value\": \"User Name\"\n                }\n            ],\n            \"input\": [\n                {\n                    \"name\": \"IDToken1\",\n                    \"value\": \"{{IDCloudAdminUsername}}\"\n                }\n            ],\n            \"_id\": 0\n        },\n        {\n            \"type\": \"PasswordCallback\",\n            \"output\": [\n                {\n                    \"name\": \"prompt\",\n                    \"value\": \"Password\"\n                }\n            ],\n            \"input\": [\n                {\n                    \"name\": \"IDToken2\",\n                    \"value\": \"{{IDCloudAdminPassword}}\"\n                }\n            ],\n            \"_id\": 1\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{platformUrl}}/am/json/authenticate",
											"host": [
												"{{platformUrl}}"
											],
											"path": [
												"am",
												"json",
												"authenticate"
											]
										},
										"description": "Return the callback, specifying the credentials of an administrative user.\nThis request obtains the name used in headers to specify the session token. To manually provide the session token name, in the ID Cloud console, navigate to **Tenant Settings**, and copy the *Cookie Name* value. Use this value in the `cookieName` variable in your Postman Collection."
									},
									"response": []
								},
								{
									"name": "Create Users",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = JSON.parse(responseBody);\r",
													"\r",
													"pm.test(\"CHRegistration -> Node -> Create Users node contains correct subnodes\", () => {\r",
													"    const  createUsers_actual = jsonData;\r",
													"    const createUsers_expected = JSON.parse(pm.collectionVariables.get(\"AuthTree_CHVerifyReg_nodes_createUser_subnodes\"));\r",
													"\r",
													"    let utils = eval(environment.utils)();\r",
													"    pm.expect(utils.compare.deepEqualNodes(createUsers_actual, createUsers_expected), `CHRegistration -> Create Users node contains incorrect subnode in the collection,  \r",
													"            Expected => ${JSON.stringify(createUsers_expected)}   \r",
													"            Actual => ${JSON.stringify(createUsers_actual)}`).to.be.true;\r",
													"        \r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "cookie",
												"value": "{{cookie_Name}} = {{session_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{platformUrl}}/am/json/{{realm}}/realm-config/authentication/authenticationtrees/nodes/CreateObjectNode/{{AuthTree_CHVerifyReg_nodes_createUser_id}}",
											"host": [
												"{{platformUrl}}"
											],
											"path": [
												"am",
												"json",
												"{{realm}}",
												"realm-config",
												"authentication",
												"authenticationtrees",
												"nodes",
												"CreateObjectNode",
												"{{AuthTree_CHVerifyReg_nodes_createUser_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify Reg Token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = JSON.parse(responseBody);\r",
													"\r",
													"pm.test(\"CHRegistration -> Node -> Verify Reg Token node contains correct subnodes\", () => {\r",
													"    const  actual = jsonData;\r",
													"    const  expected = JSON.parse(pm.collectionVariables.get(\"AuthTree_CHVerifyReg_nodes_verifyRegToken_subnodes\"));\r",
													"\r",
													"    let utils = eval(environment.utils)();\r",
													"    pm.expect(utils.compare.deepEqualNodes(actual, expected), `CHRegistration -> Verify Reg Token node contains incorrect subnode in the collection,  \r",
													"            Expected => ${JSON.stringify(expected)}   \r",
													"            Actual => ${JSON.stringify(actual)}`).to.be.true;\r",
													"        \r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "cookie",
												"value": "{{cookie_Name}} = {{session_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{platformUrl}}/am/json/{{realm}}/realm-config/authentication/authenticationtrees/nodes/ScriptedDecisionNode/{{AuthTree_CHVerifyReg_nodes_verifyRegToken_id}}",
											"host": [
												"{{platformUrl}}"
											],
											"path": [
												"am",
												"json",
												"{{realm}}",
												"realm-config",
												"authentication",
												"authenticationtrees",
												"nodes",
												"ScriptedDecisionNode",
												"{{AuthTree_CHVerifyReg_nodes_verifyRegToken_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Identify Existing User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = JSON.parse(responseBody);\r",
													"\r",
													"pm.test(\"CHRegistration -> Node -> Identify Existing User node contains correct subnodes\", () => {\r",
													"    const  actual = jsonData;\r",
													"    const  expected = JSON.parse(pm.collectionVariables.get(\"AuthTree_CHVerifyReg_node_identifyExistingUser_subnodes\"));\r",
													"\r",
													"    let utils = eval(environment.utils)();\r",
													"    pm.expect(utils.compare.deepEqualNodes(actual, expected), `CHRegistration -> Identify Existing User node contains incorrect subnode in the collection,  \r",
													"            Expected => ${JSON.stringify(expected)}   \r",
													"            Actual => ${JSON.stringify(actual)}`).to.be.true;\r",
													"        \r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "cookie",
												"value": "{{cookie_Name}} = {{session_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{platformUrl}}/am/json/{{realm}}/realm-config/authentication/authenticationtrees/nodes/IdentifyExistingUserNode/{{AuthTree_CHVerifyReg_node_identifyExistingUser_id}}",
											"host": [
												"{{platformUrl}}"
											],
											"path": [
												"am",
												"json",
												"{{realm}}",
												"realm-config",
												"authentication",
												"authenticationtrees",
												"nodes",
												"IdentifyExistingUserNode",
												"{{AuthTree_CHVerifyReg_node_identifyExistingUser_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Callback Existing User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = JSON.parse(responseBody);\r",
													"\r",
													"pm.test(\"CHRegistration -> Node -> Callback Existing User node contains correct subnodes\", () => {\r",
													"    const  actual = jsonData;\r",
													"    const  expected = JSON.parse(pm.collectionVariables.get(\"AuthTree_CHVerifyReg_node_callbackExistingUser_subnodes\"));\r",
													"\r",
													"    let utils = eval(environment.utils)();\r",
													"    pm.expect(utils.compare.deepEqualNodes(actual, expected), `CHRegistration -> Identify Existing User node contains incorrect subnode in the collection,  \r",
													"            Expected => ${JSON.stringify(expected)}   \r",
													"            Actual => ${JSON.stringify(actual)}`).to.be.true;\r",
													"        \r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "cookie",
												"value": "{{cookie_Name}} = {{session_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{platformUrl}}/am/json/{{realm}}/realm-config/authentication/authenticationtrees/nodes/ScriptedDecisionNode/{{AuthTree_CHVerifyReg_node_callbackExistingUser_id}}",
											"host": [
												"{{platformUrl}}"
											],
											"path": [
												"am",
												"json",
												"{{realm}}",
												"realm-config",
												"authentication",
												"authenticationtrees",
												"nodes",
												"ScriptedDecisionNode",
												"{{AuthTree_CHVerifyReg_node_callbackExistingUser_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Password Collector",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = JSON.parse(responseBody);\r",
													"\r",
													"pm.test(\"CHRegistration -> Node -> Password Collector node contains correct subnodes\", () => {\r",
													"    const actual = jsonData;\r",
													"    const expected = JSON.parse(pm.collectionVariables.get(\"AuthTree_CHVerifyReg_node_passwordCollector_subnodes\"));\r",
													"\r",
													"    let utils = eval(environment.utils)();\r",
													"    pm.expect(utils.compare.deepEqualNodes(actual, expected), `CHRegistration -> Password Collector node contains incorrect subnode in the collection,  \r",
													"            Expected => ${JSON.stringify(expected)}   \r",
													"            Actual => ${JSON.stringify(actual)}`).to.be.true;\r",
													"\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "cookie",
												"value": "{{cookie_Name}} = {{session_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{platformUrl}}/am/json/{{realm}}/realm-config/authentication/authenticationtrees/nodes/PageNode/{{AuthTree_CHVerifyReg_node_passwordCollector_id}}",
											"host": [
												"{{platformUrl}}"
											],
											"path": [
												"am",
												"json",
												"{{realm}}",
												"realm-config",
												"authentication",
												"authenticationtrees",
												"nodes",
												"PageNode",
												"{{AuthTree_CHVerifyReg_node_passwordCollector_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Identify Existing User 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = JSON.parse(responseBody);\r",
													"\r",
													"pm.test(\"CHRegistration -> Node -> Identify Existing User node contains correct subnodes\", () => {\r",
													"    const actual = jsonData;\r",
													"    const expected = JSON.parse(pm.collectionVariables.get(\"AuthTree_CHVerifyReg_node_identifyExistingUser1_subnodes\"));\r",
													"\r",
													"    let utils = eval(environment.utils)();\r",
													"    pm.expect(utils.compare.deepEqualNodes(actual, expected), `CHRegistration -> Identify Existing User node contains incorrect subnode in the collection,  \r",
													"            Expected => ${JSON.stringify(expected)}   \r",
													"            Actual => ${JSON.stringify(actual)}`).to.be.true;\r",
													"\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "cookie",
												"value": "{{cookie_Name}} = {{session_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{platformUrl}}/am/json/{{realm}}/realm-config/authentication/authenticationtrees/nodes/IdentifyExistingUserNode/{{AuthTree_CHVerifyReg_node_identifyExistingUser1_id}}",
											"host": [
												"{{platformUrl}}"
											],
											"path": [
												"am",
												"json",
												"{{realm}}",
												"realm-config",
												"authentication",
												"authenticationtrees",
												"nodes",
												"IdentifyExistingUserNode",
												"{{AuthTree_CHVerifyReg_node_identifyExistingUser1_id}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "CHResetPassword",
					"item": [
						{
							"name": "Authentication to Top-Level Realm",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const JSONResponse = JSON.parse(responseBody);",
											"",
											"// Did request have a callback?",
											"if(JSONResponse.authId && JSONResponse.authId != \"\")",
											"{",
											"  // Set `authId` variable",
											"  pm.environment.set(\"authId\", JSONResponse.authId);",
											"}",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"description": "The media type of the resource.",
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"description": "This collection documents version 2.1 of the authentication resource.",
										"key": "Accept-API-Version",
										"value": "resource=2.1",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/authenticate",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"authenticate"
									]
								},
								"description": "To get started, request the callbacks from the top-level realm."
							},
							"response": []
						},
						{
							"name": "Authenticate as ID Cloud Admin and Get Session Token, and Cookie Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const JSONResponse = JSON.parse(responseBody);",
											"",
											"// Did request return SSO Token?",
											"if(JSONResponse.tokenId && JSONResponse.tokenId != \"\")",
											"{",
											"  // Set `session token` variable",
											"  pm.environment.set(\"session_token\", JSONResponse.tokenId);",
											"",
											"  // Remove `authId` variable",
											"  pm.environment.unset(\"authId\");",
											"",
											"}",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"description": "Specifies that the `/json/authenticate` endpoint uses JSON format for requests.",
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"description": "Specifies the version of the `/json/authenticate` endpoint to use.",
										"key": "Accept-API-Version",
										"value": "resource=2.1, protocol=1.0",
										"disabled": true
									},
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"authId\": \"{{authId}}\",\n    \"callbacks\": [\n        {\n            \"type\": \"NameCallback\",\n            \"output\": [\n                {\n                    \"name\": \"prompt\",\n                    \"value\": \"User Name\"\n                }\n            ],\n            \"input\": [\n                {\n                    \"name\": \"IDToken1\",\n                    \"value\": \"{{IDCloudAdminUsername}}\"\n                }\n            ],\n            \"_id\": 0\n        },\n        {\n            \"type\": \"PasswordCallback\",\n            \"output\": [\n                {\n                    \"name\": \"prompt\",\n                    \"value\": \"Password\"\n                }\n            ],\n            \"input\": [\n                {\n                    \"name\": \"IDToken2\",\n                    \"value\": \"{{IDCloudAdminPassword}}\"\n                }\n            ],\n            \"_id\": 1\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platformUrl}}/am/json/authenticate",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"authenticate"
									]
								},
								"description": "Return the callback, specifying the credentials of an administrative user.\nThis request obtains the name used in headers to specify the session token. To manually provide the session token name, in the ID Cloud console, navigate to **Tenant Settings**, and copy the *Cookie Name* value. Use this value in the `cookieName` variable in your Postman Collection."
							},
							"response": []
						},
						{
							"name": "Update Password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"CHResetPassword -> Nodes -> Update Password contains correct subnodes\", () => {\r",
											"    const actual = jsonData;\r",
											"    const expected = JSON.parse(pm.collectionVariables.get(\"CHResetPassword_nodes_UpdatePassword\"));\r",
											"\r",
											"    let utils = eval(environment.utils)();\r",
											"    pm.expect(utils.compare.deepEqualNodes(expected, actual), `CHResetPassword -> Nodes -> Update Password contains incorrect subnodes,  \r",
											"            Expected => ${JSON.stringify(expected)}   \r",
											"            Actual => ${JSON.stringify(actual)}`).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/realm-config/authentication/authenticationtrees/nodes/PatchObjectNode/067ea40b-8eb7-48b9-8de3-c9bf73103e2d",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"realm-config",
										"authentication",
										"authenticationtrees",
										"nodes",
										"PatchObjectNode",
										"067ea40b-8eb7-48b9-8de3-c9bf73103e2d"
									]
								}
							},
							"response": []
						},
						{
							"name": "Password Updated",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"CHResetPassword -> Nodes -> Password Updated contains correct subnodes\", () => {\r",
											"    const actual = jsonData;\r",
											"    const expected = JSON.parse(pm.collectionVariables.get(\"CHResetPassword_nodes_PasswordUpdate\"));\r",
											"\r",
											"    let utils = eval(environment.utils)();\r",
											"    pm.expect(utils.compare.deepEqualNodes(expected, actual), `CHResetPassword -> Nodes -> Password Updated contains incorrect subnodes,  \r",
											"            Expected => ${JSON.stringify(expected)}   \r",
											"            Actual => ${JSON.stringify(actual)}`).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/realm-config/authentication/authenticationtrees/nodes/ScriptedDecisionNode/129a2a4d-ea48-4ea4-a02f-eff667ffcc0e",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"realm-config",
										"authentication",
										"authenticationtrees",
										"nodes",
										"ScriptedDecisionNode",
										"129a2a4d-ea48-4ea4-a02f-eff667ffcc0e"
									]
								}
							},
							"response": []
						},
						{
							"name": "Start or Resume",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"CHResetPassword -> Nodes -> Start or Resume contains correct subnodes\", () => {\r",
											"    const actual = jsonData;\r",
											"    const expected = JSON.parse(pm.collectionVariables.get(\"CHResetPassword_nodes_StartOrResume\"));\r",
											"\r",
											"    let utils = eval(environment.utils)();\r",
											"    pm.expect(utils.compare.deepEqualNodes(expected, actual), `CHResetPassword -> Nodes -> Start or Resume contains incorrect subnodes,  \r",
											"            Expected => ${JSON.stringify(expected)}   \r",
											"            Actual => ${JSON.stringify(actual)}`).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/realm-config/authentication/authenticationtrees/nodes/ScriptedDecisionNode/29524a97-032e-40b1-8cd0-ef3938309671",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"realm-config",
										"authentication",
										"authenticationtrees",
										"nodes",
										"ScriptedDecisionNode",
										"29524a97-032e-40b1-8cd0-ef3938309671"
									]
								}
							},
							"response": []
						},
						{
							"name": "Enter Email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"CHResetPassword -> Nodes -> Enter Email contains correct subnodes\", () => {\r",
											"    const actual = jsonData;\r",
											"    const expected = JSON.parse(pm.collectionVariables.get(\"CHResetPassword_nodes_EnterEmail\"));\r",
											"\r",
											"    let utils = eval(environment.utils)();\r",
											"    pm.expect(utils.compare.deepEqualNodes(expected, actual), `CHResetPassword -> Nodes -> Enter Email contains incorrect subnodes,  \r",
											"            Expected => ${JSON.stringify(expected)}   \r",
											"            Actual => ${JSON.stringify(actual)}`).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/realm-config/authentication/authenticationtrees/nodes/PageNode/4a0a458b-f374-4a7e-a5ec-5352aa21f834",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"realm-config",
										"authentication",
										"authenticationtrees",
										"nodes",
										"PageNode",
										"4a0a458b-f374-4a7e-a5ec-5352aa21f834"
									]
								}
							},
							"response": []
						},
						{
							"name": "Identify Existing User 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"CHResetPassword -> Nodes -> Identify Existing User 2 contains correct subnodes\", () => {\r",
											"    const actual = jsonData;\r",
											"    const expected = JSON.parse(pm.collectionVariables.get(\"CHResetPassword_nodes_IdentifyExistingUser2\"));\r",
											"\r",
											"    let utils = eval(environment.utils)();\r",
											"    pm.expect(utils.compare.deepEqualNodes(expected, actual), `CHResetPassword -> Nodes -> Identify Existing User 2 contains incorrect subnodes,  \r",
											"            Expected => ${JSON.stringify(expected)}   \r",
											"            Actual => ${JSON.stringify(actual)}`).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/realm-config/authentication/authenticationtrees/nodes/IdentifyExistingUserNode/4b011f55-d230-407d-8e91-8c5d0f573133",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"realm-config",
										"authentication",
										"authenticationtrees",
										"nodes",
										"IdentifyExistingUserNode",
										"4b011f55-d230-407d-8e91-8c5d0f573133"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cannot Find User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"CHResetPassword -> Nodes -> Cannot Find User contains correct subnodes\", () => {\r",
											"    const actual = jsonData;\r",
											"    const expected = JSON.parse(pm.collectionVariables.get(\"CHResetPassword_nodes_CannotFindUser\"));\r",
											"\r",
											"    let utils = eval(environment.utils)();\r",
											"    pm.expect(utils.compare.deepEqualNodes(expected, actual), `CHResetPassword -> Nodes -> Cannot Find User contains incorrect subnodes,  \r",
											"            Expected => ${JSON.stringify(expected)}   \r",
											"            Actual => ${JSON.stringify(actual)}`).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/realm-config/authentication/authenticationtrees/nodes/PageNode/56c8d746-4a57-467b-bc70-8cb944e98d8e",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"realm-config",
										"authentication",
										"authenticationtrees",
										"nodes",
										"PageNode",
										"56c8d746-4a57-467b-bc70-8cb944e98d8e"
									]
								}
							},
							"response": []
						},
						{
							"name": "Choose Email/SMS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"CHResetPassword -> Nodes -> Choice Collector contains correct subnodes\", () => {\r",
											"    const actual = jsonData;\r",
											"    const expected = JSON.parse(pm.collectionVariables.get(\"CHResetPassword_nodes_ChoiceCollector\"));\r",
											"\r",
											"    let utils = eval(environment.utils)();\r",
											"    pm.expect(utils.compare.deepEqualNodes(expected, actual), `CHResetPassword -> Nodes -> Choice Collector contains incorrect subnodes,  \r",
											"            Expected => ${JSON.stringify(expected)}   \r",
											"            Actual => ${JSON.stringify(actual)}`).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/realm-config/authentication/authenticationtrees/nodes/PageNode/5fc9e55b-6a0a-454d-89ce-b7c1b4d6a29e",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"realm-config",
										"authentication",
										"authenticationtrees",
										"nodes",
										"PageNode",
										"5fc9e55b-6a0a-454d-89ce-b7c1b4d6a29e"
									]
								}
							},
							"response": []
						},
						{
							"name": "Identify Existing User 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"CHResetPassword -> Nodes -> Identify Existing User 1 contains correct subnodes\", () => {\r",
											"    const actual = jsonData;\r",
											"    const expected = JSON.parse(pm.collectionVariables.get(\"CHResetPassword_nodes_IdentifyExistingUser1\"));\r",
											"\r",
											"    let utils = eval(environment.utils)();\r",
											"    pm.expect(utils.compare.deepEqualNodes(expected, actual), `CHResetPassword -> Nodes -> Identify Existing User 1 contains incorrect subnodes,  \r",
											"            Expected => ${JSON.stringify(expected)}   \r",
											"            Actual => ${JSON.stringify(actual)}`).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/realm-config/authentication/authenticationtrees/nodes/IdentifyExistingUserNode/6de1f9ea-0421-4065-8b70-bed9152c9a05",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"realm-config",
										"authentication",
										"authenticationtrees",
										"nodes",
										"IdentifyExistingUserNode",
										"6de1f9ea-0421-4065-8b70-bed9152c9a05"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send MFA text",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"CHResetPassword -> Nodes -> Send MFA text contains correct subnodes\", () => {\r",
											"    const actual = jsonData;\r",
											"    const expected = JSON.parse(pm.collectionVariables.get(\"CHResetPassword_nodes_SendMFAText\"));\r",
											"\r",
											"    let utils = eval(environment.utils)();\r",
											"    pm.expect(utils.compare.deepEqualNodes(expected, actual), `CHResetPassword -> Nodes -> Send MFA text contains incorrect subnodes,  \r",
											"            Expected => ${JSON.stringify(expected)}   \r",
											"            Actual => ${JSON.stringify(actual)}`).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/realm-config/authentication/authenticationtrees/nodes/ScriptedDecisionNode/70a15b0f-cb2a-48a9-81f0-6ba902a9e24a",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"realm-config",
										"authentication",
										"authenticationtrees",
										"nodes",
										"ScriptedDecisionNode",
										"70a15b0f-cb2a-48a9-81f0-6ba902a9e24a"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Notify JWT - SMS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"CHResetPassword -> Nodes -> Create Notify JWT - SMS contains correct subnodes\", () => {\r",
											"    const actual = jsonData;\r",
											"    const expected = JSON.parse(pm.collectionVariables.get(\"CHResetPassword_nodes_CreateNotifyJWTSMS\"));\r",
											"\r",
											"    let utils = eval(environment.utils)();\r",
											"    pm.expect(utils.compare.deepEqualNodes(expected, actual), `CHResetPassword -> Nodes -> Create Notify JWT - SMS contains incorrect subnodes,  \r",
											"            Expected => ${JSON.stringify(expected)}   \r",
											"            Actual => ${JSON.stringify(actual)}`).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/realm-config/authentication/authenticationtrees/nodes/ScriptedDecisionNode/79c759fc-b836-42b4-afd4-ad564d1bbe60",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"realm-config",
										"authentication",
										"authenticationtrees",
										"nodes",
										"ScriptedDecisionNode",
										"79c759fc-b836-42b4-afd4-ad564d1bbe60"
									]
								}
							},
							"response": []
						},
						{
							"name": "Enter OTP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"CHResetPassword -> Nodes -> Enter OTP contains correct subnodes\", () => {\r",
											"    const actual = jsonData;\r",
											"    const expected = JSON.parse(pm.collectionVariables.get(\"CHResetPassword_nodes_EnterOTP\"));\r",
											"\r",
											"    let utils = eval(environment.utils)();\r",
											"    pm.expect(utils.compare.deepEqualNodes(expected, actual), `CHResetPassword -> Nodes -> Enter OTP contains incorrect subnodes,  \r",
											"            Expected => ${JSON.stringify(expected)}   \r",
											"            Actual => ${JSON.stringify(actual)}`).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/realm-config/authentication/authenticationtrees/nodes/PageNode/843b8111-3af6-49fa-bf8d-a650e04dec2e",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"realm-config",
										"authentication",
										"authenticationtrees",
										"nodes",
										"PageNode",
										"843b8111-3af6-49fa-bf8d-a650e04dec2e"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Notify JWT - Email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"CHResetPassword -> Nodes -> Create Notify JWT - Email contains correct subnodes\", () => {\r",
											"    const actual = jsonData;\r",
											"    const expected = JSON.parse(pm.collectionVariables.get(\"CHResetPassword_nodes_CreateNotifyJWTEmail\"));\r",
											"\r",
											"    let utils = eval(environment.utils)();\r",
											"    pm.expect(utils.compare.deepEqualNodes(expected, actual), `CHResetPassword -> Nodes -> Create Notify JWT - Email contains incorrect subnodes,  \r",
											"            Expected => ${JSON.stringify(expected)}   \r",
											"            Actual => ${JSON.stringify(actual)}`).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/realm-config/authentication/authenticationtrees/nodes/ScriptedDecisionNode/8e86cb2b-52ab-4341-a89b-1379976c790a",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"realm-config",
										"authentication",
										"authenticationtrees",
										"nodes",
										"ScriptedDecisionNode",
										"8e86cb2b-52ab-4341-a89b-1379976c790a"
									]
								}
							},
							"response": []
						},
						{
							"name": "Email sent ok",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"CHResetPassword -> Nodes -> Email sent ok contains correct subnodes\", () => {\r",
											"    const actual = jsonData;\r",
											"    const expected = JSON.parse(pm.collectionVariables.get(\"CHResetPassword_nodes_EmailSentOk\"));\r",
											"\r",
											"    let utils = eval(environment.utils)();\r",
											"    pm.expect(utils.compare.deepEqualNodes(expected, actual), `CHResetPassword -> Nodes -> Email sent ok contains incorrect subnodes,  \r",
											"            Expected => ${JSON.stringify(expected)}   \r",
											"            Actual => ${JSON.stringify(actual)}`).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/realm-config/authentication/authenticationtrees/nodes/ScriptedDecisionNode/b39ecc00-d42f-4cff-8f2e-3256bb8b3669",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"realm-config",
										"authentication",
										"authenticationtrees",
										"nodes",
										"ScriptedDecisionNode",
										"b39ecc00-d42f-4cff-8f2e-3256bb8b3669"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Pwd Reset Email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"CHResetPassword -> Nodes ->Send Pwd Reset Email contains correct subnodes\", () => {\r",
											"    const actual = jsonData;\r",
											"    const expected = JSON.parse(pm.collectionVariables.get(\"CHResetPassword_nodes_SendPwdResetEmail\"));\r",
											"\r",
											"    let utils = eval(environment.utils)();\r",
											"    pm.expect(utils.compare.deepEqualNodes(expected, actual), `CHResetPassword -> Nodes ->Send Pwd Reset Email contains incorrect subnodes,  \r",
											"            Expected => ${JSON.stringify(expected)}   \r",
											"            Actual => ${JSON.stringify(actual)}`).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/realm-config/authentication/authenticationtrees/nodes/ScriptedDecisionNode/bb5fc733-547b-41da-9b51-f709cac78764",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"realm-config",
										"authentication",
										"authenticationtrees",
										"nodes",
										"ScriptedDecisionNode",
										"bb5fc733-547b-41da-9b51-f709cac78764"
									]
								}
							},
							"response": []
						},
						{
							"name": "Has Phone Number",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"CHResetPassword -> Nodes -> Has Phone Number contains correct subnodes\", () => {\r",
											"    const actual = jsonData;\r",
											"    const expected = JSON.parse(pm.collectionVariables.get(\"CHResetPassword_nodes_HasPhoneNumber\"));\r",
											"\r",
											"    let utils = eval(environment.utils)();\r",
											"    pm.expect(utils.compare.deepEqualNodes(expected, actual), `CHResetPassword -> Nodes -> Has Phone Number contains incorrect subnodes,  \r",
											"            Expected => ${JSON.stringify(expected)}   \r",
											"            Actual => ${JSON.stringify(actual)}`).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/realm-config/authentication/authenticationtrees/nodes/ScriptedDecisionNode/e5b2d3d4-0995-48ad-bf0c-ae2b8560387e",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"realm-config",
										"authentication",
										"authenticationtrees",
										"nodes",
										"ScriptedDecisionNode",
										"e5b2d3d4-0995-48ad-bf0c-ae2b8560387e"
									]
								}
							},
							"response": []
						},
						{
							"name": "Enter Password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"CHResetPassword -> Nodes -> Enter Password contains correct subnodes\", () => {\r",
											"    const actual = jsonData;\r",
											"    const expected = JSON.parse(pm.collectionVariables.get(\"CHResetPassword_nodes_EnterPassword\"));\r",
											"\r",
											"    let utils = eval(environment.utils)();\r",
											"    pm.expect(utils.compare.deepEqualNodes(expected, actual), `CHResetPassword -> Nodes ->Enter Password contains incorrect subnodes,  \r",
											"            Expected => ${JSON.stringify(expected)}   \r",
											"            Actual => ${JSON.stringify(actual)}`).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/realm-config/authentication/authenticationtrees/nodes/PageNode/e93a0cb6-2c4c-4210-8aaa-458903e9231a",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"realm-config",
										"authentication",
										"authenticationtrees",
										"nodes",
										"PageNode",
										"e93a0cb6-2c4c-4210-8aaa-458903e9231a"
									]
								}
							},
							"response": []
						},
						{
							"name": "Raise Error",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"CHResetPassword -> Nodes -> Raise Error contains correct subnodes\", () => {\r",
											"    const actual = jsonData;\r",
											"    const expected = JSON.parse(pm.collectionVariables.get(\"CHResetPassword_nodes_RaiseError\"));\r",
											"\r",
											"    let utils = eval(environment.utils)();\r",
											"    pm.expect(utils.compare.deepEqualNodes(expected, actual), `CHResetPassword -> Nodes ->Raise Error contains incorrect subnodes,  \r",
											"            Expected => ${JSON.stringify(expected)}   \r",
											"            Actual => ${JSON.stringify(actual)}`).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/realm-config/authentication/authenticationtrees/nodes/ScriptedDecisionNode/ff7ee39c-e731-438a-8bf0-8492d9ee61bd",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"realm-config",
										"authentication",
										"authenticationtrees",
										"nodes",
										"ScriptedDecisionNode",
										"ff7ee39c-e731-438a-8bf0-8492d9ee61bd"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retry Limit Decision",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"CHResetPassword -> Nodes -> Retry Limit Decision contains correct subnodes\", () => {\r",
											"    const actual = jsonData;\r",
											"    const expected = JSON.parse(pm.collectionVariables.get(\"CHResetPassword_nodes_RetryLimitDecision\"));\r",
											"\r",
											"    let utils = eval(environment.utils)();\r",
											"    pm.expect(utils.compare.deepEqualNodes(expected, actual), `CHResetPassword -> Nodes -> Retry Limit Decision contains incorrect subnodes,  \r",
											"            Expected => ${JSON.stringify(expected)}   \r",
											"            Actual => ${JSON.stringify(actual)}`).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/realm-config/authentication/authenticationtrees/nodes/RetryLimitDecisionNode/c98726b2-cee9-47ba-9677-40ae29223c65",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"realm-config",
										"authentication",
										"authenticationtrees",
										"nodes",
										"RetryLimitDecisionNode",
										"c98726b2-cee9-47ba-9677-40ae29223c65"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Scripts",
			"item": [
				{
					"name": "CHRegistration",
					"item": [
						{
							"name": "Authentication to Top-Level Realm",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const JSONResponse = JSON.parse(responseBody);",
											"",
											"// Did request have a callback?",
											"if(JSONResponse.authId && JSONResponse.authId != \"\")",
											"{",
											"  // Set `authId` variable",
											"  pm.environment.set(\"authId\", JSONResponse.authId);",
											"}",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"description": "The media type of the resource.",
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"description": "This collection documents version 2.1 of the authentication resource.",
										"key": "Accept-API-Version",
										"value": "resource=2.1",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/authenticate",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"authenticate"
									]
								},
								"description": "To get started, request the callbacks from the top-level realm."
							},
							"response": []
						},
						{
							"name": "Authenticate as ID Cloud Admin and Get Session Token, and Cookie Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const JSONResponse = JSON.parse(responseBody);",
											"",
											"// Did request return SSO Token?",
											"if(JSONResponse.tokenId && JSONResponse.tokenId != \"\")",
											"{",
											"  // Set `session token` variable",
											"  pm.environment.set(\"session_token\", JSONResponse.tokenId);",
											"",
											"  // Remove `authId` variable",
											"  pm.environment.unset(\"authId\");",
											"",
											"}",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"description": "Specifies that the `/json/authenticate` endpoint uses JSON format for requests.",
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"description": "Specifies the version of the `/json/authenticate` endpoint to use.",
										"key": "Accept-API-Version",
										"value": "resource=2.1, protocol=1.0",
										"disabled": true
									},
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"authId\": \"{{authId}}\",\n    \"callbacks\": [\n        {\n            \"type\": \"NameCallback\",\n            \"output\": [\n                {\n                    \"name\": \"prompt\",\n                    \"value\": \"User Name\"\n                }\n            ],\n            \"input\": [\n                {\n                    \"name\": \"IDToken1\",\n                    \"value\": \"{{IDCloudAdminUsername}}\"\n                }\n            ],\n            \"_id\": 0\n        },\n        {\n            \"type\": \"PasswordCallback\",\n            \"output\": [\n                {\n                    \"name\": \"prompt\",\n                    \"value\": \"Password\"\n                }\n            ],\n            \"input\": [\n                {\n                    \"name\": \"IDToken2\",\n                    \"value\": \"{{IDCloudAdminPassword}}\"\n                }\n            ],\n            \"_id\": 1\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platformUrl}}/am/json/authenticate",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"authenticate"
									]
								},
								"description": "Return the callback, specifying the credentials of an administrative user.\nThis request obtains the name used in headers to specify the session token. To manually provide the session token name, in the ID Cloud console, navigate to **Tenant Settings**, and copy the *Cookie Name* value. Use this value in the `cookieName` variable in your Postman Collection."
							},
							"response": []
						},
						{
							"name": "Callback to show OTP not valid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Script -> Callback to show OTP not valid Node contains correct subnodes\", () => {\r",
											"    const actual = jsonData;\r",
											"    const expected = JSON.parse(pm.collectionVariables.get(\"Script_Callback_to_show_OTP_not_valid\"));\r",
											"\r",
											"    let utils = eval(environment.utils)();\r",
											"    pm.expect(utils.compare.deepEqualScript(actual, expected), `Script -> Callback to show OTP not valid Node contains incorrect subnodes,  \r",
											"            Expected => ${JSON.stringify(expected)}   \r",
											"            Actual => ${JSON.stringify(actual)}`).to.be.true;\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/scripts/bf6c0ac8-8e13-4f11-8d99-d01b23e02a5c",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"scripts",
										"bf6c0ac8-8e13-4f11-8d99-d01b23e02a5c"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create token and send Email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Script -> Create Token and Send Email contains correct subnodes\", () => {\r",
											"    const actual = jsonData;\r",
											"    const expected = JSON.parse(pm.collectionVariables.get(\"Script_Create_token_send_Email\"));\r",
											"\r",
											"\r",
											"    let utils = eval(environment.utils)();\r",
											"    pm.expect(utils.compare.deepEqualScript(actual, expected), `Script -> Create Token and Send Email contains incorrect subnodes,  \r",
											"            Expected => ${JSON.stringify(expected)}   \r",
											"            Actual => ${JSON.stringify(actual)}`).to.be.true;\r",
											"\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/scripts/b6ca4a1f-573f-4a3a-a410-d18b01207f6e",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"scripts",
										"b6ca4a1f-573f-4a3a-a410-d18b01207f6e"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Notify JWT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Script -> Create Notify JWT contains correct subnodes\", () => {\r",
											"    const actual = jsonData;\r",
											"    const expected = JSON.parse(pm.collectionVariables.get(\"Script_Create_Notify_JWT\"));\r",
											"\r",
											"\r",
											"    let utils = eval(environment.utils)();\r",
											"    pm.expect(utils.compare.deepEqualScript(actual, expected), `Script -> Create Notify JWT contains incorrect subnodes,  \r",
											"            Expected => ${JSON.stringify(expected)}   \r",
											"            Actual => ${JSON.stringify(actual)}`).to.be.true;\r",
											"\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/scripts/df67765e-df3a-4503-9ba5-35c992b39259",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"scripts",
										"df67765e-df3a-4503-9ba5-35c992b39259"
									]
								}
							},
							"response": []
						},
						{
							"name": "Phone Number entered by user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Script -> Create Token and Send Email contains correct subnodes\", () => {\r",
											"    const actual = jsonData;\r",
											"    const expected = JSON.parse(pm.collectionVariables.get(\"Script_Phone_Number_entered\"));\r",
											"\r",
											"    let utils = eval(environment.utils)();\r",
											"    pm.expect(utils.compare.deepEqualScript(actual, expected), `Script -> Create Token and Send Email contains incorrect subnodes,  \r",
											"            Expected => ${JSON.stringify(expected)}   \r",
											"            Actual => ${JSON.stringify(actual)}`).to.be.true;\r",
											"\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/scripts/000c65e1-c9c6-4edb-96d2-298a9b152b40",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"scripts",
										"000c65e1-c9c6-4edb-96d2-298a9b152b40"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send MFA text",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Script -> Send MFA Text contains correct subnodes\", () => {\r",
											"    const actual = jsonData;\r",
											"    const expected = JSON.parse(pm.collectionVariables.get(\"Script_Send_MFA_Text\"));\r",
											"\r",
											"    let utils = eval(environment.utils)();\r",
											"    pm.expect(utils.compare.deepEqualScript(actual, expected), `Script -> Send MFA Text contains incorrect subnodes,  \r",
											"            Expected => ${JSON.stringify(expected)}   \r",
											"            Actual => ${JSON.stringify(actual)}`).to.be.true;\r",
											"\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/scripts/b276c566-622e-11eb-ae93-0242ac130002",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"scripts",
										"b276c566-622e-11eb-ae93-0242ac130002"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "CHVerify",
					"item": [
						{
							"name": "Authentication to Top-Level Realm",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const JSONResponse = JSON.parse(responseBody);",
											"",
											"// Did request have a callback?",
											"if(JSONResponse.authId && JSONResponse.authId != \"\")",
											"{",
											"  // Set `authId` variable",
											"  pm.environment.set(\"authId\", JSONResponse.authId);",
											"}",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"description": "The media type of the resource.",
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"description": "This collection documents version 2.1 of the authentication resource.",
										"key": "Accept-API-Version",
										"value": "resource=2.1",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/authenticate",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"authenticate"
									]
								},
								"description": "To get started, request the callbacks from the top-level realm."
							},
							"response": []
						},
						{
							"name": "Authenticate as ID Cloud Admin and Get Session Token, and Cookie Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const JSONResponse = JSON.parse(responseBody);",
											"",
											"// Did request return SSO Token?",
											"if(JSONResponse.tokenId && JSONResponse.tokenId != \"\")",
											"{",
											"  // Set `session token` variable",
											"  pm.environment.set(\"session_token\", JSONResponse.tokenId);",
											"",
											"  // Remove `authId` variable",
											"  pm.environment.unset(\"authId\");",
											"",
											"}",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"description": "Specifies that the `/json/authenticate` endpoint uses JSON format for requests.",
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"description": "Specifies the version of the `/json/authenticate` endpoint to use.",
										"key": "Accept-API-Version",
										"value": "resource=2.1, protocol=1.0",
										"disabled": true
									},
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"authId\": \"{{authId}}\",\n    \"callbacks\": [\n        {\n            \"type\": \"NameCallback\",\n            \"output\": [\n                {\n                    \"name\": \"prompt\",\n                    \"value\": \"User Name\"\n                }\n            ],\n            \"input\": [\n                {\n                    \"name\": \"IDToken1\",\n                    \"value\": \"{{IDCloudAdminUsername}}\"\n                }\n            ],\n            \"_id\": 0\n        },\n        {\n            \"type\": \"PasswordCallback\",\n            \"output\": [\n                {\n                    \"name\": \"prompt\",\n                    \"value\": \"Password\"\n                }\n            ],\n            \"input\": [\n                {\n                    \"name\": \"IDToken2\",\n                    \"value\": \"{{IDCloudAdminPassword}}\"\n                }\n            ],\n            \"_id\": 1\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{platformUrl}}/am/json/authenticate",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"authenticate"
									]
								},
								"description": "Return the callback, specifying the credentials of an administrative user.\nThis request obtains the name used in headers to specify the session token. To manually provide the session token name, in the ID Cloud console, navigate to **Tenant Settings**, and copy the *Cookie Name* value. Use this value in the `cookieName` variable in your Postman Collection."
							},
							"response": []
						},
						{
							"name": "Registration Verify Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Script -> Registration Verify Token contains correct subnodes\", () => {\r",
											"    const actual = jsonData;\r",
											"    const expected = JSON.parse(pm.collectionVariables.get(\"Script_Registration_Verify_Token\"));\r",
											"\r",
											"    let utils = eval(environment.utils)();\r",
											"    pm.expect(utils.compare.deepEqualScript(actual, expected), `Script ->Registration Verify Token contains incorrect subnodes,  \r",
											"            Expected => ${JSON.stringify(expected)}   \r",
											"            Actual => ${JSON.stringify(actual)}`).to.be.true;\r",
											"\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/scripts/b9d881b7-75c0-4cd6-8ede-e42193665657",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"scripts",
										"b9d881b7-75c0-4cd6-8ede-e42193665657"
									]
								}
							},
							"response": []
						},
						{
							"name": "Callback for User Already Exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Script -> Callback for User Already Exists contains correct subnodes\", () => {\r",
											"    const actual = jsonData;\r",
											"    const expected = JSON.parse(pm.collectionVariables.get(\"Script_Callback_User_Already_Exists\"));\r",
											"\r",
											"    let utils = eval(environment.utils)();\r",
											"    pm.expect(utils.compare.deepEqualScript(actual, expected), `Script ->Callback for User Already Exists contains incorrect subnodes,  \r",
											"            Expected => ${JSON.stringify(expected)}   \r",
											"            Actual => ${JSON.stringify(actual)}`).to.be.true;\r",
											"\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/scripts/181f73fa-ec30-4ef4-b78a-9790a4918b23",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"scripts",
										"181f73fa-ec30-4ef4-b78a-9790a4918b23"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "User Roles",
			"item": [
				{
					"name": "Lender",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"User Role -> Lender contains correct subnodes\", () => {\r",
									"\r",
									"    const actual = JSON.parse(responseBody);\r",
									"    const expected = JSON.parse(pm.collectionVariables.get(\"UserRole_Lender_response\"));\r",
									"\r",
									"    let utils = eval(environment.utils)();\r",
									"    pm.expect(utils.compare.deepEqual(actual, expected), `User Role -> Lender response did not match  \r",
									"            Expected => ${JSON.stringify(expected)}   \r",
									"            Actual => ${JSON.stringify(actual)}`).to.be.true;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "cookie",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{platformUrl}}/openidm/managed/alpha_role/{{UserRole_Lender_id}}",
							"host": [
								"{{platformUrl}}"
							],
							"path": [
								"openidm",
								"managed",
								"alpha_role",
								"{{UserRole_Lender_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Internal Roles",
			"item": [
				{
					"name": "CH Support",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"const jsonData = JSON.parse(responseBody);\r",
									"\r",
									"const CHSupport_name_actual = jsonData.name;\r",
									"const CHSupport_description_actual = jsonData.description;\r",
									"const CHSupport_temporalConstraints_actual = jsonData.temporalConstraints;\r",
									"var CHSupport_condition_actual;\r",
									"\r",
									"if (jsonData.condition) { CHSupport_condition_actual = jsonData.condition }\r",
									"else { CHSupport_condition_actual = null }\r",
									"\r",
									"const CHSupport_name_expected = pm.collectionVariables.get(\"InternalRole_CHSupport_name\");\r",
									"const CHSupport_description_expected = pm.collectionVariables.get(\"InternalRole_CHSupport_Description\");\r",
									"const CHSupport_temporalConstraints_expected = JSON.parse(\"[\" + pm.collectionVariables.get(\"InternalRole_CHSupport_temporalConstraints\") + \"]\");\r",
									"const CHSupport_condition_expetced = pm.collectionVariables.get(\"InternalRole_CHSupport_condition\");\r",
									"\r",
									"\r",
									"pm.test(\"Internal Roles -> CH Support contains correct name\", () => {\r",
									"    pm.expect(CHSupport_name_expected, \"CH support user name is incorrect\").to.be.eql(CHSupport_name_actual);\r",
									"});\r",
									"\r",
									"pm.test(\"Internal Roles -> CH Support contains correct description\", () => {\r",
									"    pm.expect(CHSupport_description_expected, \"CH Support description is incorrect\").to.be.eql(CHSupport_description_actual)\r",
									"});\r",
									"\r",
									"    let utils = eval(environment.utils)();\r",
									"\r",
									"pm.test(\"Internal Roles -> CH Support contains correct temporal constraints\", () => {\r",
									"    if (CHSupport_temporalConstraints_actual.length > 0) {\r",
									"        for (index = 0; index < CHSupport_temporalConstraints_actual.length; index++) {\r",
									"            pm.expect(utils.compare.deepEqual(CHSupport_temporalConstraints_expected[index], CHSupport_temporalConstraints_actual[index]), `CH Support -> Temporal contraints are incorrect\r",
									"            Expected => ${JSON.stringify(CHSupport_temporalConstraints_expected)}   \r",
									"            Actual => ${JSON.stringify(CHSupport_temporalConstraints_actual)}`).to.be.true;\r",
									"        }\r",
									"    }\r",
									"    else\r",
									"        pm.expect(CHSupport_temporalConstraints_expected, `CH Support -> Temporal contraints are incorrect\r",
									"            Expected => ${JSON.stringify(CHSupport_temporalConstraints_expected)}   \r",
									"            Actual => ${JSON.stringify(CHSupport_temporalConstraints_actual)}`).to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Internal Roles -> CH Support contains correct conditions if applied\", () => {\r",
									"\r",
									"    if (CHSupport_condition_actual) {\r",
									"        pm.expect(utils.compare.deepEqual(CHSupport_condition_expetced, CHSupport_condition_actual), `CH support -> condition are incorrect\r",
									"            Expected => ${JSON.stringify(CHSupport_condition_expetced)}   \r",
									"            Actual => ${JSON.stringify(CHSupport_condition_actual)}`).to.be.true;\r",
									"    }\r",
									"    else\r",
									"        pm.expect(CHSupport_condition_expetced, \"Incorrect entries for the condition for role -CH Support\").to.be.empty;\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Internal Roles -> CH Support contains correct privileges\", () => {\r",
									"    const CHSupport_privileges_count_actual = jsonData.privileges.length;\r",
									"    const CHSupport_privileges_actual = jsonData.privileges;\r",
									"\r",
									"    const CHSupport_privileges_count_expected = parseInt(pm.collectionVariables.get(\"InternalRole_CHSupport_privileges_count\"));\r",
									"    const CHSupport_privileges_expected = JSON.parse(\"[\" + pm.collectionVariables.get(\"InternalRole_CHSupport_privileges\") + \"]\");\r",
									"\r",
									"    pm.expect(CHSupport_privileges_count_expected, 'Incorrect number of privileges set for the role').to.be.eql(CHSupport_privileges_count_actual);\r",
									"\r",
									"    for (index = 0; index < CHSupport_privileges_actual.length; index++) {\r",
									"        pm.expect(utils.compare.deepEqual(CHSupport_privileges_expected[index], CHSupport_privileges_actual[index]), `CH Support Privileges did not match \r",
									"            Expected => ${JSON.stringify(CHSupport_privileges_expected[index])}   \r",
									"            Actual => ${JSON.stringify(CHSupport_privileges_actual[index])}`).to.be.true;\r",
									"    }\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "cookie",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{platformUrl}}/openidm/internal/role/{{InternalRole_CHSupport_id}}",
							"host": [
								"{{platformUrl}}"
							],
							"path": [
								"openidm",
								"internal",
								"role",
								"{{InternalRole_CHSupport_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Terms and Conditions",
			"item": [
				{
					"name": "T&C",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"const jsonData = JSON.parse(responseBody);\r",
									"\r",
									"    let utils = eval(environment.utils)();\r",
									"\r",
									"\r",
									"pm.test(\"Tearms and condition contains correct entries\", () => {\r",
									"    const TermsAndCondition_response_actual = jsonData;\r",
									"    const TermsAndCondition_response_expected = JSON.parse(pm.collectionVariables.get(\"TermsAndCondition_response\"));\r",
									"\r",
									"    pm.expect(utils.compare.deepEqual(TermsAndCondition_response_actual, TermsAndCondition_response_expected), `Terms and conditions are incorrect. please see actual and expected values. \r",
									"            Expected => ${JSON.stringify(TermsAndCondition_response_expected)}   \r",
									"            Actual => ${JSON.stringify(TermsAndCondition_response_actual)}`).to.be.true;\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Tearms and condition -> correct version set to active\", () => {\r",
									"    const TermsAndCondition_activeVersion_actual = jsonData.active;\r",
									"    const TermsAndCondition_activeVersion_expected = pm.collectionVariables.get(\"TermsAndCondition_activeVersion\");\r",
									"\r",
									"    pm.expect(TermsAndCondition_activeVersion_expected, \"Tearms and condition -> incorrect version set to Ative\").to.be.eql(TermsAndCondition_activeVersion_actual);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "cookie",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{platformUrl}}/openidm/config/selfservice.terms",
							"host": [
								"{{platformUrl}}"
							],
							"path": [
								"openidm",
								"config",
								"selfservice.terms"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Connectors",
			"item": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"",
					"postman.setEnvironmentVariable(\"utils\", () => {",
					"    var deepEqual = (object1, object2) => {",
					"        const keys1 = Object.keys(object1);",
					"        const keys2 = Object.keys(object2);",
					"",
					"        if (keys1.length !== keys2.length) {",
					"            return false;",
					"        }",
					"",
					"        for (const key of keys1) {",
					"            const val1 = object1[key];",
					"            const val2 = object2[key];",
					"            const areObjects = isObject(val1) && isObject(val2);",
					"",
					"            if (key != \"_rev\") {",
					"                if (",
					"                    areObjects && !deepEqual(val1, val2) ||",
					"                    !areObjects && val1 !== val2",
					"                ) {",
					"                    return false;",
					"                }",
					"            }",
					"        }",
					"        return true;",
					"    }",
					"",
					"    var deepEqualScript = (object1, object2) => {",
					"        const keys1 = Object.keys(object1);",
					"        const keys2 = Object.keys(object2);",
					"",
					"        if (keys1.length !== keys2.length) {",
					"            return false;",
					"        }",
					"",
					"        for (const key of keys1) {",
					"            const val1 = object1[key];",
					"            const val2 = object2[key];",
					"            const areObjects = isObject(val1) && isObject(val2);",
					"",
					"            if (key == \"_id\" || key == \"name\" || key == \"script\" || key == \"language\") {",
					"                if (",
					"                    areObjects && !deepEqual(val1, val2) ||",
					"                    !areObjects && val1 !== val2",
					"                ) {",
					"                    return false;",
					"                }",
					"            }",
					"        }",
					"        return true;",
					"    }",
					"",
					"    var deepEqualAuthTree = (object1, object2) => {",
					"        const keys1 = Object.keys(object1);",
					"        const keys2 = Object.keys(object2);",
					"",
					"        if (keys1.length !== keys2.length) {",
					"            return false;",
					"        }",
					"",
					"        for (const key of keys1) {",
					"            const val1 = object1[key];",
					"            const val2 = object2[key];",
					"            const areObjects = isObject(val1) && isObject(val2);",
					"",
					"            if (key != \"x\" || key == \"y\" || key == \"displayName\") {",
					"                if (",
					"                    areObjects && !deepEqual(val1, val2) ||",
					"                    !areObjects && val1 !== val2",
					"                ) {",
					"                    return false;",
					"                }",
					"            }",
					"        }",
					"        return true;",
					"    }",
					"",
					"    var deepEqualNodes = (object1, object2) => {",
					"        const keys1 = Object.keys(object1);",
					"        const keys2 = Object.keys(object2);",
					"",
					"        if (keys1.length !== keys2.length) {",
					"            return false;",
					"        }",
					"",
					"        for (const key of keys1) {",
					"            const val1 = object1[key];",
					"            const val2 = object2[key];",
					"            const areObjects = isObject(val1) && isObject(val2);",
					"",
					"            if (key != \"_rev\" || key != \"name\" || key == \"displayName\") {",
					"                if (",
					"                    areObjects && !deepEqual(val1, val2) ||",
					"                    !areObjects && val1 !== val2",
					"                ) {",
					"                    return false;",
					"                }",
					"            }",
					"        }",
					"        return true;",
					"    }",
					"",
					"    //validate if object is valid",
					"    function isObject(object) {",
					"        return object != null && typeof object === 'object';",
					"    }",
					"",
					"    return {",
					"        compare:",
					"        {",
					"            deepEqual,",
					"            deepEqualScript,",
					"            deepEqualAuthTree,",
					"            deepEqualNodes",
					"        }",
					"    };",
					"});",
					"",
					"",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "mapped_object_count",
			"value": "7"
		},
		{
			"key": "companyObj_index",
			"value": "6"
		},
		{
			"key": "companyObj_required_attribute",
			"value": "\"name\",\"number\""
		},
		{
			"key": "companyObj_iconClass",
			"value": "fa fa-database"
		},
		{
			"key": "companyObj_name",
			"value": "Company"
		},
		{
			"key": "companyObj_schema_title",
			"value": "Company"
		},
		{
			"key": "companyObj_schema_description",
			"value": "A company"
		},
		{
			"key": "companyObj_schema_icon",
			"value": "fa-building"
		},
		{
			"key": "companyObj_schema_order",
			"value": "\"name\",\"number\",\"type\",\"status\",\"authCode\",\"authCodeIsActive\",\"authCodeValidFrom\",\"authorisedUsers\",\"locality\",\"postalCode\",\"addressLine1\",\"addressLine2\",\"region\""
		},
		{
			"key": "companyObj_type",
			"value": "Managed Object"
		},
		{
			"key": "companyObj_property_name_deleteQueryConfig",
			"value": "false"
		},
		{
			"key": "companyObj_property_name_description",
			"value": "The name of the company"
		},
		{
			"key": "companyObj_property_name_isVirtual",
			"value": "false"
		},
		{
			"key": "companyObj_property_name_searchable",
			"value": "true"
		},
		{
			"key": "companyObj_property_name_title",
			"value": "Company Name"
		},
		{
			"key": "companyObj_property_name_type",
			"value": "string"
		},
		{
			"key": "companyObj_property_name_userEditable",
			"value": "true"
		},
		{
			"key": "companyObj_property_name_viewable",
			"value": "true"
		},
		{
			"key": "companyObj_property_number_deleteQueryConfig",
			"value": "false"
		},
		{
			"key": "companyObj_property_number_description",
			"value": "The unique number allocated to a company on incorporation"
		},
		{
			"key": "companyObj_property_number_isVirtual",
			"value": "false"
		},
		{
			"key": "companyObj_property_number_searchable",
			"value": "true"
		},
		{
			"key": "companyObj_property_number_title",
			"value": "Company Number"
		},
		{
			"key": "companyObj_property_number_type",
			"value": "string"
		},
		{
			"key": "companyObj_property_number_userEditable",
			"value": "true"
		},
		{
			"key": "companyObj_property_number_viewable",
			"value": "true"
		},
		{
			"key": "companyObj_property_status_searchable",
			"value": "true"
		},
		{
			"key": "companyObj_property_status_title",
			"value": "Status"
		},
		{
			"key": "companyObj_property_status_type",
			"value": "string"
		},
		{
			"key": "companyObj_property_status_userEditable",
			"value": "true"
		},
		{
			"key": "companyObj_property_status_viewable",
			"value": "true"
		},
		{
			"key": "companyObj_property_type_searchable",
			"value": "true"
		},
		{
			"key": "companyObj_property_type_title",
			"value": "Type"
		},
		{
			"key": "companyObj_property_type_type",
			"value": "string"
		},
		{
			"key": "companyObj_property_type_userEditable",
			"value": "true"
		},
		{
			"key": "companyObj_property_type_viewable",
			"value": "true"
		},
		{
			"key": "companyObj_property_authorisedUsers_deleteQueryConfig",
			"value": "false"
		},
		{
			"key": "companyObj_property_authorisedUsers_description",
			"value": "Authorised Users are Users that are associated with a Company"
		},
		{
			"key": "companyObj_property_authorisedUsers_isVirtual",
			"value": "false"
		},
		{
			"key": "companyObj_property_authorisedUsers_minLength",
			"value": "null"
		},
		{
			"key": "companyObj_property_authorisedUsers_referencedObjectFields",
			"value": "null"
		},
		{
			"key": "companyObj_property_authorisedUsers_referencedRelationshipFields",
			"value": "null"
		},
		{
			"key": "companyObj_property_authorisedUsers_requiredByParent",
			"value": "false"
		},
		{
			"key": "companyObj_property_authorisedUsers_returnByDefault",
			"value": "false"
		},
		{
			"key": "companyObj_property_authorisedUsers_searchable",
			"value": "false"
		},
		{
			"key": "companyObj_property_authorisedUsers_title",
			"value": "Has Authorised User"
		},
		{
			"key": "companyObj_property_authorisedUsers_type",
			"value": "array"
		},
		{
			"key": "companyObj_property_authorisedUsers_userEditable",
			"value": "false"
		},
		{
			"key": "companyObj_property_authorisedUsers_viewable",
			"value": "true"
		},
		{
			"key": "companyObj_property_authorisedUsers_policies",
			"value": ""
		},
		{
			"key": "companyObj_property_authorisedUsers_items_notifySelf",
			"value": "false"
		},
		{
			"key": "companyObj_property_authorisedUsers_items_reversePropertyName",
			"value": "isAuthorisedUserOf"
		},
		{
			"key": "companyObj_property_authorisedUsers_items_reverseRelationship",
			"value": "true"
		},
		{
			"key": "companyObj_property_authorisedUsers_items_type",
			"value": "relationship"
		},
		{
			"key": "companyObj_property_authorisedUsers_items_validate",
			"value": "false"
		},
		{
			"key": "companyObj_property_authorisedUsers_items_resourceCollection_length",
			"value": "1"
		},
		{
			"key": "companyObj_property_authorisedUsers_items_resourceCollection_label",
			"value": "Alpha_user"
		},
		{
			"key": "companyObj_property_authorisedUsers_items_resourceCollection_notify",
			"value": "false"
		},
		{
			"key": "companyObj_property_authorisedUsers_items_resourceCollection_path",
			"value": "managed/alpha_user"
		},
		{
			"key": "companyObj_property_authorisedUsers_items_resourceCollection_query_fields",
			"value": "\"_id\""
		},
		{
			"key": "companyObj_property_authorisedUsers_items_resourceCollection_query_queryFilter",
			"value": "true"
		},
		{
			"key": "companyObj_property_authorisedUsers_items_resourceCollection_query_sortKeys",
			"value": ""
		},
		{
			"key": "companyObj_property_authorisedUsers_items_properties_ref_type",
			"value": "string"
		},
		{
			"key": "companyObj_property_authorisedUsers_items_properties_refProperties_Properties_id_PropName",
			"value": "_id"
		},
		{
			"key": "companyObj_property_authorisedUsers_items_properties_refProperties_Properties_id_required",
			"value": "false"
		},
		{
			"key": "companyObj_property_authorisedUsers_items_properties_refProperties_Properties_id_type",
			"value": "string"
		},
		{
			"key": "companyObj_property_authorisedUsers_items_properties_refProperties_Properties_permissionAdmin_label",
			"value": "Administer the Company"
		},
		{
			"key": "companyObj_property_authorisedUsers_items_properties_refProperties_Properties_permissionAdmin_propName",
			"value": "permissionAdmin"
		},
		{
			"key": "companyObj_property_authorisedUsers_items_properties_refProperties_Properties_permissionAdmin_required",
			"value": "false"
		},
		{
			"key": "companyObj_property_authorisedUsers_items_properties_refProperties_Properties_permissionAdmin_type",
			"value": "string"
		},
		{
			"key": "companyObj_property_authorisedUsers_items_properties_refProperties_Properties_permissionFiling_label",
			"value": "File Financial Statments"
		},
		{
			"key": "companyObj_property_authorisedUsers_items_properties_refProperties_Properties_permissionFiling_propName",
			"value": "permissionFiling"
		},
		{
			"key": "companyObj_property_authorisedUsers_items_properties_refProperties_Properties_permissionFiling_required",
			"value": "false"
		},
		{
			"key": "companyObj_property_authorisedUsers_items_properties_refProperties_Properties_permissionFiling_type",
			"value": "string"
		},
		{
			"key": "companyObj_property_authorisedUsers_items_properties_refProperties_Properties_permissionUpdate_label",
			"value": "Update company details"
		},
		{
			"key": "companyObj_property_authorisedUsers_items_properties_refProperties_Properties_permissionUpdate_propName",
			"value": "permissionUpdate"
		},
		{
			"key": "companyObj_property_authorisedUsers_items_properties_refProperties_Properties_permissionUpdate_required",
			"value": "false"
		},
		{
			"key": "companyObj_property_authorisedUsers_items_properties_refProperties_Properties_permissionUpdate_type",
			"value": "string"
		},
		{
			"key": "companyObj_property_authorisedUsers_items_properties_refProperties_type",
			"value": "object"
		},
		{
			"key": "alpha_user_Obj_index",
			"value": "2"
		},
		{
			"key": "alpha_user_Obj_name",
			"value": "alpha_user"
		},
		{
			"key": "alpha_user_Obj_type",
			"value": "Managed Object"
		},
		{
			"key": "alpha_user_Obj_meta_resourceCollection",
			"value": "managed/alpha_usermeta"
		},
		{
			"key": "alpha_user_Obj_meta_trackedProperties",
			"value": "\"createDate\",\"lastChanged\""
		},
		{
			"key": "alpha_user_Obj_notifications",
			"value": ""
		},
		{
			"key": "alpha_user_Obj_notifications_length",
			"value": "0"
		},
		{
			"key": "alpha_user_Obj_onCreate",
			"value": "{\"source\":\"require('onCreateUser').setDefaultFields(object);\\nlogger.info(\\\"setting email as username \\\"+object.mail);\\nobject.mail = object.userName;\\n\\n\",\"type\":\"text/javascript\"}"
		},
		{
			"key": "alpha_user_Obj_onCreate_type",
			"value": "text/javascript"
		},
		{
			"key": "alpha_user_Obj_onUpdate",
			"value": "{\"source\":\"require('onUpdateUser').preserveLastSync(object, oldObject, request);\\nnewObject.mail = newObject.userName;\\n\\n\",\"type\":\"text/javascript\"}"
		},
		{
			"key": "alpha_user_Obj_schema_property_lastLogin",
			"value": "{\"description\":\"Last login\",\"isPersonal\":false,\"title\":\"Last login\",\"type\":\"string\",\"usageDescription\":null,\"userEditable\":true,\"viewable\":true}"
		},
		{
			"key": "alpha_user_Obj_schema_description",
			"value": ""
		},
		{
			"key": "alpha_user_Obj_schema_title",
			"value": "Alpha realm - User"
		},
		{
			"key": "alpha_user_Obj_schema_type",
			"value": "object"
		},
		{
			"key": "alpha_user_Obj_schema_order",
			"value": "\"_id\",\"userName\",\"password\",\"givenName\",\"cn\",\"sn\",\"mail\",\"description\",\"accountStatus\",\"telephoneNumber\",\"postalAddress\",\"city\",\"postalCode\",\"country\",\"stateProvince\",\"roles\",\"manager\",\"authzRoles\",\"reports\",\"effectiveRoles\",\"effectiveAssignments\",\"lastSync\",\"kbaInfo\",\"preferences\",\"consentedMappings\",\"frIndexedString1\",\"frIndexedString2\",\"frIndexedString3\",\"frIndexedString4\",\"frIndexedString5\",\"frUnindexedString1\",\"frUnindexedString2\",\"frUnindexedString3\",\"frUnindexedString4\",\"frUnindexedString5\",\"frIndexedMultivalued1\",\"frIndexedMultivalued2\",\"frIndexedMultivalued3\",\"frIndexedMultivalued4\",\"frIndexedMultivalued5\",\"frUnindexedMultivalued1\",\"frUnindexedMultivalued2\",\"frUnindexedMultivalued3\",\"frUnindexedMultivalued4\",\"frUnindexedMultivalued5\",\"frIndexedDate1\",\"frIndexedDate2\",\"frIndexedDate3\",\"frIndexedDate4\",\"frIndexedDate5\",\"frUnindexedDate1\",\"frUnindexedDate2\",\"frUnindexedDate3\",\"frUnindexedDate4\",\"frUnindexedDate5\",\"frIndexedInteger1\",\"frIndexedInteger2\",\"frIndexedInteger3\",\"frIndexedInteger4\",\"frIndexedInteger5\",\"frUnindexedInteger1\",\"frUnindexedInteger2\",\"frUnindexedInteger3\",\"frUnindexedInteger4\",\"frUnindexedInteger5\",\"aliasList\",\"isAuthorisedUserOf\""
		},
		{
			"key": "alpha_user_Obj_schema_property_id_deleteQueryConfig",
			"value": "false"
		},
		{
			"key": "alpha_user_Obj_schema_properties_description",
			"value": "User ID"
		},
		{
			"key": "alpha_user_Obj_schema_property_id_isPersonal",
			"value": "false"
		},
		{
			"key": "alpha_user_Obj_schema_property_id_isVirtual",
			"value": "false"
		},
		{
			"key": "alpha_user_Obj_schema_property_id_policies",
			"value": "{\"params\":{\"forbiddenChars\":[\"/\"]},\"policyId\":\"cannot-contain-characters\"}"
		},
		{
			"key": "alpha_user_Obj_schema_property_id_searchable",
			"value": "false"
		},
		{
			"key": "alpha_user_Obj_schema_property_id_title",
			"value": ""
		},
		{
			"key": "alpha_user_Obj_schema_property_id_type",
			"value": "string"
		},
		{
			"key": "alpha_user_Obj_schema_property_id_usageDescription",
			"value": ""
		},
		{
			"key": "alpha_user_Obj_schema_property_id_userEditable",
			"value": "false"
		},
		{
			"key": "alpha_user_Obj_schema_property_id_viewable",
			"value": "false"
		},
		{
			"key": "alpha_user_Obj_schema_property_accountStatus_deleteQueryConfig",
			"value": "false"
		},
		{
			"key": "alpha_user_Obj_schema_property_accountStatus_description",
			"value": "Status"
		},
		{
			"key": "alpha_user_Obj_schema_property_accountStatus_isPersonal",
			"value": "false"
		},
		{
			"key": "alpha_user_Obj_schema_property_accountStatus_searchable",
			"value": "true"
		},
		{
			"key": "alpha_user_Obj_schema_property_accountStatus_title",
			"value": "Status"
		},
		{
			"key": "alpha_user_Obj_schema_property_accountStatus_type",
			"value": "string"
		},
		{
			"key": "alpha_user_Obj_schema_property_accountStatus_usageDescription",
			"value": ""
		},
		{
			"key": "alpha_user_Obj_schema_property_accountStatus_userEditable",
			"value": "false"
		},
		{
			"key": "alpha_user_Obj_schema_property_accountStatus_isVirtual",
			"value": "false"
		},
		{
			"key": "alpha_user_Obj_schema_property_accountStatus_viewable",
			"value": "true"
		},
		{
			"key": "alpha_user_Obj_schema_property_aliasList_description",
			"value": "List of identity aliases used primarily to record social IdP subjects for this user"
		},
		{
			"key": "alpha_user_Obj_schema_property_aliasList_isVirtual",
			"value": "false"
		},
		{
			"key": "alpha_user_Obj_schema_property_aliasList_items_title",
			"value": "User Alias Names Items"
		},
		{
			"key": "alpha_user_Obj_schema_property_aliasList_items_type",
			"value": "string"
		},
		{
			"key": "alpha_user_Obj_schema_property_aliasList_returnByDefault",
			"value": "false"
		},
		{
			"key": "alpha_user_Obj_schema_property_aliasList_searchable",
			"value": "false"
		},
		{
			"key": "alpha_user_Obj_schema_property_aliasList_title",
			"value": "User Alias Names List"
		},
		{
			"key": "alpha_user_Obj_schema_property_aliasList_type",
			"value": "array"
		},
		{
			"key": "alpha_user_Obj_schema_property_aliasList_userEditable",
			"value": "true"
		},
		{
			"key": "alpha_user_Obj_schema_property_aliasList_viewable",
			"value": "false"
		},
		{
			"key": "alpha_user_Obj_schema_property_authzRoles_description",
			"value": "Authorization Roles"
		},
		{
			"key": "alpha_user_Obj_schema_property_authzRoles_id",
			"value": "urn:jsonschema:org:forgerock:openidm:managed:api:User:authzRoles"
		},
		{
			"key": "alpha_user_Obj_schema_property_authzRoles_isPersonal",
			"value": "false"
		},
		{
			"key": "alpha_user_Obj_schema_property_authzRoles_items_id",
			"value": "urn:jsonschema:org:forgerock:openidm:managed:api:User:authzRoles:items"
		},
		{
			"key": "alpha_user_Obj_schema_property_authzRoles_items_properties_ref_description",
			"value": "References a relationship from a managed object"
		},
		{
			"key": "alpha_user_Obj_schema_property_authzRoles_items_properties_ref_type",
			"value": "string"
		},
		{
			"key": "alpha_user_Obj_schema_property_authzRoles_items_properties__refProperties_description",
			"value": "Supports metadata within the relationship"
		},
		{
			"key": "alpha_user_Obj_schema_property_authzRoles_items_properties__refProperties_properties_id_description",
			"value": "_refProperties object ID"
		},
		{
			"key": "alpha_user_Obj_schema_property_authzRoles_items_properties__refProperties_properties_id_type",
			"value": "string"
		},
		{
			"key": "alpha_user_Obj_schema_property_authzRoles_items_properties__refProperties_title",
			"value": "Authorization Roles Items _refProperties"
		},
		{
			"key": "alpha_user_Obj_schema_property_authzRoles_items_properties__refProperties_type",
			"value": "object"
		},
		{
			"key": "alpha_user_Obj_schema_property_authzRoles_items_resourceCollection",
			"value": "{\"conditionalAssociationField\":\"condition\",\"label\":\"Internal Role\",\"path\":\"internal/role\",\"query\":{\"fields\":[\"name\"],\"queryFilter\":\"true\"}}"
		},
		{
			"key": "alpha_user_Obj_schema_property_authzRoles_items_reversePropertyName",
			"value": "authzMembers"
		},
		{
			"key": "alpha_user_Obj_schema_property_authzRoles_items_reverseRelationship",
			"value": "true"
		},
		{
			"key": "alpha_user_Obj_schema_property_authzRoles_items_title",
			"value": "Authorization Roles Items"
		},
		{
			"key": "alpha_user_Obj_schema_property_authzRoles_items_type",
			"value": "relationship"
		},
		{
			"key": "alpha_user_Obj_schema_property_authzRoles_items_validate",
			"value": "true"
		},
		{
			"key": "alpha_user_Obj_schema_property_authzRoles_returnByDefault",
			"value": "false"
		},
		{
			"key": "alpha_user_Obj_schema_property_authzRoles_title",
			"value": "Authorization Roles"
		},
		{
			"key": "alpha_user_Obj_schema_property_authzRoles_type",
			"value": "array"
		},
		{
			"key": "alpha_user_Obj_schema_property_authzRoles_usageDescription",
			"value": ""
		},
		{
			"key": "alpha_user_Obj_schema_property_authzRoles_userEditable",
			"value": "false"
		},
		{
			"key": "alpha_user_Obj_schema_property_authzRoles_viewable",
			"value": "true"
		},
		{
			"key": "alpha_user_Obj_schema_property_city",
			"value": "{\"description\":\"City\",\"isPersonal\":false,\"title\":\"City\",\"type\":\"string\",\"usageDescription\":null,\"userEditable\":true,\"viewable\":true}"
		},
		{
			"key": "alpha_user_Obj_schema_property_cn",
			"value": "{\"description\":\"Common Name\",\"isPersonal\":true,\"isVirtual\":true,\"onStore\":{\"source\":\"object.cn || (object.givenName + ' ' + object.sn)\",\"type\":\"text/javascript\"},\"scope\":\"private\",\"searchable\":false,\"title\":\"Common Name\",\"type\":\"string\",\"userEditable\":false,\"viewable\":false}"
		},
		{
			"key": "alpha_user_Obj_schema_property_consentedMappings",
			"value": "{\"description\":\"Consented Mappings\",\"isPersonal\":false,\"isVirtual\":false,\"items\":{\"items\":{\"order\":[\"mapping\",\"consentDate\"],\"properties\":{\"consentDate\":{\"description\":\"Consent Date\",\"searchable\":true,\"title\":\"Consent Date\",\"type\":\"string\",\"userEditable\":true,\"viewable\":true},\"mapping\":{\"description\":\"Mapping\",\"searchable\":true,\"title\":\"Mapping\",\"type\":\"string\",\"userEditable\":true,\"viewable\":true}},\"required\":[\"mapping\",\"consentDate\"],\"title\":\"Consented Mappings Item\",\"type\":\"object\"},\"title\":\"Consented Mappings Items\",\"type\":\"array\"},\"returnByDefault\":false,\"searchable\":false,\"title\":\"Consented Mappings\",\"type\":\"array\",\"usageDescription\":null,\"userEditable\":true,\"viewable\":false}"
		},
		{
			"key": "alpha_user_Obj_schema_property_country",
			"value": "{\"description\":\"Country\",\"isPersonal\":false,\"title\":\"Country\",\"type\":\"string\",\"usageDescription\":null,\"userEditable\":true,\"viewable\":true}"
		},
		{
			"key": "alpha_user_Obj_schema_property_description",
			"value": "{\"description\":\"Description\",\"isPersonal\":false,\"searchable\":true,\"title\":\"Description\",\"type\":\"string\",\"usageDescription\":null,\"userEditable\":true,\"viewable\":true}"
		},
		{
			"key": "alpha_user_Obj_schema_property_effectiveAssignments",
			"value": "{\"description\":\"Effective Assignments\",\"isPersonal\":false,\"isVirtual\":true,\"items\":{\"title\":\"Effective Assignments Items\",\"type\":\"object\"},\"queryConfig\":{\"referencedObjectFields\":[\"*\"],\"referencedRelationshipFields\":[\"roles\",\"assignments\"]},\"returnByDefault\":true,\"title\":\"Effective Assignments\",\"type\":\"array\",\"usageDescription\":null,\"viewable\":false}"
		},
		{
			"key": "alpha_user_Obj_schema_property_effectiveRoles",
			"value": "{\"description\":\"Effective Roles\",\"isPersonal\":false,\"isVirtual\":true,\"items\":{\"title\":\"Effective Roles Items\",\"type\":\"object\"},\"queryConfig\":{\"referencedRelationshipFields\":[\"roles\"]},\"returnByDefault\":true,\"title\":\"Effective Roles\",\"type\":\"array\",\"usageDescription\":null,\"viewable\":false}"
		},
		{
			"key": "alpha_user_Obj_schema_property_givenName",
			"value": "{\"description\":\"First Name\",\"isPersonal\":true,\"searchable\":true,\"title\":\"Full Name (optional)\",\"type\":\"string\",\"usageDescription\":null,\"userEditable\":true,\"viewable\":true}"
		},
		{
			"key": "alpha_user_Obj_schema_property_isAuthorisedUserOf",
			"value": "{\"deleteQueryConfig\":false,\"description\":\"Authorised Users are Users that are associated with a Company\",\"isVirtual\":false,\"items\":{\"notifySelf\":false,\"properties\":{\"_ref\":{\"type\":\"string\"},\"_refProperties\":{\"properties\":{\"_id\":{\"propName\":\"_id\",\"required\":false,\"type\":\"string\"},\"permissionAdmin\":{\"label\":\"Administer the Company\",\"propName\":\"permissionAdmin\",\"required\":false,\"type\":\"string\"},\"permissionFiling\":{\"label\":\"File Financial Statments\",\"propName\":\"permissionFiling\",\"required\":false,\"type\":\"string\"},\"permissionUpdate\":{\"label\":\"Update company details\",\"propName\":\"permissionUpdate\",\"required\":false,\"type\":\"string\"}},\"type\":\"object\"}},\"resourceCollection\":[{\"label\":\"Company\",\"notify\":false,\"path\":\"managed/Company\",\"query\":{\"fields\":[\"name\",\"number\"],\"queryFilter\":\"true\",\"sortKeys\":[]}}],\"reversePropertyName\":\"authorisedUsers\",\"reverseRelationship\":true,\"type\":\"relationship\",\"validate\":false},\"referencedObjectFields\":null,\"referencedRelationshipFields\":null,\"requiredByParent\":false,\"returnByDefault\":false,\"searchable\":false,\"title\":\"Authorised User Of\",\"type\":\"array\",\"userEditable\":false,\"viewable\":true}"
		},
		{
			"key": "alpha_user_Obj_schema_property_kbaInfo",
			"value": "{\"description\":\"KBA Info\",\"isPersonal\":true,\"items\":{\"order\":[\"answer\",\"customQuestion\",\"questionId\"],\"properties\":{\"answer\":{\"description\":\"Answer\",\"type\":\"string\"},\"customQuestion\":{\"description\":\"Custom question\",\"type\":\"string\"},\"questionId\":{\"description\":\"Question ID\",\"type\":\"string\"}},\"required\":[],\"title\":\"KBA Info Items\",\"type\":\"object\"},\"type\":\"array\",\"usageDescription\":null,\"userEditable\":true,\"viewable\":false}"
		},
		{
			"key": "alpha_user_Obj_schema_property_lastSync",
			"value": "{\"description\":\"Last Sync timestamp\",\"isPersonal\":false,\"order\":[\"effectiveAssignments\",\"timestamp\"],\"properties\":{\"effectiveAssignments\":{\"description\":\"Effective Assignments\",\"items\":{\"title\":\"Effective Assignments Items\",\"type\":\"object\"},\"title\":\"Effective Assignments\",\"type\":\"array\"},\"timestamp\":{\"description\":\"Timestamp\",\"type\":\"string\"}},\"scope\":\"private\",\"searchable\":false,\"title\":\"Last Sync timestamp\",\"type\":\"object\",\"usageDescription\":null,\"viewable\":false}"
		},
		{
			"key": "alpha_user_Obj_schema_property_mail",
			"value": "{\"description\":\"Email Address\",\"isPersonal\":true,\"policies\":[{\"policyId\":\"not-empty\"},{\"policyId\":\"valid-email-address-format\"}],\"searchable\":true,\"title\":\"Email Address\",\"type\":\"string\",\"usageDescription\":null,\"userEditable\":true,\"viewable\":true}"
		},
		{
			"key": "alpha_user_Obj_schema_property_manager",
			"value": "{\"description\":\"Manager\",\"isPersonal\":false,\"properties\":{\"_ref\":{\"description\":\"References a relationship from a managed object\",\"type\":\"string\"},\"_refProperties\":{\"description\":\"Supports metadata within the relationship\",\"properties\":{\"_id\":{\"description\":\"_refProperties object ID\",\"type\":\"string\"}},\"title\":\"Manager _refProperties\",\"type\":\"object\"}},\"resourceCollection\":[{\"label\":\"User\",\"path\":\"managed/alpha_user\",\"query\":{\"fields\":[\"userName\",\"givenName\",\"sn\"],\"queryFilter\":\"true\"}}],\"reversePropertyName\":\"reports\",\"reverseRelationship\":true,\"searchable\":false,\"title\":\"Manager\",\"type\":\"relationship\",\"usageDescription\":null,\"userEditable\":false,\"validate\":true,\"viewable\":true}"
		},
		{
			"key": "alpha_user_Obj_schema_property_password",
			"value": "{\"deleteQueryConfig\":false,\"description\":\"Password\",\"isPersonal\":false,\"isProtected\":true,\"isVirtual\":false,\"searchable\":false,\"title\":\"Password\",\"type\":\"string\",\"usageDescription\":null,\"userEditable\":true,\"viewable\":false}"
		},
		{
			"key": "alpha_user_Obj_schema_property_postalAddress",
			"value": "{\"description\":\"Address 1\",\"isPersonal\":true,\"title\":\"Address 1\",\"type\":\"string\",\"usageDescription\":null,\"userEditable\":true,\"viewable\":true}"
		},
		{
			"key": "alpha_user_Obj_schema_property_postalCode",
			"value": "{\"description\":\"Postal Code\",\"isPersonal\":false,\"title\":\"Postal Code\",\"type\":\"string\",\"usageDescription\":null,\"userEditable\":true,\"viewable\":true}"
		},
		{
			"key": "alpha_user_Obj_schema_property_preferences",
			"value": "{\"description\":\"Preferences\",\"isPersonal\":false,\"order\":[\"updates\",\"marketing\"],\"properties\":{\"marketing\":{\"description\":\"Send me special offers and services\",\"type\":\"boolean\"},\"updates\":{\"description\":\"Send me news and updates\",\"type\":\"boolean\"}},\"searchable\":false,\"title\":\"Preferences\",\"type\":\"object\",\"usageDescription\":null,\"userEditable\":true,\"viewable\":true}"
		},
		{
			"key": "alpha_user_Obj_schema_property_reports",
			"value": "{\"description\":\"Direct Reports\",\"isPersonal\":false,\"items\":{\"id\":\"urn:jsonschema:org:forgerock:openidm:managed:api:User:reports:items\",\"properties\":{\"_ref\":{\"description\":\"References a relationship from a managed object\",\"type\":\"string\"},\"_refProperties\":{\"description\":\"Supports metadata within the relationship\",\"properties\":{\"_id\":{\"description\":\"_refProperties object ID\",\"type\":\"string\"}},\"title\":\"Direct Reports Items _refProperties\",\"type\":\"object\"}},\"resourceCollection\":[{\"label\":\"User\",\"path\":\"managed/alpha_user\",\"query\":{\"fields\":[\"userName\",\"givenName\",\"sn\"],\"queryFilter\":\"true\"}}],\"reversePropertyName\":\"manager\",\"reverseRelationship\":true,\"title\":\"Direct Reports Items\",\"type\":\"relationship\",\"validate\":true},\"returnByDefault\":false,\"title\":\"Direct Reports\",\"type\":\"array\",\"usageDescription\":null,\"userEditable\":false,\"viewable\":true}"
		},
		{
			"key": "alpha_user_Obj_schema_property_roles",
			"value": "{\"description\":\"Provisioning Roles\",\"id\":\"urn:jsonschema:org:forgerock:openidm:managed:api:User:roles\",\"isPersonal\":false,\"items\":{\"id\":\"urn:jsonschema:org:forgerock:openidm:managed:api:User:roles:items\",\"notifySelf\":true,\"properties\":{\"_ref\":{\"description\":\"References a relationship from a managed object\",\"type\":\"string\"},\"_refProperties\":{\"description\":\"Supports metadata within the relationship\",\"properties\":{\"_grantType\":{\"description\":\"Grant Type\",\"label\":\"Grant Type\",\"type\":\"string\"},\"_id\":{\"description\":\"_refProperties object ID\",\"type\":\"string\"}},\"title\":\"Provisioning Roles Items _refProperties\",\"type\":\"object\"}},\"resourceCollection\":[{\"conditionalAssociationField\":\"condition\",\"label\":\"Role\",\"path\":\"managed/alpha_role\",\"query\":{\"fields\":[\"name\"],\"queryFilter\":\"true\"}}],\"reversePropertyName\":\"members\",\"reverseRelationship\":true,\"title\":\"Provisioning Roles Items\",\"type\":\"relationship\",\"validate\":true},\"relationshipGrantTemporalConstraintsEnforced\":true,\"returnByDefault\":false,\"title\":\"Provisioning Roles\",\"type\":\"array\",\"usageDescription\":null,\"userEditable\":false,\"viewable\":true}"
		},
		{
			"key": "alpha_user_Obj_schema_property_sn",
			"value": "{\"description\":\"Last Name\",\"isPersonal\":true,\"searchable\":true,\"title\":\"Last Name\",\"type\":\"string\",\"usageDescription\":null,\"userEditable\":true,\"viewable\":true}"
		},
		{
			"key": "alpha_user_Obj_schema_property_stateProvince",
			"value": "{\"description\":\"State/Province\",\"isPersonal\":false,\"title\":\"State/Province\",\"type\":\"string\",\"usageDescription\":null,\"userEditable\":true,\"viewable\":true}"
		},
		{
			"key": "alpha_user_Obj_schema_property_telephoneNumber",
			"value": "{\"deleteQueryConfig\":false,\"description\":\"Mobile Number\",\"isPersonal\":true,\"isVirtual\":false,\"pattern\":\"^\\\\+?([0-9\\\\- \\\\(\\\\)])*$\",\"searchable\":false,\"title\":\"Mobile Number (optional)\",\"type\":\"string\",\"usageDescription\":null,\"userEditable\":true,\"viewable\":true}"
		},
		{
			"key": "alpha_user_Obj_schema_property_userName",
			"value": "{\"deleteQueryConfig\":false,\"description\":\"Username\",\"isPersonal\":true,\"isVirtual\":false,\"policies\":[{\"policyId\":\"valid-email-address-format\"},{\"policyId\":\"valid-username\"}],\"searchable\":true,\"title\":\"Username\",\"type\":\"string\",\"usageDescription\":null,\"userEditable\":false,\"viewable\":true}"
		},
		{
			"key": "alpha_user_Obj_schema_requiredFields",
			"value": "\"userName\",\"sn\",\"mail\""
		},
		{
			"key": "UserRole_Lender_id",
			"value": "40a4ce31-21ac-4a5c-8dda-07760f0020f8"
		},
		{
			"key": "UserRole_Lender_response",
			"value": "{\"_id\":\"40a4ce31-21ac-4a5c-8dda-07760f0020f8\",\"_rev\":\"0000000073d777aa\",\"name\":\"Lender\",\"description\":\"A lender can file for any company in the CH systems\",\"realm\":\"alpha\"}"
		},
		{
			"key": "InternalRole_CHSupport_id",
			"value": "697d005c-a480-4967-89be-435f26816bab"
		},
		{
			"key": "InternalRole_CHSupport_name",
			"value": "CH Support"
		},
		{
			"key": "InternalRole_CHSupport_Description",
			"value": "Internal Role for Companies House support users"
		},
		{
			"key": "InternalRole_CHSupport_temporalConstraints",
			"value": ""
		},
		{
			"key": "InternalRole_CHSupport_condition",
			"value": ""
		},
		{
			"key": "InternalRole_CHSupport_privileges_count",
			"value": "2"
		},
		{
			"key": "InternalRole_CHSupport_privileges",
			"value": "{\"path\":\"managed/alpha_user\",\"name\":\"Manage External Users\",\"actions\":[],\"permissions\":[\"VIEW\",\"CREATE\",\"UPDATE\",\"DELETE\"],\"accessFlags\":[{\"attribute\":\"userName\",\"readOnly\":false},{\"attribute\":\"password\",\"readOnly\":false},{\"attribute\":\"givenName\",\"readOnly\":false},{\"attribute\":\"cn\",\"readOnly\":false},{\"attribute\":\"sn\",\"readOnly\":false},{\"attribute\":\"mail\",\"readOnly\":false},{\"attribute\":\"description\",\"readOnly\":false},{\"attribute\":\"accountStatus\",\"readOnly\":false},{\"attribute\":\"telephoneNumber\",\"readOnly\":false},{\"attribute\":\"postalAddress\",\"readOnly\":false},{\"attribute\":\"city\",\"readOnly\":false},{\"attribute\":\"postalCode\",\"readOnly\":false},{\"attribute\":\"country\",\"readOnly\":false},{\"attribute\":\"stateProvince\",\"readOnly\":false},{\"attribute\":\"roles\",\"readOnly\":false},{\"attribute\":\"manager\",\"readOnly\":false},{\"attribute\":\"authzRoles\",\"readOnly\":false},{\"attribute\":\"reports\",\"readOnly\":false},{\"attribute\":\"effectiveRoles\",\"readOnly\":false},{\"attribute\":\"effectiveAssignments\",\"readOnly\":false},{\"attribute\":\"lastSync\",\"readOnly\":false},{\"attribute\":\"kbaInfo\",\"readOnly\":false},{\"attribute\":\"preferences\",\"readOnly\":false},{\"attribute\":\"consentedMappings\",\"readOnly\":false},{\"attribute\":\"frIndexedString1\",\"readOnly\":false},{\"attribute\":\"frIndexedString2\",\"readOnly\":false},{\"attribute\":\"frIndexedString3\",\"readOnly\":false},{\"attribute\":\"frIndexedString4\",\"readOnly\":false},{\"attribute\":\"frIndexedString5\",\"readOnly\":false},{\"attribute\":\"frUnindexedString1\",\"readOnly\":false},{\"attribute\":\"frUnindexedString2\",\"readOnly\":false},{\"attribute\":\"frUnindexedString3\",\"readOnly\":false},{\"attribute\":\"frUnindexedString4\",\"readOnly\":false},{\"attribute\":\"frUnindexedString5\",\"readOnly\":false},{\"attribute\":\"frIndexedMultivalued1\",\"readOnly\":false},{\"attribute\":\"frIndexedMultivalued2\",\"readOnly\":false},{\"attribute\":\"frIndexedMultivalued3\",\"readOnly\":false},{\"attribute\":\"frIndexedMultivalued4\",\"readOnly\":false},{\"attribute\":\"frIndexedMultivalued5\",\"readOnly\":false},{\"attribute\":\"frUnindexedMultivalued1\",\"readOnly\":false},{\"attribute\":\"frUnindexedMultivalued2\",\"readOnly\":false},{\"attribute\":\"frUnindexedMultivalued3\",\"readOnly\":false},{\"attribute\":\"frUnindexedMultivalued4\",\"readOnly\":false},{\"attribute\":\"frUnindexedMultivalued5\",\"readOnly\":false},{\"attribute\":\"frIndexedDate1\",\"readOnly\":false},{\"attribute\":\"frIndexedDate2\",\"readOnly\":false},{\"attribute\":\"frIndexedDate3\",\"readOnly\":false},{\"attribute\":\"frIndexedDate4\",\"readOnly\":false},{\"attribute\":\"frIndexedDate5\",\"readOnly\":false},{\"attribute\":\"frUnindexedDate1\",\"readOnly\":false},{\"attribute\":\"frUnindexedDate2\",\"readOnly\":false},{\"attribute\":\"frUnindexedDate3\",\"readOnly\":false},{\"attribute\":\"frUnindexedDate4\",\"readOnly\":false},{\"attribute\":\"frUnindexedDate5\",\"readOnly\":false},{\"attribute\":\"frIndexedInteger1\",\"readOnly\":false},{\"attribute\":\"frIndexedInteger2\",\"readOnly\":false},{\"attribute\":\"frIndexedInteger3\",\"readOnly\":false},{\"attribute\":\"frIndexedInteger4\",\"readOnly\":false},{\"attribute\":\"frIndexedInteger5\",\"readOnly\":false},{\"attribute\":\"frUnindexedInteger1\",\"readOnly\":false},{\"attribute\":\"frUnindexedInteger2\",\"readOnly\":false},{\"attribute\":\"frUnindexedInteger3\",\"readOnly\":false},{\"attribute\":\"frUnindexedInteger4\",\"readOnly\":false},{\"attribute\":\"frUnindexedInteger5\",\"readOnly\":false},{\"attribute\":\"aliasList\",\"readOnly\":false}],\"filter\":\"!(/frIndexedString1 eq \\\"internal\\\")\"},{\"path\":\"managed/alpha_user\",\"name\":\"Manage Support Users\",\"actions\":[],\"permissions\":[\"VIEW\",\"CREATE\",\"UPDATE\",\"DELETE\"],\"accessFlags\":[{\"attribute\":\"userName\",\"readOnly\":false},{\"attribute\":\"password\",\"readOnly\":false},{\"attribute\":\"givenName\",\"readOnly\":false},{\"attribute\":\"cn\",\"readOnly\":false},{\"attribute\":\"sn\",\"readOnly\":false},{\"attribute\":\"mail\",\"readOnly\":false},{\"attribute\":\"description\",\"readOnly\":false},{\"attribute\":\"accountStatus\",\"readOnly\":false},{\"attribute\":\"telephoneNumber\",\"readOnly\":false},{\"attribute\":\"postalAddress\",\"readOnly\":false},{\"attribute\":\"city\",\"readOnly\":false},{\"attribute\":\"postalCode\",\"readOnly\":false},{\"attribute\":\"country\",\"readOnly\":false},{\"attribute\":\"stateProvince\",\"readOnly\":false},{\"attribute\":\"roles\",\"readOnly\":false},{\"attribute\":\"manager\",\"readOnly\":false},{\"attribute\":\"authzRoles\",\"readOnly\":false},{\"attribute\":\"reports\",\"readOnly\":false},{\"attribute\":\"effectiveRoles\",\"readOnly\":false},{\"attribute\":\"effectiveAssignments\",\"readOnly\":false},{\"attribute\":\"lastSync\",\"readOnly\":false},{\"attribute\":\"kbaInfo\",\"readOnly\":false},{\"attribute\":\"preferences\",\"readOnly\":false},{\"attribute\":\"consentedMappings\",\"readOnly\":false},{\"attribute\":\"frIndexedString1\",\"readOnly\":false},{\"attribute\":\"frIndexedString2\",\"readOnly\":false},{\"attribute\":\"frIndexedString3\",\"readOnly\":false},{\"attribute\":\"frIndexedString4\",\"readOnly\":false},{\"attribute\":\"frIndexedString5\",\"readOnly\":false},{\"attribute\":\"frUnindexedString1\",\"readOnly\":false},{\"attribute\":\"frUnindexedString2\",\"readOnly\":false},{\"attribute\":\"frUnindexedString3\",\"readOnly\":false},{\"attribute\":\"frUnindexedString4\",\"readOnly\":false},{\"attribute\":\"frUnindexedString5\",\"readOnly\":false},{\"attribute\":\"frIndexedMultivalued1\",\"readOnly\":false},{\"attribute\":\"frIndexedMultivalued2\",\"readOnly\":false},{\"attribute\":\"frIndexedMultivalued3\",\"readOnly\":false},{\"attribute\":\"frIndexedMultivalued4\",\"readOnly\":false},{\"attribute\":\"frIndexedMultivalued5\",\"readOnly\":false},{\"attribute\":\"frUnindexedMultivalued1\",\"readOnly\":false},{\"attribute\":\"frUnindexedMultivalued2\",\"readOnly\":false},{\"attribute\":\"frUnindexedMultivalued3\",\"readOnly\":false},{\"attribute\":\"frUnindexedMultivalued4\",\"readOnly\":false},{\"attribute\":\"frUnindexedMultivalued5\",\"readOnly\":false},{\"attribute\":\"frIndexedDate1\",\"readOnly\":false},{\"attribute\":\"frIndexedDate2\",\"readOnly\":false},{\"attribute\":\"frIndexedDate3\",\"readOnly\":false},{\"attribute\":\"frIndexedDate4\",\"readOnly\":false},{\"attribute\":\"frIndexedDate5\",\"readOnly\":false},{\"attribute\":\"frUnindexedDate1\",\"readOnly\":false},{\"attribute\":\"frUnindexedDate2\",\"readOnly\":false},{\"attribute\":\"frUnindexedDate3\",\"readOnly\":false},{\"attribute\":\"frUnindexedDate4\",\"readOnly\":false},{\"attribute\":\"frUnindexedDate5\",\"readOnly\":false},{\"attribute\":\"frIndexedInteger1\",\"readOnly\":false},{\"attribute\":\"frIndexedInteger2\",\"readOnly\":false},{\"attribute\":\"frIndexedInteger3\",\"readOnly\":false},{\"attribute\":\"frIndexedInteger4\",\"readOnly\":false},{\"attribute\":\"frIndexedInteger5\",\"readOnly\":false},{\"attribute\":\"frUnindexedInteger1\",\"readOnly\":false},{\"attribute\":\"frUnindexedInteger2\",\"readOnly\":false},{\"attribute\":\"frUnindexedInteger3\",\"readOnly\":false},{\"attribute\":\"frUnindexedInteger4\",\"readOnly\":false},{\"attribute\":\"frUnindexedInteger5\",\"readOnly\":false},{\"attribute\":\"aliasList\",\"readOnly\":false}],\"filter\":\"/frIndexedString1 eq \\\"internal\\\"\"}"
		},
		{
			"key": "TermsAndCondition_response",
			"value": "{\"_id\":\"selfservice.terms\",\"active\":\"0.1\",\"uiConfig\":{\"buttonText\":\"Accept\",\"displayName\":\"We've updated our terms\",\"purpose\":\"You must accept the updated terms in order to proceed.\"},\"versions\":[{\"createDate\":\"2019-10-28T04:20:11.320Z\",\"termsTranslations\":{\"en\":\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\"},\"version\":\"0.0\"},{\"createDate\":\"2021-02-01T10:41:57.474Z\",\"termsTranslations\":{\"en\":\"Terms and conditions placeholder\"},\"version\":\"0.1\"}]}"
		},
		{
			"key": "TermsAndCondition_activeVersion",
			"value": "0.1"
		},
		{
			"key": "AuthTree_CHRegistration_id",
			"value": "CHRegistration"
		},
		{
			"key": "AuthTree_CHRegistration_description",
			"value": "Platform Registration Tree for CH Users"
		},
		{
			"key": "AuthTree_CHRegistration_entryNode",
			"value": "eb711261-5253-4e17-9357-43e175a5005d"
		},
		{
			"key": "AuthTree_CHRegistration_identityResource",
			"value": "managed/alpha_user"
		},
		{
			"key": "AuthTree_CHRegistration_nodes_count",
			"value": "10"
		},
		{
			"key": "AuthTree_CHRegistration_nodes_retryLimitDecision_id",
			"value": "14a23247-eeb0-436c-99dd-1b046fc1204f"
		},
		{
			"key": "AuthTree_CHRegistration_nodes_retryLimitDecision",
			"value": "{\"connections\":{\"Reject\":\"e301438c-0bd0-429c-ab0c-66126501069a\",\"Retry\":\"2eaa7c69-f97d-4bbf-b8b0-2214832cbc6f\"},\"displayName\":\"Retry Limit Decision\",\"nodeType\":\"RetryLimitDecisionNode\",\"x\":1305,\"y\":400.015625}"
		},
		{
			"key": "AuthTree_CHRegistration_nodes_HOTPGenerator_id",
			"value": "27ec8bc7-d2ed-4877-b8bd-ebd84d5b9994"
		},
		{
			"key": "AuthTree_CHRegistration_nodes_HOTPGenerator",
			"value": "{\"connections\":{\"outcome\":\"37a1f12f-1e7b-4ca2-a870-040bf63291a0\"},\"displayName\":\"HOTP Generator\",\"nodeType\":\"OneTimePasswordGeneratorNode\",\"x\":629,\"y\":650.015625}"
		},
		{
			"key": "AuthTree_CHRegistration_node_OTPNotValid_id",
			"value": "2eaa7c69-f97d-4bbf-b8b0-2214832cbc6f"
		},
		{
			"key": "AuthTree_CHRegistration_node_OTPNotValid",
			"value": "{\"connections\":{\"true\":\"42d22a17-4022-4d9a-8cc2-2ef7b2fd331c\"},\"displayName\":\"OTP not valid\",\"nodeType\":\"ScriptedDecisionNode\",\"x\":1106,\"y\":630.015625}"
		},
		{
			"key": "AuthTree_CHRegistration_node_SendOTP_id",
			"value": "37a1f12f-1e7b-4ca2-a870-040bf63291a0"
		},
		{
			"key": "AuthTree_CHRegistration_node_SendOTP",
			"value": "{\"connections\":{\"false\":\"e301438c-0bd0-429c-ab0c-66126501069a\",\"true\":\"42d22a17-4022-4d9a-8cc2-2ef7b2fd331c\"},\"displayName\":\"Send OTP\",\"nodeType\":\"ScriptedDecisionNode\",\"x\":856,\"y\":696.015625}"
		},
		{
			"key": "AuthTree_CHRegistration_node_OTPPage_id",
			"value": "42d22a17-4022-4d9a-8cc2-2ef7b2fd331c"
		},
		{
			"key": "AuthTree_CHRegistration_node_OTPPage",
			"value": "{\"connections\":{\"false\":\"14a23247-eeb0-436c-99dd-1b046fc1204f\",\"true\":\"997cc39b-afde-4935-b9b5-a0d4e3034072\"},\"displayName\":\"OTP page\",\"nodeType\":\"PageNode\",\"x\":1013,\"y\":369.015625}"
		},
		{
			"key": "AuthTree_CHRegistration_node_CreateNotifyJWTSMS_id",
			"value": "5c7f4247-3b01-4dae-b18b-1d90ee710891"
		},
		{
			"key": "AuthTree_CHRegistration_node_CreateNotifyJWTSMS",
			"value": "{\"connections\":{\"false\":\"e301438c-0bd0-429c-ab0c-66126501069a\",\"true\":\"27ec8bc7-d2ed-4877-b8bd-ebd84d5b9994\"},\"displayName\":\"Create Notify JWT - SMS\",\"nodeType\":\"ScriptedDecisionNode\",\"x\":508,\"y\":485.015625}"
		},
		{
			"key": "AuthTree_CHRegistration_node_CreateNotifyJWTEmail_id",
			"value": "997cc39b-afde-4935-b9b5-a0d4e3034072"
		},
		{
			"key": "AuthTree_CHRegistration_node_CreateNotifyJWTEmail",
			"value": "{\"connections\":{\"false\":\"e301438c-0bd0-429c-ab0c-66126501069a\",\"true\":\"9e02588a-e4ac-4b08-b10f-ad8f298ae720\"},\"displayName\":\"Create Notify JWT - Email\",\"nodeType\":\"ScriptedDecisionNode\",\"x\":894,\"y\":110}"
		},
		{
			"key": "AuthTree_CHRegistration_node_CreateEmailLink_id",
			"value": "9e02588a-e4ac-4b08-b10f-ad8f298ae720"
		},
		{
			"key": "AuthTree_CHRegistration_node_CreateEmailLink",
			"value": "{\"connections\":{\"false\":\"e301438c-0bd0-429c-ab0c-66126501069a\",\"true\":\"e301438c-0bd0-429c-ab0c-66126501069a\"},\"displayName\":\"Create & Email link\",\"nodeType\":\"ScriptedDecisionNode\",\"x\":1203,\"y\":89.015625}"
		},
		{
			"key": "AuthTree_CHRegistration_node_CheckPhone_id",
			"value": "a87fa542-b6d3-49a1-bbdf-30370ae7042e"
		},
		{
			"key": "AuthTree_CHRegistration_node_CheckPhone",
			"value": "{\"connections\":{\"false\":\"997cc39b-afde-4935-b9b5-a0d4e3034072\",\"true\":\"5c7f4247-3b01-4dae-b18b-1d90ee710891\"},\"displayName\":\"Check phone entered\",\"nodeType\":\"ScriptedDecisionNode\",\"x\":389,\"y\":307.015625}"
		},
		{
			"key": "AuthTree_CHRegistration_node_EmailCollector_id",
			"value": "eb711261-5253-4e17-9357-43e175a5005d"
		},
		{
			"key": "AuthTree_CHRegistration_node_EmailCollector",
			"value": "{\"connections\":{\"outcome\":\"a87fa542-b6d3-49a1-bbdf-30370ae7042e\"},\"displayName\":\"Email Collector\",\"nodeType\":\"PageNode\",\"x\":346,\"y\":74}"
		},
		{
			"key": "AuthTree_CHRegistration_node_static",
			"value": "{\"70e691a5-1e33-4ac3-a356-e7b6d60d92e0\":{\"x\":1615,\"y\":726},\"e301438c-0bd0-429c-ab0c-66126501069a\":{\"x\":1901,\"y\":502},\"startNode\":{\"x\":70,\"y\":80}}"
		},
		{
			"key": "AuthTree_CHRegistration_nodes_EmailCollector_subnodes",
			"value": "{\"_id\":\"eb711261-5253-4e17-9357-43e175a5005d\",\"_rev\":\"-755889864\",\"nodes\":[{\"_id\":\"f07f1b4a-8aef-4c53-b04f-e41fd06ed859\",\"nodeType\":\"AttributeCollectorNode\",\"displayName\":\"Attribute Collector\"}],\"pageDescription\":{\"en\":\"Signing up is fast and easy.<br>Already have an account? <a href='#/service/Login'>Sign In</a>\"},\"pageHeader\":{\"en\":\"Sign Up\"},\"stage\":\"REGISTRATION_1\",\"_type\":{\"_id\":\"PageNode\",\"name\":\"Page Node\",\"collection\":true},\"_outcomes\":[{\"id\":\"outcome\",\"displayName\":\"Outcome\"}]}"
		},
		{
			"key": "AuthTree_CHVerifyReg_id",
			"value": "CHVerifyReg"
		},
		{
			"key": "AuthTree_CHVerifyReg_description",
			"value": "Verify Registration tree for CH Users"
		},
		{
			"key": "AuthTree_CHVerifyReg_entryNode",
			"value": "7ebb5593-77f8-4125-a11a-5717499da135"
		},
		{
			"key": "AuthTree_CHVerifyReg_identityResource",
			"value": "managed/alpha_user"
		},
		{
			"key": "AuthTree_CHVerifyReg_nodes_count",
			"value": "6"
		},
		{
			"key": "AuthTree_CHVerifyReg_nodes_createUser_id",
			"value": "02d95fe8-1c39-4144-b411-13fcd4226c6a"
		},
		{
			"key": "AuthTree_CHVerifyReg_nodes_createUser",
			"value": "{\"x\":1181,\"y\":163,\"connections\":{\"FAILURE\":\"e301438c-0bd0-429c-ab0c-66126501069a\",\"CREATED\":\"bb74cb44-5e3f-4634-9e5f-f18e121ca93f\"},\"nodeType\":\"CreateObjectNode\",\"displayName\":\"Create User\"}"
		},
		{
			"key": "AuthTree_CHVerifyReg_nodes_verifyRegToken_id",
			"value": "7ebb5593-77f8-4125-a11a-5717499da135"
		},
		{
			"key": "AuthTree_CHVerifyReg_nodes_verifyRegToken",
			"value": "{\"x\":203,\"y\":265,\"connections\":{\"false\":\"e301438c-0bd0-429c-ab0c-66126501069a\",\"true\":\"63a23daf-33ad-4848-8e2a-c3f3d749e646\"},\"nodeType\":\"ScriptedDecisionNode\",\"displayName\":\"Verify Reg Token\"}"
		},
		{
			"key": "AuthTree_CHVerifyReg_node_identifyExistingUser_id",
			"value": "63a23daf-33ad-4848-8e2a-c3f3d749e646"
		},
		{
			"key": "AuthTree_CHVerifyReg_node_identifyExistingUser",
			"value": "{\"x\":538,\"y\":189,\"connections\":{\"false\":\"d3d9440a-6562-479a-be32-7d863a159155\",\"true\":\"9d7a87df-d656-4539-b1e4-7199950aa0e8\"},\"nodeType\":\"IdentifyExistingUserNode\",\"displayName\":\"Identify Existing User\"}"
		},
		{
			"key": "AuthTree_CHVerifyReg_node_callbackExistingUser_id",
			"value": "9d7a87df-d656-4539-b1e4-7199950aa0e8"
		},
		{
			"key": "AuthTree_CHVerifyReg_node_callbackExistingUser",
			"value": "{\"x\":993,\"y\":367,\"connections\":{\"false\":\"e301438c-0bd0-429c-ab0c-66126501069a\"},\"nodeType\":\"ScriptedDecisionNode\",\"displayName\":\"Callback Existing User\"}"
		},
		{
			"key": "AuthTree_CHVerifyReg_node_passwordCollector_id",
			"value": "d3d9440a-6562-479a-be32-7d863a159155"
		},
		{
			"key": "AuthTree_CHVerifyReg_node_passwordCollector",
			"value": "{\"x\":905,\"y\":116,\"connections\":{\"outcome\":\"02d95fe8-1c39-4144-b411-13fcd4226c6a\"},\"nodeType\":\"PageNode\",\"displayName\":\"Password Collector\"}"
		},
		{
			"key": "AuthTree_CHVerifyReg_node_identifyExistingUser1_id",
			"value": "bb74cb44-5e3f-4634-9e5f-f18e121ca93f"
		},
		{
			"key": "AuthTree_CHVerifyReg_node_identifyExistingUser1",
			"value": "{\"x\":1418,\"y\":36,\"connections\":{\"true\":\"70e691a5-1e33-4ac3-a356-e7b6d60d92e0\",\"false\":\"e301438c-0bd0-429c-ab0c-66126501069a\"},\"nodeType\":\"IdentifyExistingUserNode\",\"displayName\":\"Identify Existing User\"}"
		},
		{
			"key": "AuthTree_CHVerifyReg_node_static",
			"value": "{\"startNode\":{\"x\":70,\"y\":80},\"70e691a5-1e33-4ac3-a356-e7b6d60d92e0\":{\"x\":1693,\"y\":39},\"e301438c-0bd0-429c-ab0c-66126501069a\":{\"x\":1615,\"y\":541}}"
		},
		{
			"key": "AuthTree_CHRegistration_nodes_retryLimitDecision_subnodes",
			"value": "{\"_id\":\"14a23247-eeb0-436c-99dd-1b046fc1204f\",\"_rev\":\"-1466544440\",\"retryLimit\":3,\"_type\":{\"_id\":\"RetryLimitDecisionNode\",\"name\":\"Retry Limit Decision\",\"collection\":true},\"_outcomes\":[{\"id\":\"Retry\",\"displayName\":\"Retry\"},{\"id\":\"Reject\",\"displayName\":\"Reject\"}]}"
		},
		{
			"key": "AuthTree_CHRegistration_nodes_HOTPGenerator_subnodes",
			"value": "{\"_id\":\"27ec8bc7-d2ed-4877-b8bd-ebd84d5b9994\",\"_rev\":\"-103630154\",\"length\":6,\"_type\":{\"_id\":\"OneTimePasswordGeneratorNode\",\"name\":\"HOTP Generator\",\"collection\":true},\"_outcomes\":[{\"id\":\"outcome\",\"displayName\":\"Outcome\"}]}"
		},
		{
			"key": "AuthTree_CHRegistration_node_OTPNotValid_subnodes",
			"value": "{\"_id\":\"2eaa7c69-f97d-4bbf-b8b0-2214832cbc6f\",\"_rev\":\"-121229647\",\"inputs\":[\"*\"],\"outcomes\":[\"true\"],\"outputs\":[\"*\"],\"script\":\"bf6c0ac8-8e13-4f11-8d99-d01b23e02a5c\",\"_type\":{\"_id\":\"ScriptedDecisionNode\",\"name\":\"Scripted Decision\",\"collection\":true},\"_outcomes\":[{\"id\":\"true\",\"displayName\":\"true\"}]}"
		},
		{
			"key": "AuthTree_CHRegistration_node_SendOTP_subnodes",
			"value": "{\"_id\":\"37a1f12f-1e7b-4ca2-a870-040bf63291a0\",\"_rev\":\"-978374159\",\"inputs\":[\"*\"],\"outcomes\":[\"true\",\"false\"],\"outputs\":[\"*\"],\"script\":\"b276c566-622e-11eb-ae93-0242ac130002\",\"_type\":{\"_id\":\"ScriptedDecisionNode\",\"name\":\"Scripted Decision\",\"collection\":true},\"_outcomes\":[{\"id\":\"true\",\"displayName\":\"true\"},{\"id\":\"false\",\"displayName\":\"false\"}]}"
		},
		{
			"key": "AuthTree_CHRegistration_node_OTPPage_subnodes",
			"value": "{\"_id\":\"42d22a17-4022-4d9a-8cc2-2ef7b2fd331c\",\"_rev\":\"-314981846\",\"nodes\":[{\"_id\":\"6b8324ab-700c-40f9-a138-f03f25c425aa\",\"nodeType\":\"ScriptedDecisionNode\",\"displayName\":\"Scripted Decision\"},{\"_id\":\"0ab69626-b411-41d0-8744-c2313b74fd93\",\"nodeType\":\"OneTimePasswordCollectorDecisionNode\",\"displayName\":\"OTP Collector Decision\"}],\"pageDescription\":{\"desc\":\"Please enter the code you received via SMS\"},\"pageHeader\":{\"header\":\"Please enter your code\"},\"stage\":\"REGISTRATION_MFA\",\"_type\":{\"_id\":\"PageNode\",\"name\":\"Page Node\",\"collection\":true},\"_outcomes\":[{\"id\":\"true\",\"displayName\":\"True\"},{\"id\":\"false\",\"displayName\":\"False\"}]}"
		},
		{
			"key": "AuthTree_CHRegistration_node_CreateNotifyJWTSMS_subnodes",
			"value": "{\"_id\":\"5c7f4247-3b01-4dae-b18b-1d90ee710891\",\"_rev\":\"-530431745\",\"inputs\":[\"*\"],\"outcomes\":[\"false\",\"true\"],\"outputs\":[\"*\"],\"script\":\"df67765e-df3a-4503-9ba5-35c992b39259\",\"_type\":{\"_id\":\"ScriptedDecisionNode\",\"name\":\"Scripted Decision\",\"collection\":true},\"_outcomes\":[{\"id\":\"false\",\"displayName\":\"false\"},{\"id\":\"true\",\"displayName\":\"true\"}]}"
		},
		{
			"key": "AuthTree_CHRegistration_node_CreateNotifyJWTEmail_subnodes",
			"value": "{\"_id\":\"997cc39b-afde-4935-b9b5-a0d4e3034072\",\"_rev\":\"-1650655193\",\"inputs\":[\"*\"],\"outcomes\":[\"true\",\"false\"],\"outputs\":[\"*\"],\"script\":\"df67765e-df3a-4503-9ba5-35c992b39259\",\"_type\":{\"_id\":\"ScriptedDecisionNode\",\"name\":\"Scripted Decision\",\"collection\":true},\"_outcomes\":[{\"id\":\"true\",\"displayName\":\"true\"},{\"id\":\"false\",\"displayName\":\"false\"}]}"
		},
		{
			"key": "AuthTree_CHRegistration_node_CreateEmailLink_subnodes",
			"value": "{\"_id\":\"9e02588a-e4ac-4b08-b10f-ad8f298ae720\",\"_rev\":\"-1752508429\",\"inputs\":[\"*\"],\"outcomes\":[\"true\",\"false\"],\"outputs\":[\"*\"],\"script\":\"b6ca4a1f-573f-4a3a-a410-d18b01207f6e\",\"_type\":{\"_id\":\"ScriptedDecisionNode\",\"name\":\"Scripted Decision\",\"collection\":true},\"_outcomes\":[{\"id\":\"true\",\"displayName\":\"true\"},{\"id\":\"false\",\"displayName\":\"false\"}]}"
		},
		{
			"key": "AuthTree_CHRegistration_node_CheckPhone_subnodes",
			"value": "{\"_id\":\"a87fa542-b6d3-49a1-bbdf-30370ae7042e\",\"_rev\":\"-1668526649\",\"inputs\":[\"*\"],\"outcomes\":[\"false\",\"true\"],\"outputs\":[\"*\"],\"script\":\"000c65e1-c9c6-4edb-96d2-298a9b152b40\",\"_type\":{\"_id\":\"ScriptedDecisionNode\",\"name\":\"Scripted Decision\",\"collection\":true},\"_outcomes\":[{\"id\":\"false\",\"displayName\":\"false\"},{\"id\":\"true\",\"displayName\":\"true\"}]}"
		},
		{
			"key": "AuthTree_CHRegistration_node_EmailCollector_subnodes",
			"value": "{\"_id\":\"eb711261-5253-4e17-9357-43e175a5005d\",\"_rev\":\"-755889864\",\"nodes\":[{\"_id\":\"f07f1b4a-8aef-4c53-b04f-e41fd06ed859\",\"nodeType\":\"AttributeCollectorNode\",\"displayName\":\"Attribute Collector\"}],\"pageDescription\":{\"en\":\"Signing up is fast and easy.<br>Already have an account? <a href='#/service/Login'>Sign In</a>\"},\"pageHeader\":{\"en\":\"Sign Up\"},\"stage\":\"REGISTRATION_1\",\"_type\":{\"_id\":\"PageNode\",\"name\":\"Page Node\",\"collection\":true},\"_outcomes\":[{\"id\":\"outcome\",\"displayName\":\"Outcome\"}]}"
		},
		{
			"key": "AuthTree_CHRegistration_node_EmailCollector_AttributeCollector_id",
			"value": "f07f1b4a-8aef-4c53-b04f-e41fd06ed859"
		},
		{
			"key": "AuthTree_CHRegistration_node_EmailCollector_AttributeCollector_subnodes",
			"value": "{\"_id\":\"f07f1b4a-8aef-4c53-b04f-e41fd06ed859\",\"_rev\":\"271853157\",\"attributesToCollect\":[\"givenName\",\"mail\",\"telephoneNumber\"],\"identityAttribute\":\"userName\",\"required\":false,\"validateInputs\":true,\"_type\":{\"_id\":\"AttributeCollectorNode\",\"name\":\"Attribute Collector\",\"collection\":true},\"_outcomes\":[{\"id\":\"outcome\",\"displayName\":\"Outcome\"}]}"
		},
		{
			"key": "AuthTree_CHVerifyReg_nodes_createUser_subnodes",
			"value": "{\"_id\":\"02d95fe8-1c39-4144-b411-13fcd4226c6a\",\"_rev\":\"1102773285\",\"identityResource\":\"managed/alpha_user\",\"_type\":{\"_id\":\"CreateObjectNode\",\"name\":\"Create Object\",\"collection\":true},\"_outcomes\":[{\"id\":\"CREATED\",\"displayName\":\"Created\"},{\"id\":\"FAILURE\",\"displayName\":\"Failed\"}]}"
		},
		{
			"key": "AuthTree_CHVerifyReg_nodes_verifyRegToken_subnodes",
			"value": "{\"_id\":\"7ebb5593-77f8-4125-a11a-5717499da135\",\"_rev\":\"997010188\",\"inputs\":[\"*\"],\"outcomes\":[\"true\",\"false\"],\"outputs\":[\"*\"],\"script\":\"b9d881b7-75c0-4cd6-8ede-e42193665657\",\"_type\":{\"_id\":\"ScriptedDecisionNode\",\"name\":\"Scripted Decision\",\"collection\":true},\"_outcomes\":[{\"id\":\"true\",\"displayName\":\"true\"},{\"id\":\"false\",\"displayName\":\"false\"}]}"
		},
		{
			"key": "AuthTree_CHVerifyReg_node_identifyExistingUser_subnodes",
			"value": "{\"_id\":\"63a23daf-33ad-4848-8e2a-c3f3d749e646\",\"_rev\":\"2072508832\",\"identifier\":\"userName\",\"identityAttribute\":\"mail\",\"_type\":{\"_id\":\"IdentifyExistingUserNode\",\"name\":\"Identify Existing User\",\"collection\":true},\"_outcomes\":[{\"id\":\"true\",\"displayName\":\"True\"},{\"id\":\"false\",\"displayName\":\"False\"}]}"
		},
		{
			"key": "AuthTree_CHVerifyReg_node_callbackExistingUser_subnodes",
			"value": "{\"_id\":\"9d7a87df-d656-4539-b1e4-7199950aa0e8\",\"_rev\":\"-1246504117\",\"inputs\":[\"*\"],\"outcomes\":[\"false\"],\"outputs\":[\"*\"],\"script\":\"181f73fa-ec30-4ef4-b78a-9790a4918b23\",\"_type\":{\"_id\":\"ScriptedDecisionNode\",\"name\":\"Scripted Decision\",\"collection\":true},\"_outcomes\":[{\"id\":\"false\",\"displayName\":\"false\"}]}"
		},
		{
			"key": "AuthTree_CHVerifyReg_node_passwordCollector_subnodes",
			"value": "{\"_id\":\"d3d9440a-6562-479a-be32-7d863a159155\",\"_rev\":\"467642305\",\"stage\":\"REGISTRATION_4\",\"nodes\":[{\"_id\":\"cc0eae7e-d27f-468f-9966-3f9efe7d7918\",\"nodeType\":\"ValidatedPasswordNode\",\"displayName\":\"Platform Password\"}],\"pageDescription\":{\"en\":\"Please enter your account password\"},\"pageHeader\":{\"en\":\"Enter your password\"},\"_type\":{\"_id\":\"PageNode\",\"name\":\"Page Node\",\"collection\":true},\"_outcomes\":[{\"id\":\"outcome\",\"displayName\":\"Outcome\"}]}"
		},
		{
			"key": "AuthTree_CHVerifyReg_node_identifyExistingUser1_subnodes",
			"value": "{\"_id\":\"bb74cb44-5e3f-4634-9e5f-f18e121ca93f\",\"_rev\":\"1387685632\",\"identifier\":\"userName\",\"identityAttribute\":\"mail\",\"_type\":{\"_id\":\"IdentifyExistingUserNode\",\"name\":\"Identify Existing User\",\"collection\":true},\"_outcomes\":[{\"id\":\"true\",\"displayName\":\"True\"},{\"id\":\"false\",\"displayName\":\"False\"}]}"
		},
		{
			"key": "Script_Callback_to_show_OTP_not_valid",
			"value": "{\"_id\":\"bf6c0ac8-8e13-4f11-8d99-d01b23e02a5c\",\"name\":\"CH - Callback to show OTP not valid\",\"description\":null,\"script\":\"dmFyIGZyID0gSmF2YUltcG9ydGVyKAogICAgb3JnLmZvcmdlcm9jay5vcGVuYW0uYXV0aC5ub2RlLmFwaS5BY3Rpb24KKQoKdHJ5ewogIHRyYW5zaWVudFN0YXRlLnB1dCgiZXJyb3IiLCAiVGhlIE9UUCBwcm92aWRlZCBpcyBub3QgdmFsaWQuIFBsZWFzZSB0cnkgYWdhaW4iKTsKfWNhdGNoKGUpewogIGxvZ2dlci5lcnJvcigiW1JFU0VUIFBXRF0gRXJyb3IgcG9wdWxhdGluZyB0cmFuc2llbnQgc3RhdGU6ICIrIGUpOwp9CgpvdXRjb21lID0gInRydWUiOw==\",\"default\":false,\"language\":\"JAVASCRIPT\",\"context\":\"AUTHENTICATION_TREE_DECISION_NODE\",\"createdBy\":\"null\",\"creationDate\":0,\"lastModifiedBy\":\"null\",\"lastModifiedDate\":0}"
		},
		{
			"key": "Script_Create_token_send_Email",
			"value": "{\"_id\":\"b6ca4a1f-573f-4a3a-a410-d18b01207f6e\",\"name\":\"CH - Registration - Create token and send Email\",\"description\":\"Creates a registration link and sends it via email to the user via Notify.\",\"script\":\"\",\"default\":false,\"language\":\"JAVASCRIPT\",\"context\":\"AUTHENTICATION_TREE_DECISION_NODE\",\"createdBy\":\"null\",\"creationDate\":0,\"lastModifiedBy\":\"null\",\"lastModifiedDate\":0}"
		},
		{
			"key": "Script_Create_Notify_JWT",
			"value": "{\"_id\":\"df67765e-df3a-4503-9ba5-35c992b39259\",\"name\":\"CH - Create Notify JWT\",\"description\":\"This script creates a JWT compatible with Gov Notify service. \\nThe resulting JWT (along with the template IDs) is then put in the transient state.\",\"script\":\"dmFyIGZyID0gSmF2YUltcG9ydGVyKAogIG9yZy5mb3JnZXJvY2suanNvbi5qb3NlLmJ1aWxkZXJzLkp3dEJ1aWxkZXJGYWN0b3J5LAogIG9yZy5mb3JnZXJvY2suanNvbi5qb3NlLmp3dC5Kd3RDbGFpbXNTZXQsCiAgb3JnLmZvcmdlcm9jay5qc29uLmpvc2UuandzLkp3c0FsZ29yaXRobSwKICBvcmcuZm9yZ2Vyb2NrLnNlY3JldHMuU2VjcmV0QnVpbGRlciwKICBqYXZheC5jcnlwdG8uc3BlYy5TZWNyZXRLZXlTcGVjLAogIG9yZy5mb3JnZXJvY2suc2VjcmV0cy5rZXlzLlNpZ25pbmdLZXksCiAgb3JnLmZvcmdlcm9jay5qc29uLmpvc2UuandzLmhhbmRsZXJzLlNlY3JldEhtYWNTaWduaW5nSGFuZGxlciwKICBvcmcuZm9yZ2Vyb2NrLm9wZW5hbS5hdXRoLm5vZGUuYXBpLkFjdGlvbiwKICBqYXZheC5zZWN1cml0eS5hdXRoLmNhbGxiYWNrLlRleHRPdXRwdXRDYWxsYmFjaywKICBjb20uc3VuLmlkZW50aXR5LmF1dGhlbnRpY2F0aW9uLmNhbGxiYWNrcy5IaWRkZW5WYWx1ZUNhbGxiYWNrLAogIG9yZy5mb3JnZXJvY2sudXRpbC5lbmNvZGUuQmFzZTY0LAogIGphdmEudGltZS50ZW1wb3JhbC5DaHJvbm9Vbml0LAogIGphdmEudGltZS5DbG9jawopCgovLyBUaGlzIHZhcmlhYmxlIHZhbHVlIHdpbGwgYmUgcmVwbGFjZWQgd2l0aCB0aGUgcmVsZXZhbnQgdmFsdWUgaW4gdGhlIHRhcmdldCBlbnZpcm9ubWVudCAoc3RvcmVkIGluIEFNIHNlY3JldCBzdG9yZSkgCnZhciBub3RpZnlEZXRhaWxzID0gInsgXCJrZXlOYW1lXCI6IFwiY2hzaWRhbXRlc3RcIiwgXCJpc3NVdWlkXCI6IFwiMzE0ZDgyOWYtNGI4Yy00MGZlLWI5ZjUtNTBlZDYwMDExMDJkXCIsIFwic2VjcmV0S2V5XCI6IFwiMDY4MmI2NjItNDUwMi00MzBkLWJjZWItNDU0MmJjNGU5ZWU3XCIsIFwidGVtcGxhdGVzXCI6IHsgXCJpbnZpdGVcIjogXCI2NTU3NTY4Yy1iOWNhLTQyNmQtOWNlZC1hYzBkNjg2NDkwZTRcIiwgXCJyZXF1ZXN0QXV0aHpcIjogXCI1Y2FiOWViNC1lNjQ4LTRhMGQtYTI3Yi01NTg5ODAyNTk0NDBcIiwgXCJvdHBFbWFpbFwiOiBcImExZjc3YzY0LTkyNjgtNDlkOS1iYjY0LThkZGM2YmFjMDE2NlwiLCBcIm90cFNtc1wiOiBcIjEyYWM0M2VjLTViODMtNDhlYy1iM2RiLTlhOGYzZDY2MjRmNlwiLCBcInZlcmlmeVJlZ1wiOiBcImJmOWVmZmE3LTNjMzAtNDQ5MC1iMTJiLWYxZjY1MjdmNGM2OVwiLCBcInJlc2V0UHdkXCI6IFwiYTE3Yjg4MmYtMDhhMC00ZDkxLTg2MGMtYWFjOWQ0MmM4ZjBiXCJ9fSIKdmFyIG5vdGlmeU9iajsKdmFyIGp3dDsKCnZhciBOb2RlT3V0Y29tZSA9IHsKICBTVUNDRVNTOiAidHJ1ZSIsCiAgRVJST1I6ICJmYWxzZSIKfQoKLy8gY3JlYXRlcyBhIEpXVCBmb3IgdGhlIEdPViBOb3RpZnkgY2FsbApmdW5jdGlvbiBidWlsZEp3dCgpIHsKICB2YXIgc2lnbmluZ0hhbmRsZXI7CiAgdmFyIHNlY3JldGJ5dGVzOwogIHZhciBzZWNyZXQ7CiAgdHJ5ewogICAgbm90aWZ5T2JqID0gSlNPTi5wYXJzZShub3RpZnlEZXRhaWxzKTsKICAgIHNlY3JldCA9IG5vdGlmeU9iai5zZWNyZXRLZXk7CiAgICBzZWNyZXRieXRlcyA9IGphdmEubGFuZy5TdHJpbmcoc2VjcmV0KS5nZXRCeXRlcygpCiAgfWNhdGNoKGUpewogICAgbG9nZ2VyLmVycm9yKCJFcnJvciB3aGlsZSBwYXJzaW5nIHNlY3JldDogIiArIGUpOwogICAgcmV0dXJuIGZhbHNlOwogIH0KICAKICBsb2dnZXIuZXJyb3IoInBhcnNlZDogIiArIEpTT04uc3RyaW5naWZ5KG5vdGlmeU9iaikpOwogIHZhciBpc3N1ZXIgPSBub3RpZnlPYmouaXNzVXVpZDsKCiAgdHJ5ewogICAgdmFyIHNlY3JldEJ1aWxkZXIgPSBuZXcgZnIuU2VjcmV0QnVpbGRlcjsKICAgIHNlY3JldEJ1aWxkZXIuc2VjcmV0S2V5KG5ldyBqYXZheC5jcnlwdG8uc3BlYy5TZWNyZXRLZXlTcGVjKHNlY3JldGJ5dGVzLCAiSG1hYyIpKTsKICAgIHNlY3JldEJ1aWxkZXIuc3RhYmxlSWQoaXNzdWVyKS5leHBpcmVzSW4oNSwgZnIuQ2hyb25vVW5pdC5NSU5VVEVTLCBmci5DbG9jay5zeXN0ZW1VVEMoKSk7CiAgICB2YXIga2V5ID0gbmV3IGZyLlNpZ25pbmdLZXkoc2VjcmV0QnVpbGRlcik7IAogICAgc2lnbmluZ0hhbmRsZXIgPSBuZXcgZnIuU2VjcmV0SG1hY1NpZ25pbmdIYW5kbGVyKGtleSk7CiAgfWNhdGNoKGUpewogICAgbG9nZ2VyLmVycm9yKCJFcnJvciB3aGlsZSBjcmVhdGluZyBzaWduaW5nIGhhbmRsZXI6ICIgKyBlKTsKICAgIHJldHVybiBmYWxzZTsKICB9CiAgCiAgdHJ5ewogICAgdmFyIGp3dENsYWltcyA9IG5ldyBmci5Kd3RDbGFpbXNTZXQ7CiAgICBqd3RDbGFpbXMuc2V0SXNzdWVyKGlzc3Vlcik7CiAgICBqd3RDbGFpbXMuc2V0SXNzdWVkQXRUaW1lKG5ldyBEYXRlKCkpOwogICAgdmFyIGp3dCA9IG5ldyBmci5Kd3RCdWlsZGVyRmFjdG9yeSgpCiAgICAgICAgICAuandzKHNpZ25pbmdIYW5kbGVyKQogICAgICAgICAgLmhlYWRlcnMoKQogICAgICAgICAgLmFsZyhmci5Kd3NBbGdvcml0aG0uSFMyNTYpCiAgICAgICAgICAuZG9uZSgpCiAgICAgICAgICAuY2xhaW1zKGp3dENsYWltcykKICAgICAgICAgIC5idWlsZCgpOwogICAgbG9nZ2VyLmVycm9yKCJKV1QgZm9yIE5vdGlmeTogIiArIGp3dCk7CiAgfWNhdGNoKGUpewogICAgbG9nZ2VyLmVycm9yKCJFcnJvciB3aGlsZSBidWlsZGluZyBKV1QgLSAiICsgZSk7CiAgICByZXR1cm4gZmFsc2U7CiAgfQogIHJldHVybiBqd3Q7Cn0KCi8vIHNhdmVzIHRoZSBKV1QgdG8gdHJhbnNpZW50IHN0YXRlIGZvciBmdXR1cmUgdXNlCmZ1bmN0aW9uIHNhdmVTdGF0ZShqd3QpewogIHRyeXsKICAgIHRyYW5zaWVudFN0YXRlLnB1dCgibm90aWZ5SldUIiwgand0KTsKICAgIHRyYW5zaWVudFN0YXRlLnB1dCgibm90aWZ5VGVtcGxhdGVzIiwgSlNPTi5zdHJpbmdpZnkobm90aWZ5T2JqLnRlbXBsYXRlcykpOwogICAgdHJhbnNpZW50U3RhdGUucHV0KCJzZWNyZXRLZXkiLCBub3RpZnlPYmouc2VjcmV0S2V5KTsKICB9Y2F0Y2goZSl7CiAgICBsb2dnZXIuZXJyb3IoIkVycm9yIHdoaWxlIHNldHRpbmcgc3RhdGUgLSAiICsgZSk7CiAgICByZXR1cm4gTm9kZU91dGNvbWUuRVJST1I7CiAgfQogIHJldHVybiBOb2RlT3V0Y29tZS5TVUNDRVNTOwp9CgovL21haW4gZXhlY3V0aW9uIGZsb3cKCnZhciBqd3QgPSBidWlsZEp3dCgpOwppZighand0KXsKICBpZiAoY2FsbGJhY2tzLmlzRW1wdHkoKSkgewogICAgYWN0aW9uID0gZnIuQWN0aW9uLnNlbmQoCiAgICAgIG5ldyBmci5UZXh0T3V0cHV0Q2FsbGJhY2soCiAgICAgICAgICBmci5UZXh0T3V0cHV0Q2FsbGJhY2suRVJST1IsCiAgICAgICAgICAiSm91cm5leSBmYWlsZWQgLSBFcnJvciB3aGlsZSBjcmVhdGluZyBOb3RpZnkgSldUIiAKICAgICAgKSwKICAgICAgbmV3IGZyLkhpZGRlblZhbHVlQ2FsbGJhY2sgKAogICAgICAgICAgInN0YWdlIiwKICAgICAgICAgICJHRU5FUklDX0VSUk9SIiAKICAgICAgKSwKICAgICAgbmV3IGZyLkhpZGRlblZhbHVlQ2FsbGJhY2sgKAogICAgICAgICAgInBhZ2VQcm9wc0pTT04iLAogICAgICAgICAgSlNPTi5zdHJpbmdpZnkoeyJlcnJvcnMiOiBbeyJsYWJlbCI6ICJFcnJvciB3aGlsZSBjcmVhdGluZyBOb3RpZnkgSldUIn1dfSkKICAgICAgKQogICAgKS5idWlsZCgpCiAgfQp9IGVsc2UgewogIHZhciBzYXZlZCA9IHNhdmVTdGF0ZShqd3QpOwogIGFjdGlvbiA9IGZyLkFjdGlvbi5nb1RvKHNhdmVkKS5idWlsZCgpCn0=\",\"default\":false,\"language\":\"JAVASCRIPT\",\"context\":\"AUTHENTICATION_TREE_DECISION_NODE\",\"createdBy\":\"null\",\"creationDate\":0,\"lastModifiedBy\":\"null\",\"lastModifiedDate\":0}"
		},
		{
			"key": "Script_Phone_Number_entered",
			"value": "{\"_id\":\"000c65e1-c9c6-4edb-96d2-298a9b152b40\",\"name\":\"CH - Phone Number entered by user\",\"description\":\"Checks whether the Phone Number has been entered by end user\",\"script\":\"dmFyIHBob25lID0gc2hhcmVkU3RhdGUuZ2V0KCJvYmplY3RBdHRyaWJ1dGVzIikuZ2V0KCJ0ZWxlcGhvbmVOdW1iZXIiKTsKaWYgKHBob25lKSB7CiAgdHJhbnNpZW50U3RhdGUucHV0KCJyZWdpc3RyYXRpb25NRkEiLCB0cnVlKTsKICBvdXRjb21lID0gInRydWUiOwp9IGVsc2UgewogIG91dGNvbWUgPSAiZmFsc2UiOwp9\",\"default\":false,\"language\":\"JAVASCRIPT\",\"context\":\"AUTHENTICATION_TREE_DECISION_NODE\",\"createdBy\":\"null\",\"creationDate\":0,\"lastModifiedBy\":\"null\",\"lastModifiedDate\":0}"
		},
		{
			"key": "Script_Send_MFA_Text",
			"value": "{\"_id\":\"b276c566-622e-11eb-ae93-0242ac130002\",\"name\":\"CH - Send MFA text\",\"description\":\"Send an MFA code to a user via SMS\",\"script\":\"dmFyIGZyID0gSmF2YUltcG9ydGVyKAogIG9yZy5mb3JnZXJvY2sub3BlbmFtLmF1dGgubm9kZS5hcGkuQWN0aW9uLAogIGphdmF4LnNlY3VyaXR5LmF1dGguY2FsbGJhY2suVGV4dE91dHB1dENhbGxiYWNrLAogIGNvbS5zdW4uaWRlbnRpdHkuYXV0aGVudGljYXRpb24uY2FsbGJhY2tzLkhpZGRlblZhbHVlQ2FsbGJhY2sKKQoKdmFyIG5vdGlmeUpXVCA9IHRyYW5zaWVudFN0YXRlLmdldCgibm90aWZ5SldUIik7CnZhciB0ZW1wbGF0ZXMgPSB0cmFuc2llbnRTdGF0ZS5nZXQoIm5vdGlmeVRlbXBsYXRlcyIpOwp2YXIgaXNSZWdpc3RyYXRpb25NRkEgPSB0cmFuc2llbnRTdGF0ZS5nZXQoInJlZ2lzdHJhdGlvbk1GQSIpOwp2YXIgY29kZSA9IHNoYXJlZFN0YXRlLmdldCgib25lVGltZVBhc3N3b3JkIik7CnZhciB1c2VySWQgPSBzaGFyZWRTdGF0ZS5nZXQoIl9pZCIpOwp2YXIgcGhvbmVOdW1iZXIgPSAiIjsKCmlmKGlzUmVnaXN0cmF0aW9uTUZBKXsKICBwaG9uZU51bWJlciA9IHNoYXJlZFN0YXRlLmdldCgib2JqZWN0QXR0cmlidXRlcyIpLmdldCgidGVsZXBob25lTnVtYmVyIik7Cn0gZWxzZSB7CiAgaWYgKGlkUmVwb3NpdG9yeS5nZXRBdHRyaWJ1dGUodXNlcklkLCAidGVsZXBob25lTnVtYmVyIikuaXRlcmF0b3IoKS5oYXNOZXh0KCkpIHsKICAgICAgcGhvbmVOdW1iZXIgPSBpZFJlcG9zaXRvcnkuZ2V0QXR0cmlidXRlKHVzZXJJZCwgInRlbGVwaG9uZU51bWJlciIpLml0ZXJhdG9yKCkubmV4dCgpOwogIH0gZWxzZSB7CiAgICBsb2dnZXIuZXJyb3IoIltTRU5EIE1GQSBTTVNdIENvdWxkbid0IGZpbmQgdGVsZXBob25lTnVtYmVyIik7CiAgICAvLyBUT0RPIEJldHRlciBoYW5kbGluZyBvZiBlcnJvcgogIH0KfQoKbG9nZ2VyLmVycm9yKCJbU0VORCBNRkEgU01TXSBVc2VyIHBob25lTnVtYmVyOiAiICsgcGhvbmVOdW1iZXIpOwpsb2dnZXIuZXJyb3IoIltTRU5EIE1GQSBTTVNdIEpXVCBmcm9tIHRyYW5zaWVudCBzdGF0ZTogIiArIG5vdGlmeUpXVCk7CmxvZ2dlci5lcnJvcigiW1NFTkQgTUZBIFNNU10gVGVtcGxhdGVzIGZyb20gdHJhbnNpZW50IHN0YXRlOiAiICsgdGVtcGxhdGVzKTsKbG9nZ2VyLmVycm9yKCJbU0VORCBNRkEgU01TXSBDb2RlOiAiICsgY29kZSk7Cgp2YXIgcmVxdWVzdCA9IG5ldyBvcmcuZm9yZ2Vyb2NrLmh0dHAucHJvdG9jb2wuUmVxdWVzdCgpOwpyZXF1ZXN0LnNldFVyaSgiaHR0cHM6Ly9hcGkubm90aWZpY2F0aW9ucy5zZXJ2aWNlLmdvdi51ay92Mi9ub3RpZmljYXRpb25zL3NtcyIpOwp0cnkgewogIHZhciByZXF1ZXN0Qm9keUpzb24gPSB7CiAgICAicGhvbmVfbnVtYmVyIjogcGhvbmVOdW1iZXIsCiAgICAidGVtcGxhdGVfaWQiOiBKU09OLnBhcnNlKHRlbXBsYXRlcykub3RwU21zLAogICAgInBlcnNvbmFsaXNhdGlvbiI6IHsKICAgICAgICAiY29kZSI6IGNvZGUKICAgIH0KICB9Cn0gY2F0Y2goZSkgewogIGxvZ2dlci5lcnJvcigiW1NFTkQgTUZBIFNNU10gRXJyb3Igd2hpbGUgcHJlcGFyaW5nIHJlcXVlc3QgZm9yIE5vdGlmeTogIiArIGUpOwp9CgpyZXF1ZXN0LnNldE1ldGhvZCgiUE9TVCIpOwpyZXF1ZXN0LmdldEhlYWRlcnMoKS5hZGQoIkNvbnRlbnQtVHlwZSIsICJhcHBsaWNhdGlvbi9qc29uIik7CnJlcXVlc3QuZ2V0SGVhZGVycygpLmFkZCgiQXV0aG9yaXphdGlvbiIsICJCZWFyZXIgIiArIG5vdGlmeUpXVCk7CnJlcXVlc3QuZ2V0RW50aXR5KCkuc2V0U3RyaW5nKEpTT04uc3RyaW5naWZ5KHJlcXVlc3RCb2R5SnNvbikpCgp2YXIgbm90aWZpY2F0aW9uSWQ7CnZhciByZXNwb25zZSA9IGh0dHBDbGllbnQuc2VuZChyZXF1ZXN0KS5nZXQoKTsKCnRyeSB7CiAgbm90aWZpY2F0aW9uSWQgPSBKU09OLnBhcnNlKHJlc3BvbnNlLmdldEVudGl0eSgpLmdldFN0cmluZygpKS5pZDsKICBsb2dnZXIuZXJyb3IoIltTRU5EIE1GQSBTTVNdIE5vdGlmeSBJRDogIiArIG5vdGlmaWNhdGlvbklkKTsKICB0cmFuc2llbnRTdGF0ZS5wdXQoIm5vdGlmaWNhdGlvbklkIiwgbm90aWZpY2F0aW9uSWQpOwogIHRyYW5zaWVudFN0YXRlLnB1dCgibWZhLXJvdXRlIiwgInNtcyIpOwp9IGNhdGNoKGUpIHsKICBsb2dnZXIuZXJyb3IoIltTRU5EIE1GQSBTTVNdIEVycm9yIHdoaWxlIHBhcnNpbmcgTm90aWZ5IHJlc3BvbnNlOiAiICsgZSk7Cn0KCmxvZ2dlci5lcnJvcigiW1NFTkQgTUZBIFNNU10gTm90aWZ5IFJlc3BvbnNlOiAiICsgcmVzcG9uc2UuZ2V0U3RhdHVzKCkuZ2V0Q29kZSgpICsgcmVzcG9uc2UuZ2V0Q2F1c2UoKSArIHJlc3BvbnNlLmdldEVudGl0eSgpLmdldFN0cmluZygpKTsKCmlmIChyZXNwb25zZS5nZXRTdGF0dXMoKS5nZXRDb2RlKCkgPT0gMjAxKSB7CiAgb3V0Y29tZSA9ICJ0cnVlIjsKfSBlbHNlIHsKICBpZiAoY2FsbGJhY2tzLmlzRW1wdHkoKSkgewogICAgYWN0aW9uID0gZnIuQWN0aW9uLnNlbmQoCiAgICAgIG5ldyBmci5IaWRkZW5WYWx1ZUNhbGxiYWNrICgKICAgICAgICAgICJzdGFnZSIsCiAgICAgICAgICAiU0VORF9NRkFfU01TX0VSUk9SIgogICAgICApLAogICAgICAgIG5ldyBmci5UZXh0T3V0cHV0Q2FsbGJhY2soCiAgICAgICAgICBmci5UZXh0T3V0cHV0Q2FsbGJhY2suRVJST1IsCiAgICAgICAgICAiVGhlIGVtYWlsIGNvdWxkIG5vdCBiZSBzZW50OiAiICsgcmVzcG9uc2UuZ2V0RW50aXR5KCkuZ2V0U3RyaW5nKCkKICAgICAgKSwKICAgICAgbmV3IGZyLkhpZGRlblZhbHVlQ2FsbGJhY2sgKAogICAgICAgICAgInBhZ2VQcm9wc0pTT04iLAogICAgICAgICAgSlNPTi5zdHJpbmdpZnkoeyAnZXJyb3JzJzogW3sgbGFiZWw6ICJBbiBlcnJvciBvY2N1cnJlZCB3aGlsZSBzZW5kaW5nIHRoZSBTTVMuIFBsZWFzZSB0cnkgYWdhaW4uIn0gXSB9KQogICAgICApCiAgICApLmJ1aWxkKCkKICB9CiAgb3V0Y29tZSA9ICJmYWxzZSI7Cn0=\",\"default\":false,\"language\":\"JAVASCRIPT\",\"context\":\"AUTHENTICATION_TREE_DECISION_NODE\",\"createdBy\":\"null\",\"creationDate\":0,\"lastModifiedBy\":\"null\",\"lastModifiedDate\":0}"
		},
		{
			"key": "Script_Registration_Verify_Token",
			"value": "{\"_id\":\"b9d881b7-75c0-4cd6-8ede-e42193665657\",\"name\":\"CH - Registration - Verify Token\",\"description\":\"Verify User Registration token\",\"script\":\"dmFyIGZyID0gSmF2YUltcG9ydGVyKAogIG9yZy5mb3JnZXJvY2sub3BlbmFtLmF1dGgubm9kZS5hcGkuQWN0aW9uLAogIGphdmEubGFuZy5NYXRoLAogIGphdmEubGFuZy5TdHJpbmcsCiAgb3JnLmZvcmdlcm9jay5vcGVuYW0uYXV0aC5ub2RlLmFwaSwKICBqYXZheC5zZWN1cml0eS5hdXRoLmNhbGxiYWNrLlRleHRPdXRwdXRDYWxsYmFjaywKICBjb20uc3VuLmlkZW50aXR5LmF1dGhlbnRpY2F0aW9uLmNhbGxiYWNrcy5IaWRkZW5WYWx1ZUNhbGxiYWNrLAogIG9yZy5mb3JnZXJvY2suanNvbi5qb3NlLmJ1aWxkZXJzLkp3dEJ1aWxkZXJGYWN0b3J5LAogIG9yZy5mb3JnZXJvY2suanNvbi5qb3NlLmp3dC5Kd3RDbGFpbXNTZXQsCiAgb3JnLmZvcmdlcm9jay5qc29uLmpvc2UuandzLkp3c0FsZ29yaXRobSwKICBvcmcuZm9yZ2Vyb2NrLmpzb24uam9zZS5qd3MuU2lnbmVkSnd0LAogIG9yZy5mb3JnZXJvY2suanNvbi5qb3NlLmp3cy5Kd3NIZWFkZXIKKQoKdmFyIE5vZGVPdXRjb21lID0gewogIFNVQ0NFU1M6ICJ0cnVlIiwKICBFUlJPUjogImZhbHNlIgp9CgpmdW5jdGlvbiBleHRyYWN0VG9rZW5QYXJhbWV0ZXIoKXsKICB2YXIgdG9rZW5VUkxQYXJhbSA9IHJlcXVlc3RQYXJhbWV0ZXJzLmdldCgidG9rZW4iKTsKICBpZiAoIXRva2VuVVJMUGFyYW0pIHsgCiAgICBpZiAoY2FsbGJhY2tzLmlzRW1wdHkoKSkgewogICAgICBhY3Rpb24gPSBmci5BY3Rpb24uc2VuZCgKICAgICAgICAgIG5ldyBmci5IaWRkZW5WYWx1ZUNhbGxiYWNrICgKICAgICAgICAgICAgInN0YWdlIiwKICAgICAgICAgICAgIlJFR0lTVFJBVElPTl9FUlJPUiIgCiAgICAgICAgICApLAogICAgICAgICAgbmV3IGZyLkhpZGRlblZhbHVlQ2FsbGJhY2sgKAogICAgICAgICAgICAicGFnZVByb3BzSlNPTiIsCiAgICAgICAgICAgIEpTT04uc3RyaW5naWZ5KHsiZXJyb3IiOiAiVG9rZW4gcGFyYW1ldGVyIG5vdCBmb3VuZCJ9KSAKICAgICAgICAgICksCiAgICAgICAgICBuZXcgZnIuVGV4dE91dHB1dENhbGxiYWNrKAogICAgICAgICAgICBmci5UZXh0T3V0cHV0Q2FsbGJhY2suRVJST1IsCiAgICAgICAgICAgICJUb2tlbiBwYXJhbWV0ZXIgbm90IGZvdW5kIgogICAgICAgICAgKQogICAgICApLmJ1aWxkKCk7CiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KICB9ZWxzZXsKICAgIHJldHVybiB0b2tlblVSTFBhcmFtLmdldCgwKTsKICB9Cn0KCmZ1bmN0aW9uIGV4dHJhY3RJbmZvRnJvbVRva2VuKHRva2VuVVJMKXsKICAvL3Rva2VuVVJMID0gcmVxdWVzdFBhcmFtZXRlcnMuZ2V0KCJ0b2tlbiIpLmdldCgwKTsKICBsb2dnZXIuZXJyb3IoIltSRUdJU1RSQVRJT04tUkVTVU1FXSByZWNlaXZlZCB0b2tlbjogIiArIHRva2VuVVJMKTsKICAvLyBUT0RPOiBUT0tFTiBERUNSWVBUSU9OCiAgdHJ5ewogICAgLy8gcmVjb25zdHJ1Y3QgdGhlIGluYm91bmQgdG9rZW4sIGV4dHJhY3QgdGhlIG9yaWdpbmF0aW5nIGVtYWlsIGFuZCBjcmVhdGlvbiBkYXRlCiAgICB2YXIgc2lnbmVkSnd0ID0gbmV3IGZyLkp3dEJ1aWxkZXJGYWN0b3J5KCkucmVjb25zdHJ1Y3QodG9rZW5VUkwsIGZyLlNpZ25lZEp3dCk7CiAgICB2YXIgY2xhaW1TZXQgPSBzaWduZWRKd3QuZ2V0Q2xhaW1zU2V0KCk7CiAgICB2YXIgZW1haWwgPSBjbGFpbVNldC5nZXRTdWJqZWN0KCk7CiAgICB2YXIgaWF0ID0gY2xhaW1TZXQuZ2V0Q2xhaW0oImNyZWF0aW9uRGF0ZSIpOwogICAgdmFyIGZ1bGxOYW1lID0gY2xhaW1TZXQuZ2V0Q2xhaW0oImZ1bGxOYW1lIik7CiAgICB2YXIgcGhvbmUgPSBjbGFpbVNldC5nZXRDbGFpbSgicGhvbmUiKTsKICAgIHZhciBub3cgPSBuZXcgRGF0ZSgpOwogICAgZGlmZmVyZW5jZUluVGltZSA9IG5vdy5nZXRUaW1lKCkgLSAobmV3IERhdGUoaWF0KSkuZ2V0VGltZSgpOwogICAgbG9nZ2VyLmVycm9yKCJbUkVHSVNUUkFUSU9OLVJFU1VNRV0gaW5pdGlhdGluZyBlbWFpbDogIiArIGVtYWlsICsgIiBvbjogIisgaWF0ICsgIiAtIGRpZmZlcmVuY2UgKGhvdXJzKTogIitNYXRoLnJvdW5kKGRpZmZlcmVuY2VJblRpbWUvKDEwMDAgKiA2MCkvNjApKTsKICAgIGxvZ2dlci5lcnJvcigiW1JFR0lTVFJBVElPTi1SRVNVTUVdIG5hbWU6ICIgKyBmdWxsTmFtZSk7CiAgICBsb2dnZXIuZXJyb3IoIltSRUdJU1RSQVRJT04tUkVTVU1FXSBwaG9uZTogIiArIHBob25lKTsKICAgIHJldHVybiB7CiAgICAgIGVtYWlsOiBlbWFpbCwKICAgICAgZnVsbE5hbWU6IGZ1bGxOYW1lLAogICAgICBwaG9uZTogcGhvbmUsCiAgICAgIGRpZmZlcmVuY2VJblRpbWU6IGRpZmZlcmVuY2VJblRpbWUKICAgIH0KICB9Y2F0Y2goZSl7CiAgICBsb2dnZXIuZXJyb3IoIltSRUdJU1RSQVRJT04tUkVTVU1FXSBlcnJvciB3aGlsZSByZWNvbnN0cnVjdGluZyBKV1Q6ICIgKyBlKTsKICAgIHJldHVybiBmYWxzZTsJCiAgfQp9CgpmdW5jdGlvbiByYWlzZVRva2VuRXhwaXJlZEVycm9yKCl7CiAgaWYgKGNhbGxiYWNrcy5pc0VtcHR5KCkpIHsKICAgIGFjdGlvbiA9IGZyLkFjdGlvbi5zZW5kKAogICAgICBuZXcgZnIuSGlkZGVuVmFsdWVDYWxsYmFjayAoCiAgICAgICAgICAgICJzdGFnZSIsCiAgICAgICAgICAgICJSRUdJU1RSQVRJT05fRVJST1IiIAogICAgICApLAogICAgICBuZXcgZnIuSGlkZGVuVmFsdWVDYWxsYmFjayAoCiAgICAgICAgInBhZ2VQcm9wc0pTT04iLAogICAgICAgIEpTT04uc3RyaW5naWZ5KHsiZXJyb3IiOiAiVGhlIHJlZ2lzdHJhdGlvbiB0b2tlbiBoYXMgZXhwaXJlZCJ9KSAKICAgICAgKSwKICAgICAgbmV3IGZyLlRleHRPdXRwdXRDYWxsYmFjaygKICAgICAgICBmci5UZXh0T3V0cHV0Q2FsbGJhY2suRVJST1IsCiAgICAgICAgIlRoZSByZWdpc3RyYXRpb24gdG9rZW4gaGFzIGV4cGlyZWQiCiAgICAgICkKICAgICkuYnVpbGQoKQogIH0KfQoKZnVuY3Rpb24gc2F2ZVVzZXJEYXRhVG9TdGF0ZSh0b2tlbkRhdGEpewogIGxvZ2dlci5lcnJvcigiW1JFR0lTVFJBVElPTi1SRVNVTUVdIFRoZSBwcm92aWRlZCB0b2tlbiBpcyBzdGlsbCB2YWxpZCIpOwogIHRyeXsKICAgIC8vIHB1dCB0aGUgcmVhZCBhdHRyaWJ1dGVzIGluIHNoYXJlZCBzdGF0ZSBmb3IgdGhlIENyZWF0ZSBPYmplY3Qgbm9kZSB0byBjb25zdW1lCiAgICBzaGFyZWRTdGF0ZS5wdXQoIm9iamVjdEF0dHJpYnV0ZXMiLCAKICAgICAgewogICAgICAgICJ1c2VyTmFtZSI6IHRva2VuRGF0YS5lbWFpbCwgCiAgICAgICAgImdpdmVuTmFtZSI6IHRva2VuRGF0YS5mdWxsTmFtZSwgCiAgICAgICAgInNuIjogdG9rZW5EYXRhLmVtYWlsLCAKICAgICAgICAibWFpbCI6IHRva2VuRGF0YS5lbWFpbCwgCiAgICAgICAgInRlbGVwaG9uZU51bWJlciI6IHRva2VuRGF0YS5waG9uZQogICAgICB9KTsKICAgIHNoYXJlZFN0YXRlLnB1dCgidXNlck5hbWUiLCB0b2tlbkRhdGEuZW1haWwpOwogICAgcmV0dXJuIE5vZGVPdXRjb21lLlNVQ0NFU1M7CiAgfWNhdGNoKGUpewogICAgbG9nZ2VyLmVycm9yKCJbUkVHSVNUUkFUSU9OLVJFU1VNRV0gZXJyb3Igd2hpbGUgc3RvcmluZyBzdGF0ZTogIiArIGUpOwogICAgcmV0dXJuIE5vZGVPdXRjb21lLkVSUk9SOwogIH0KfQoKLy9tYWluIGV4ZWN1dGlvbiBmbG93Cgp2YXIgdG9rZW4gPSBleHRyYWN0VG9rZW5QYXJhbWV0ZXIoKTsKCmlmKHRva2VuKSB7CiAgLy8gVE9ETzogVE9LRU4gVkVSSUZJQ0FUSU9OCiAgLy8gc2VlIGh0dHBzOi8vZ2l0Lm9wZW5hbS5vcmcucnUvb3JnLmZvcmdlcm9jay9vcmcuZm9yZ2Vyb2NrLm9wZW5hbS9ibG9iLzZkOGJkN2MwNzllZDUyYWFlZmVjYjEyZTFiMjMzZWE2OTc0MzFhOTYvb3BlbmFtL29wZW5hbS1jb3JlLXJlc3Qvc3JjL21haW4vamF2YS9vcmcvZm9yZ2Vyb2NrL29wZW5hbS9jb3JlL3Jlc3QvYXV0aG4vQXV0aElkSGVscGVyLmphdmEKICAvLyAgU3RyaW5nIGtleUFsaWFzID0gZ2V0S2V5QWxpYXMocmVhbG1ETik7CiAgLy8gIFB1YmxpY0tleSBwdWJsaWNLZXkgPSBhbUtleVByb3ZpZGVyLmdldFB1YmxpY0tleShrZXlBbGlhcyk7CiAgLy8gIFNpZ25pbmdIYW5kbGVyIHNpZ25pbmdIYW5kbGVyID0gc2lnbmluZ01hbmFnZXIubmV3SG1hY1NpZ25pbmdIYW5kbGVyKHB1YmxpY0tleS5nZXRFbmNvZGVkKCkpOwogIC8vICB2YXIgdmVyaWZpZWQgPSBzaWduZWRKd3QudmVyaWZ5KHNpZ25pbmdIYW5kbGVyKQogIHZhciB0b2tlbkRhdGEgPSBleHRyYWN0SW5mb0Zyb21Ub2tlbih0b2tlbik7CgogIGlmKCF0b2tlbkRhdGEpewogICAgaWYgKGNhbGxiYWNrcy5pc0VtcHR5KCkpIHsKICAgICAgYWN0aW9uID0gZnIuQWN0aW9uLnNlbmQoCiAgICAgICAgbmV3IGZyLlRleHRPdXRwdXRDYWxsYmFjaygKICAgICAgICAgICAgZnIuVGV4dE91dHB1dENhbGxiYWNrLkVSUk9SLAogICAgICAgICAgICAiRXJyb3IgV2hpbGUgcGFyc2luZyB0b2tlbiIKICAgICAgICApLAogICAgICAgIG5ldyBmci5IaWRkZW5WYWx1ZUNhbGxiYWNrICgKICAgICAgICAgICJzdGFnZSIsCiAgICAgICAgICAiUkVHSVNUUkFUSU9OX0VSUk9SIiAKICAgICAgICApLAogICAgICAgIG5ldyBmci5IaWRkZW5WYWx1ZUNhbGxiYWNrICgKICAgICAgICAgICJwYWdlUHJvcHNKU09OIiwKICAgICAgICAgIEpTT04uc3RyaW5naWZ5KHsiZXJyb3IiOiAiRXJyb3IgV2hpbGUgcGFyc2luZyB0b2tlbiJ9KSAKICAgICAgICApCiAgICAgICkuYnVpbGQoKQogICAgfQogIH0gZWxzZSBpZiAoTWF0aC5yb3VuZCh0b2tlbkRhdGEuZGlmZmVyZW5jZUluVGltZS8oMTAwMCAqIDYwKSkgPCAxNDQwKXsKICAgIG91dGNvbWUgPSBzYXZlVXNlckRhdGFUb1N0YXRlKHRva2VuRGF0YSk7IAogIH0gZWxzZSB7CiAgICByYWlzZVRva2VuRXhwaXJlZEVycm9yKCk7CiAgICBvdXRjb21lID0gTm9kZU91dGNvbWUuRVJST1I7CiAgfQp9\",\"default\":false,\"language\":\"JAVASCRIPT\",\"context\":\"AUTHENTICATION_TREE_DECISION_NODE\",\"createdBy\":\"null\",\"creationDate\":0,\"lastModifiedBy\":\"null\",\"lastModifiedDate\":0}"
		},
		{
			"key": "Script_Callback_User_Already_Exists",
			"value": "{\"_id\":\"181f73fa-ec30-4ef4-b78a-9790a4918b23\",\"name\":\"CH - Callback for User Already Exists\",\"description\":\"Callback to return the existing user message during registration\",\"script\":\"dmFyIGZyID0gSmF2YUltcG9ydGVyKAogIG9yZy5mb3JnZXJvY2sub3BlbmFtLmF1dGgubm9kZS5hcGkuQWN0aW9uLAogIGphdmF4LnNlY3VyaXR5LmF1dGguY2FsbGJhY2suVGV4dE91dHB1dENhbGxiYWNrLAogIGNvbS5zdW4uaWRlbnRpdHkuYXV0aGVudGljYXRpb24uY2FsbGJhY2tzLkhpZGRlblZhbHVlQ2FsbGJhY2sKKQoKaWYgKGNhbGxiYWNrcy5pc0VtcHR5KCkpIHsKICBhY3Rpb24gPSBmci5BY3Rpb24uc2VuZCgKICAgIG5ldyBmci5UZXh0T3V0cHV0Q2FsbGJhY2soCiAgICAgICAgZnIuVGV4dE91dHB1dENhbGxiYWNrLkVSUk9SLAogICAgICAgICJSZWdpc3RyYXRpb24gZmFpbGVkIC0gQSB1c2VyIHdpdGggdGhpcyBlbWFpbCBhbHJlYWR5IGV4aXN0cyEiIAogICAgKSwKICAgIG5ldyBmci5IaWRkZW5WYWx1ZUNhbGxiYWNrICgKICAgICAgICAic3RhZ2UiLAogICAgICAgICJSRUdJU1RSQVRJT05fRVJST1IiIAogICAgKSwKICAgIG5ldyBmci5IaWRkZW5WYWx1ZUNhbGxiYWNrICgKICAgICAgICAicGFnZVByb3BzSlNPTiIsCiAgICAgICAgSlNPTi5zdHJpbmdpZnkoeyJlcnJvcnMiOiBbeyJsYWJlbCI6ICJBIHVzZXIgd2l0aCB0aGlzIGVtYWlsIGFscmVhZHkgZXhpc3RzISJ9XX0pCiAgICApCiAgKS5idWlsZCgpCn0gZWxzZSB7IAogb3V0Y29tZSA9ICJmYWxzZSI7Cn0=\",\"default\":false,\"language\":\"JAVASCRIPT\",\"context\":\"AUTHENTICATION_TREE_DECISION_NODE\",\"createdBy\":\"null\",\"creationDate\":0,\"lastModifiedBy\":\"null\",\"lastModifiedDate\":0}"
		},
		{
			"key": "AuthTree_CHLoginMFA",
			"value": "{\"_id\":\"chloginmfa\",\"_rev\":\"880670803\",\"description\":\"Platform Login Tree\",\"identityResource\":\"managed/alpha_user\",\"entryNodeId\":\"a6eb5385-ac12-4359-8f0f-9a588ca5a334\",\"staticNodes\":{\"startNode\":{\"x\":70,\"y\":190},\"70e691a5-1e33-4ac3-a356-e7b6d60d92e0\":{\"x\":3403,\"y\":241.66666666666666},\"e301438c-0bd0-429c-ab0c-66126501069a\":{\"x\":3319,\"y\":779.3333333333334}},\"uiConfig\":{},\"nodes\":{\"15993a44-70e7-4799-b35c-a245acb9ccc6\":{\"x\":2672,\"y\":197.5,\"connections\":{\"outcome\":\"0c25a25f-7673-4bff-9d20-b4eecf9b6ca5\"},\"nodeType\":\"IncrementLoginCountNode\",\"displayName\":\"Increment Login Count\"},\"5c3d2eda-3ea6-4fdc-8421-e29a5b2aecda\":{\"x\":2136,\"y\":80,\"connections\":{\"false\":\"e301438c-0bd0-429c-ab0c-66126501069a\",\"true\":\"82b05c8c-258d-41fd-a38e-5d3326a709bc\"},\"nodeType\":\"ScriptedDecisionNode\",\"displayName\":\"Send MFA text via Notify\"},\"77f75f06-34de-4045-a9f2-73b01bf79a3b\":{\"x\":455,\"y\":172.5,\"connections\":{\"false\":\"e301438c-0bd0-429c-ab0c-66126501069a\",\"true\":\"97b35ef6-74bf-4f46-a0d3-dab716e40249\"},\"nodeType\":\"DataStoreDecisionNode\",\"displayName\":\"Data Store Decision\"},\"97b35ef6-74bf-4f46-a0d3-dab716e40249\":{\"x\":691,\"y\":172.5,\"connections\":{\"false\":\"e301438c-0bd0-429c-ab0c-66126501069a\",\"true\":\"028a75de-c133-4e3f-8569-158ee1094b78\"},\"nodeType\":\"IdentifyExistingUserNode\",\"displayName\":\"Identify Existing User\"},\"a6eb5385-ac12-4359-8f0f-9a588ca5a334\":{\"x\":210,\"y\":145,\"connections\":{\"outcome\":\"77f75f06-34de-4045-a9f2-73b01bf79a3b\"},\"nodeType\":\"PageNode\",\"displayName\":\"Page Node\"},\"c3f22327-1e32-4f18-957f-731aa9c97dd5\":{\"x\":1168,\"y\":172.5,\"connections\":{\"false\":\"b6c21d0e-4e55-47c0-8a58-e86939c93c14\",\"true\":\"bed7617c-467f-49df-bb86-2e42de21d706\"},\"nodeType\":\"ScriptedDecisionNode\",\"displayName\":\"Has Phone Number\"},\"de45e2b0-1462-4423-a397-80df1255f4ea\":{\"x\":3161,\"y\":172.5,\"connections\":{\"false\":\"e301438c-0bd0-429c-ab0c-66126501069a\",\"true\":\"70e691a5-1e33-4ac3-a356-e7b6d60d92e0\"},\"nodeType\":\"InnerTreeEvaluatorNode\",\"displayName\":\"Inner Tree Evaluator\"},\"f8cba5d7-0906-40c0-bd61-df601a04cf9f\":{\"x\":1906,\"y\":113.33333333333334,\"connections\":{\"outcome\":\"5c3d2eda-3ea6-4fdc-8421-e29a5b2aecda\"},\"nodeType\":\"OneTimePasswordGeneratorNode\",\"displayName\":\"HOTP Generator\"},\"fdcf16b0-de65-4219-a8e6-713f20235fe4\":{\"x\":1634,\"y\":80,\"connections\":{\"false\":\"e301438c-0bd0-429c-ab0c-66126501069a\",\"true\":\"f8cba5d7-0906-40c0-bd61-df601a04cf9f\"},\"nodeType\":\"ScriptedDecisionNode\",\"displayName\":\"Create Notify JWT - SMS\"},\"028a75de-c133-4e3f-8569-158ee1094b78\":{\"x\":939,\"y\":172.5,\"connections\":{\"true\":\"c3f22327-1e32-4f18-957f-731aa9c97dd5\",\"false\":\"15993a44-70e7-4799-b35c-a245acb9ccc6\"},\"nodeType\":\"ScriptedDecisionNode\",\"displayName\":\"Require MFA\"},\"0c25a25f-7673-4bff-9d20-b4eecf9b6ca5\":{\"x\":2931,\"y\":197.5,\"connections\":{\"true\":\"de45e2b0-1462-4423-a397-80df1255f4ea\"},\"nodeType\":\"ScriptedDecisionNode\",\"displayName\":\"Update Last Login\"},\"b6c21d0e-4e55-47c0-8a58-e86939c93c14\":{\"x\":1637,\"y\":265,\"connections\":{\"true\":\"c8e1a748-a423-41ff-9971-b4a879ec01d7\",\"false\":\"e301438c-0bd0-429c-ab0c-66126501069a\"},\"nodeType\":\"ScriptedDecisionNode\",\"displayName\":\"Create Notify JWT - Email\"},\"c8e1a748-a423-41ff-9971-b4a879ec01d7\":{\"x\":1922,\"y\":287.66666666666663,\"connections\":{\"outcome\":\"1cf909f8-28a3-45de-9c61-8653f8fe2398\"},\"nodeType\":\"OneTimePasswordGeneratorNode\",\"displayName\":\"HOTP Generator\"},\"1cf909f8-28a3-45de-9c61-8653f8fe2398\":{\"x\":2136,\"y\":265,\"connections\":{\"false\":\"e301438c-0bd0-429c-ab0c-66126501069a\",\"true\":\"82b05c8c-258d-41fd-a38e-5d3326a709bc\"},\"nodeType\":\"ScriptedDecisionNode\",\"displayName\":\"Send MFA email via Notify\"},\"bed7617c-467f-49df-bb86-2e42de21d706\":{\"x\":1402,\"y\":46.015625,\"connections\":{\"email\":\"b6c21d0e-4e55-47c0-8a58-e86939c93c14\",\"text\":\"fdcf16b0-de65-4219-a8e6-713f20235fe4\"},\"nodeType\":\"PageNode\",\"displayName\":\"Choose Email/SMS\"},\"82b05c8c-258d-41fd-a38e-5d3326a709bc\":{\"x\":2457,\"y\":63.015625,\"connections\":{\"true\":\"15993a44-70e7-4799-b35c-a245acb9ccc6\",\"false\":\"cec99933-f999-4718-840b-2327746a9a98\"},\"nodeType\":\"PageNode\",\"displayName\":\"Enter OTP\"},\"6982586f-8c46-4f87-b315-bfba9ea0a704\":{\"x\":2823,\"y\":347.015625,\"connections\":{\"true\":\"82b05c8c-258d-41fd-a38e-5d3326a709bc\"},\"nodeType\":\"ScriptedDecisionNode\",\"displayName\":\"Raise Error\"},\"cec99933-f999-4718-840b-2327746a9a98\":{\"x\":2604,\"y\":314.015625,\"connections\":{\"Retry\":\"6982586f-8c46-4f87-b315-bfba9ea0a704\",\"Reject\":\"e301438c-0bd0-429c-ab0c-66126501069a\"},\"nodeType\":\"RetryLimitDecisionNode\",\"displayName\":\"Retry Limit Decision\"}}}"
		},
		{
			"key": "CHLoginMFA_nodes_IncrementLogin",
			"value": "{\"_id\":\"15993a44-70e7-4799-b35c-a245acb9ccc6\",\"_rev\":\"1681350992\",\"identityAttribute\":\"userName\",\"_type\":{\"_id\":\"IncrementLoginCountNode\",\"name\":\"Increment Login Count\",\"collection\":true},\"_outcomes\":[{\"id\":\"outcome\",\"displayName\":\"Outcome\"}]}"
		},
		{
			"key": "CHLoginMFA_nodes_SendMFAText",
			"value": "{\"_id\":\"5c3d2eda-3ea6-4fdc-8421-e29a5b2aecda\",\"_rev\":\"-1127833609\",\"inputs\":[\"*\"],\"outcomes\":[\"true\",\"false\"],\"outputs\":[\"*\"],\"script\":\"b276c566-622e-11eb-ae93-0242ac130002\",\"_type\":{\"_id\":\"ScriptedDecisionNode\",\"name\":\"Scripted Decision\",\"collection\":true},\"_outcomes\":[{\"id\":\"true\",\"displayName\":\"true\"},{\"id\":\"false\",\"displayName\":\"false\"}]}"
		},
		{
			"key": "CHLoginMFA_nodes_DataStoreDecision",
			"value": "{\"_id\":\"77f75f06-34de-4045-a9f2-73b01bf79a3b\",\"_rev\":\"1050692301\",\"_type\":{\"_id\":\"DataStoreDecisionNode\",\"name\":\"Data Store Decision\",\"collection\":true},\"_outcomes\":[{\"id\":\"true\",\"displayName\":\"True\"},{\"id\":\"false\",\"displayName\":\"False\"}]}"
		},
		{
			"key": "CHLoginMFA_nodes_IdentifyExistingUser",
			"value": "{\"_id\":\"97b35ef6-74bf-4f46-a0d3-dab716e40249\",\"_rev\":\"-673022373\",\"identifier\":\"userName\",\"identityAttribute\":\"userName\",\"_type\":{\"_id\":\"IdentifyExistingUserNode\",\"name\":\"Identify Existing User\",\"collection\":true},\"_outcomes\":[{\"id\":\"true\",\"displayName\":\"True\"},{\"id\":\"false\",\"displayName\":\"False\"}]}"
		},
		{
			"key": "CHLoginMFA_nodes_PageNode",
			"value": "{\"_id\":\"a6eb5385-ac12-4359-8f0f-9a588ca5a334\",\"_rev\":\"479449023\",\"nodes\":[{\"_id\":\"cf8de09d-51a6-444a-8d77-77570d94631e\",\"nodeType\":\"ValidatedUsernameNode\",\"displayName\":\"Platform Username\"},{\"_id\":\"bd201d63-6810-48eb-a77e-387eae4a6ea8\",\"nodeType\":\"ValidatedPasswordNode\",\"displayName\":\"Platform Password\"}],\"pageDescription\":{\"en\":\"New here? <a href=\\\"#/service/Registration\\\">Create an account</a><br><a href=\\\"#/service/ForgottenUsername\\\">Forgot username?</a><a href=\\\"#/service/ResetPassword\\\"> Forgot password?</a>\"},\"pageHeader\":{\"en\":\"Sign In\"},\"stage\":\"LOGIN_MFA_1\",\"_type\":{\"_id\":\"PageNode\",\"name\":\"Page Node\",\"collection\":true},\"_outcomes\":[{\"id\":\"outcome\",\"displayName\":\"Outcome\"}]}"
		},
		{
			"key": "CHLoginMFA_nodes_HasPhoneNumber",
			"value": "{\"_id\":\"c3f22327-1e32-4f18-957f-731aa9c97dd5\",\"_rev\":\"1138193216\",\"outcomes\":[\"true\",\"false\"],\"inputs\":[\"*\"],\"outputs\":[\"*\"],\"script\":\"b480d9f7-5908-45cf-91d1-bc1fe56fe8de\",\"_type\":{\"_id\":\"ScriptedDecisionNode\",\"name\":\"Scripted Decision\",\"collection\":true},\"_outcomes\":[{\"id\":\"true\",\"displayName\":\"true\"},{\"id\":\"false\",\"displayName\":\"false\"}]}"
		},
		{
			"key": "CHLoginMFA_nodes_InnerTreeEvaluator",
			"value": "{\"_id\":\"de45e2b0-1462-4423-a397-80df1255f4ea\",\"_rev\":\"-1265983063\",\"tree\":\"ProgressiveProfile\",\"_type\":{\"_id\":\"InnerTreeEvaluatorNode\",\"name\":\"Inner Tree Evaluator\",\"collection\":true},\"_outcomes\":[{\"id\":\"true\",\"displayName\":\"True\"},{\"id\":\"false\",\"displayName\":\"False\"}]}"
		},
		{
			"key": "CHLoginMFA_nodes_HOTPGenerator",
			"value": "{\"_id\":\"f8cba5d7-0906-40c0-bd61-df601a04cf9f\",\"_rev\":\"-304143982\",\"length\":6,\"_type\":{\"_id\":\"OneTimePasswordGeneratorNode\",\"name\":\"HOTP Generator\",\"collection\":true},\"_outcomes\":[{\"id\":\"outcome\",\"displayName\":\"Outcome\"}]}"
		},
		{
			"key": "CHLoginMFA_nodes_CreateNotifyJWTSMS",
			"value": "{\"_id\":\"fdcf16b0-de65-4219-a8e6-713f20235fe4\",\"_rev\":\"-1426867662\",\"inputs\":[\"*\"],\"outcomes\":[\"true\",\"false\"],\"outputs\":[\"*\"],\"script\":\"df67765e-df3a-4503-9ba5-35c992b39259\",\"_type\":{\"_id\":\"ScriptedDecisionNode\",\"name\":\"Scripted Decision\",\"collection\":true},\"_outcomes\":[{\"id\":\"true\",\"displayName\":\"true\"},{\"id\":\"false\",\"displayName\":\"false\"}]}"
		},
		{
			"key": "CHLoginMFA_nodes_RequireMFA",
			"value": "{\"_id\":\"028a75de-c133-4e3f-8569-158ee1094b78\",\"_rev\":\"1404385869\",\"outcomes\":[\"true\",\"false\"],\"inputs\":[\"*\"],\"outputs\":[\"*\"],\"script\":\"20a3599f-b742-4554-a8b7-27862f248dd5\",\"_type\":{\"_id\":\"ScriptedDecisionNode\",\"name\":\"Scripted Decision\",\"collection\":true},\"_outcomes\":[{\"id\":\"true\",\"displayName\":\"true\"},{\"id\":\"false\",\"displayName\":\"false\"}]}"
		},
		{
			"key": "CHLoginMFA_nodes_UpdateLastLogin",
			"value": "{\"_id\":\"0c25a25f-7673-4bff-9d20-b4eecf9b6ca5\",\"_rev\":\"-299249166\",\"outcomes\":[\"true\"],\"inputs\":[\"*\"],\"outputs\":[\"*\"],\"script\":\"d7da3b35-af63-499b-aa0a-bb03666508db\",\"_type\":{\"_id\":\"ScriptedDecisionNode\",\"name\":\"Scripted Decision\",\"collection\":true},\"_outcomes\":[{\"id\":\"true\",\"displayName\":\"true\"}]}"
		},
		{
			"key": "CHLoginMFA_nodes_CreateNotifyJWTEmail",
			"value": "{\"_id\":\"b6c21d0e-4e55-47c0-8a58-e86939c93c14\",\"_rev\":\"-205890777\",\"outcomes\":[\"true\",\"false\"],\"inputs\":[\"*\"],\"outputs\":[\"*\"],\"script\":\"df67765e-df3a-4503-9ba5-35c992b39259\",\"_type\":{\"_id\":\"ScriptedDecisionNode\",\"name\":\"Scripted Decision\",\"collection\":true},\"_outcomes\":[{\"id\":\"true\",\"displayName\":\"true\"},{\"id\":\"false\",\"displayName\":\"false\"}]}"
		},
		{
			"key": "CHLoginMFA_nodes_HOTPGenerator2",
			"value": "{\"_id\":\"c8e1a748-a423-41ff-9971-b4a879ec01d7\",\"_rev\":\"-357136864\",\"length\":6,\"_type\":{\"_id\":\"OneTimePasswordGeneratorNode\",\"name\":\"HOTP Generator\",\"collection\":true},\"_outcomes\":[{\"id\":\"outcome\",\"displayName\":\"Outcome\"}]}"
		},
		{
			"key": "CHLoginMFA_nodes_SendMFAEmailViaNotify",
			"value": "{\"_id\":\"1cf909f8-28a3-45de-9c61-8653f8fe2398\",\"_rev\":\"-843442325\",\"outcomes\":[\"true\",\"false\"],\"inputs\":[\"*\"],\"outputs\":[\"*\"],\"script\":\"a5778ce7-addf-4fb6-a7db-92929f1314c4\",\"_type\":{\"_id\":\"ScriptedDecisionNode\",\"name\":\"Scripted Decision\",\"collection\":true},\"_outcomes\":[{\"id\":\"true\",\"displayName\":\"true\"},{\"id\":\"false\",\"displayName\":\"false\"}]}"
		},
		{
			"key": "CHLoginMFA_nodes_ChooseEmailSMS",
			"value": "{\"_id\":\"bed7617c-467f-49df-bb86-2e42de21d706\",\"_rev\":\"454274513\",\"nodes\":[{\"_id\":\"e78833e1-01dc-4a67-8c17-61ff03db90f2\",\"nodeType\":\"ChoiceCollectorNode\",\"displayName\":\"Choice Collector\"}],\"pageHeader\":{\"header\":\"How do you want to confirm it's you?\"},\"pageDescription\":{\"desc\":\"How do you want to confirm it's you?\"},\"stage\":\"LOGIN_MFA_2\",\"_type\":{\"_id\":\"PageNode\",\"name\":\"Page Node\",\"collection\":true},\"_outcomes\":[{\"id\":\"email\",\"displayName\":\"email\"},{\"id\":\"text\",\"displayName\":\"text\"}]}"
		},
		{
			"key": "CHLoginMFA_nodes_EnterOTP",
			"value": "{\"_id\":\"82b05c8c-258d-41fd-a38e-5d3326a709bc\",\"_rev\":\"48717662\",\"nodes\":[{\"_id\":\"de3eacd3-368d-4ddf-b135-bf6b7a7ac2bf\",\"nodeType\":\"ScriptedDecisionNode\",\"displayName\":\"Scripted Decision\"},{\"_id\":\"3bfabc18-f160-426f-8806-8b176585c7bd\",\"nodeType\":\"OneTimePasswordCollectorDecisionNode\",\"displayName\":\"OTP Collector Decision\"}],\"pageHeader\":{\"header\":\"Please enter your code\"},\"pageDescription\":{\"desc\":\"Please enter the code you received\"},\"stage\":\"LOGIN_MFA_3\",\"_type\":{\"_id\":\"PageNode\",\"name\":\"Page Node\",\"collection\":true},\"_outcomes\":[{\"id\":\"true\",\"displayName\":\"True\"},{\"id\":\"false\",\"displayName\":\"False\"}]}"
		},
		{
			"key": "CHLoginMFA_nodes_RaiseError",
			"value": "{\"_id\":\"6982586f-8c46-4f87-b315-bfba9ea0a704\",\"_rev\":\"-574564556\",\"inputs\":[\"*\"],\"outcomes\":[\"true\"],\"outputs\":[\"*\"],\"script\":\"bf6c0ac8-8e13-4f11-8d99-d01b23e02a5c\",\"_type\":{\"_id\":\"ScriptedDecisionNode\",\"name\":\"Scripted Decision\",\"collection\":true},\"_outcomes\":[{\"id\":\"true\",\"displayName\":\"true\"}]}"
		},
		{
			"key": "CHLoginMFA_nodes_RetryLimitDecision",
			"value": "{\"_id\":\"cec99933-f999-4718-840b-2327746a9a98\",\"_rev\":\"823524487\",\"retryLimit\":3,\"_type\":{\"_id\":\"RetryLimitDecisionNode\",\"name\":\"Retry Limit Decision\",\"collection\":true},\"_outcomes\":[{\"id\":\"Retry\",\"displayName\":\"Retry\"},{\"id\":\"Reject\",\"displayName\":\"Reject\"}]}"
		},
		{
			"key": "AuthTree_CHResetPassword",
			"value": "{\"_id\":\"CHResetPassword\",\"_rev\":\"-627430655\",\"entryNodeId\":\"29524a97-032e-40b1-8cd0-ef3938309671\",\"description\":\"CH Reset Password Tree\",\"identityResource\":\"managed/alpha_user\",\"uiConfig\":{},\"nodes\":{\"067ea40b-8eb7-48b9-8de3-c9bf73103e2d\":{\"x\":1540,\"y\":486,\"connections\":{\"FAILURE\":\"e301438c-0bd0-429c-ab0c-66126501069a\",\"PATCHED\":\"129a2a4d-ea48-4ea4-a02f-eff667ffcc0e\"},\"nodeType\":\"PatchObjectNode\",\"displayName\":\"Update Password\"},\"129a2a4d-ea48-4ea4-a02f-eff667ffcc0e\":{\"x\":1703,\"y\":369,\"connections\":{\"false\":\"e301438c-0bd0-429c-ab0c-66126501069a\",\"true\":\"70e691a5-1e33-4ac3-a356-e7b6d60d92e0\"},\"nodeType\":\"ScriptedDecisionNode\",\"displayName\":\"Password Updated\"},\"29524a97-032e-40b1-8cd0-ef3938309671\":{\"x\":148,\"y\":390,\"connections\":{\"resume\":\"4b011f55-d230-407d-8e91-8c5d0f573133\",\"start\":\"4a0a458b-f374-4a7e-a5ec-5352aa21f834\"},\"nodeType\":\"ScriptedDecisionNode\",\"displayName\":\"Start or Resume\"},\"4a0a458b-f374-4a7e-a5ec-5352aa21f834\":{\"x\":213,\"y\":27,\"connections\":{\"outcome\":\"6de1f9ea-0421-4065-8b70-bed9152c9a05\"},\"nodeType\":\"PageNode\",\"displayName\":\"Enter Email\"},\"4b011f55-d230-407d-8e91-8c5d0f573133\":{\"x\":389,\"y\":622,\"connections\":{\"false\":\"56c8d746-4a57-467b-bc70-8cb944e98d8e\",\"true\":\"e93a0cb6-2c4c-4210-8aaa-458903e9231a\"},\"nodeType\":\"IdentifyExistingUserNode\",\"displayName\":\"Identify Existing User 2\"},\"56c8d746-4a57-467b-bc70-8cb944e98d8e\":{\"x\":805,\"y\":741,\"connections\":{\"false\":\"e301438c-0bd0-429c-ab0c-66126501069a\"},\"nodeType\":\"PageNode\",\"displayName\":\"Cannot Find User\"},\"5fc9e55b-6a0a-454d-89ce-b7c1b4d6a29e\":{\"x\":453,\"y\":286,\"connections\":{\"email\":\"8e86cb2b-52ab-4341-a89b-1379976c790a\",\"text\":\"79c759fc-b836-42b4-afd4-ad564d1bbe60\"},\"nodeType\":\"PageNode\",\"displayName\":\"Choose Email/SMS\"},\"6de1f9ea-0421-4065-8b70-bed9152c9a05\":{\"x\":541,\"y\":29,\"connections\":{\"false\":\"b39ecc00-d42f-4cff-8f2e-3256bb8b3669\",\"true\":\"e5b2d3d4-0995-48ad-bf0c-ae2b8560387e\"},\"nodeType\":\"IdentifyExistingUserNode\",\"displayName\":\"Identify Existing User 1\"},\"70a15b0f-cb2a-48a9-81f0-6ba902a9e24a\":{\"x\":996,\"y\":495,\"connections\":{\"false\":\"e301438c-0bd0-429c-ab0c-66126501069a\",\"true\":\"843b8111-3af6-49fa-bf8d-a650e04dec2e\"},\"nodeType\":\"ScriptedDecisionNode\",\"displayName\":\"Send MFA text\"},\"79c759fc-b836-42b4-afd4-ad564d1bbe60\":{\"x\":690,\"y\":336,\"connections\":{\"false\":\"e301438c-0bd0-429c-ab0c-66126501069a\",\"true\":\"cfb95e8e-a908-40f3-a756-f5959759e22e\"},\"nodeType\":\"ScriptedDecisionNode\",\"displayName\":\"Create Notify JWT - SMS\"},\"843b8111-3af6-49fa-bf8d-a650e04dec2e\":{\"x\":1143,\"y\":625,\"connections\":{\"true\":\"e93a0cb6-2c4c-4210-8aaa-458903e9231a\",\"false\":\"c98726b2-cee9-47ba-9677-40ae29223c65\"},\"nodeType\":\"PageNode\",\"displayName\":\"Enter OTP\"},\"8e86cb2b-52ab-4341-a89b-1379976c790a\":{\"x\":732,\"y\":171,\"connections\":{\"false\":\"e301438c-0bd0-429c-ab0c-66126501069a\",\"true\":\"bb5fc733-547b-41da-9b51-f709cac78764\"},\"nodeType\":\"ScriptedDecisionNode\",\"displayName\":\"Create Notify JWT - Email\"},\"b39ecc00-d42f-4cff-8f2e-3256bb8b3669\":{\"x\":1425,\"y\":20,\"connections\":{\"true\":\"e301438c-0bd0-429c-ab0c-66126501069a\"},\"nodeType\":\"ScriptedDecisionNode\",\"displayName\":\"Email sent ok \"},\"bb5fc733-547b-41da-9b51-f709cac78764\":{\"x\":1028,\"y\":70,\"connections\":{\"false\":\"e301438c-0bd0-429c-ab0c-66126501069a\",\"true\":\"b39ecc00-d42f-4cff-8f2e-3256bb8b3669\"},\"nodeType\":\"ScriptedDecisionNode\",\"displayName\":\"Send Pwd Reset Email\"},\"cfb95e8e-a908-40f3-a756-f5959759e22e\":{\"x\":820,\"y\":468,\"connections\":{\"outcome\":\"70a15b0f-cb2a-48a9-81f0-6ba902a9e24a\"},\"nodeType\":\"OneTimePasswordGeneratorNode\",\"displayName\":\"HOTP Generator\"},\"e5b2d3d4-0995-48ad-bf0c-ae2b8560387e\":{\"x\":427,\"y\":151,\"connections\":{\"false\":\"8e86cb2b-52ab-4341-a89b-1379976c790a\",\"true\":\"5fc9e55b-6a0a-454d-89ce-b7c1b4d6a29e\"},\"nodeType\":\"ScriptedDecisionNode\",\"displayName\":\"Has Phone Number\"},\"e93a0cb6-2c4c-4210-8aaa-458903e9231a\":{\"x\":1433,\"y\":604,\"connections\":{\"outcome\":\"067ea40b-8eb7-48b9-8de3-c9bf73103e2d\"},\"nodeType\":\"PageNode\",\"displayName\":\"Enter Password\"},\"ff7ee39c-e731-438a-8bf0-8492d9ee61bd\":{\"x\":1406,\"y\":931,\"connections\":{\"true\":\"843b8111-3af6-49fa-bf8d-a650e04dec2e\"},\"nodeType\":\"ScriptedDecisionNode\",\"displayName\":\"Raise Error\"},\"c98726b2-cee9-47ba-9677-40ae29223c65\":{\"x\":1416,\"y\":744.015625,\"connections\":{\"Retry\":\"ff7ee39c-e731-438a-8bf0-8492d9ee61bd\",\"Reject\":\"e301438c-0bd0-429c-ab0c-66126501069a\"},\"nodeType\":\"RetryLimitDecisionNode\",\"displayName\":\"Retry Limit Decision\"}},\"staticNodes\":{\"startNode\":{\"x\":25,\"y\":25},\"70e691a5-1e33-4ac3-a356-e7b6d60d92e0\":{\"x\":1979,\"y\":394},\"e301438c-0bd0-429c-ab0c-66126501069a\":{\"x\":1789,\"y\":116}}}"
		},
		{
			"key": "CHResetPassword_nodes_UpdatePassword",
			"value": "{\"_id\":\"067ea40b-8eb7-48b9-8de3-c9bf73103e2d\",\"_rev\":\"514922700\",\"identityAttribute\":\"mail\",\"identityResource\":\"managed/alpha_user\",\"ignoredFields\":[],\"patchAsObject\":false,\"_type\":{\"_id\":\"PatchObjectNode\",\"name\":\"Patch Object\",\"collection\":true},\"_outcomes\":[{\"id\":\"PATCHED\",\"displayName\":\"Patched\"},{\"id\":\"FAILURE\",\"displayName\":\"Failed\"}]}"
		},
		{
			"key": "CHResetPassword_nodes_PasswordUpdate",
			"value": "{\"_id\":\"129a2a4d-ea48-4ea4-a02f-eff667ffcc0e\",\"_rev\":\"1828639581\",\"inputs\":[\"*\"],\"outcomes\":[\"true\",\"false\"],\"outputs\":[\"*\"],\"script\":\"ae90c22f-2613-49a6-9091-2238ec13eacb\",\"_type\":{\"_id\":\"ScriptedDecisionNode\",\"name\":\"Scripted Decision\",\"collection\":true},\"_outcomes\":[{\"id\":\"true\",\"displayName\":\"true\"},{\"id\":\"false\",\"displayName\":\"false\"}]}"
		},
		{
			"key": "CHResetPassword_nodes_StartOrResume",
			"value": "{\"_id\":\"29524a97-032e-40b1-8cd0-ef3938309671\",\"_rev\":\"-1660069780\",\"inputs\":[\"*\"],\"outcomes\":[\"resume\",\"start\"],\"outputs\":[\"*\"],\"script\":\"7fc79258-1c54-4df3-baa4-b51850ef3474\",\"_type\":{\"_id\":\"ScriptedDecisionNode\",\"name\":\"Scripted Decision\",\"collection\":true},\"_outcomes\":[{\"id\":\"resume\",\"displayName\":\"resume\"},{\"id\":\"start\",\"displayName\":\"start\"}]}"
		},
		{
			"key": "CHResetPassword_nodes_EnterEmail",
			"value": "{\"_id\":\"4a0a458b-f374-4a7e-a5ec-5352aa21f834\",\"_rev\":\"-1086835844\",\"pageHeader\":{\"en\":\"Reset Password\"},\"pageDescription\":{\"en\":\"Enter your email address or <a href=\\\"#/service/Login\\\">Sign in</a>\"},\"nodes\":[{\"_id\":\"fa9ca089-6a40-4f8a-87bd-4fbc3b133f2b\",\"nodeType\":\"AttributeCollectorNode\",\"displayName\":\"Attribute Collector\"}],\"stage\":\"RESET_PASSWORD_1\",\"_type\":{\"_id\":\"PageNode\",\"name\":\"Page Node\",\"collection\":true},\"_outcomes\":[{\"id\":\"outcome\",\"displayName\":\"Outcome\"}]}"
		},
		{
			"key": "CHResetPassword_nodes_IdentifyExistingUser2",
			"value": "{\"_id\":\"4b011f55-d230-407d-8e91-8c5d0f573133\",\"_rev\":\"16442696\",\"identifier\":\"userName\",\"identityAttribute\":\"mail\",\"_type\":{\"_id\":\"IdentifyExistingUserNode\",\"name\":\"Identify Existing User\",\"collection\":true},\"_outcomes\":[{\"id\":\"true\",\"displayName\":\"True\"},{\"id\":\"false\",\"displayName\":\"False\"}]}"
		},
		{
			"key": "CHResetPassword_nodes_CannotFindUser",
			"value": "{\"_id\":\"56c8d746-4a57-467b-bc70-8cb944e98d8e\",\"_rev\":\"-356093073\",\"nodes\":[{\"_id\":\"36437c17-0c4f-4c3e-9fd1-05ec0f0bab6a\",\"nodeType\":\"ScriptedDecisionNode\",\"displayName\":\"Cannot Find User\"}],\"pageDescription\":{\"desc\":\"Cannot Find User\"},\"pageHeader\":{\"header\":\"Cannot Find User\"},\"stage\":\"PASSWORD_RESET_ERROR\",\"_type\":{\"_id\":\"PageNode\",\"name\":\"Page Node\",\"collection\":true},\"_outcomes\":[{\"id\":\"false\",\"displayName\":\"false\"}]}"
		},
		{
			"key": "CHResetPassword_nodes_ChoiceCollector",
			"value": "{\"_id\":\"5fc9e55b-6a0a-454d-89ce-b7c1b4d6a29e\",\"_rev\":\"1136067854\",\"nodes\":[{\"_id\":\"79b4e46e-034a-42b0-8f86-8435451f633e\",\"nodeType\":\"ChoiceCollectorNode\",\"displayName\":\"Choice Collector\"}],\"pageDescription\":{\"desc\":\"How do you want to confirm it's you?\"},\"pageHeader\":{\"header\":\"How do you want to confirm it's you?\"},\"stage\":\"RESET_PASSWORD_2\",\"_type\":{\"_id\":\"PageNode\",\"name\":\"Page Node\",\"collection\":true},\"_outcomes\":[{\"id\":\"email\",\"displayName\":\"email\"},{\"id\":\"text\",\"displayName\":\"text\"}]}"
		},
		{
			"key": "CHResetPassword_nodes_IdentifyExistingUser1",
			"value": "{\"_id\":\"6de1f9ea-0421-4065-8b70-bed9152c9a05\",\"_rev\":\"-1261373933\",\"identifier\":\"userName\",\"identityAttribute\":\"mail\",\"_type\":{\"_id\":\"IdentifyExistingUserNode\",\"name\":\"Identify Existing User\",\"collection\":true},\"_outcomes\":[{\"id\":\"true\",\"displayName\":\"True\"},{\"id\":\"false\",\"displayName\":\"False\"}]}"
		},
		{
			"key": "CHResetPassword_nodes_SendMFAText",
			"value": "{\"_id\":\"70a15b0f-cb2a-48a9-81f0-6ba902a9e24a\",\"_rev\":\"-1084870148\",\"inputs\":[\"*\"],\"outcomes\":[\"true\",\"false\"],\"outputs\":[\"*\"],\"script\":\"b276c566-622e-11eb-ae93-0242ac130002\",\"_type\":{\"_id\":\"ScriptedDecisionNode\",\"name\":\"Scripted Decision\",\"collection\":true},\"_outcomes\":[{\"id\":\"true\",\"displayName\":\"true\"},{\"id\":\"false\",\"displayName\":\"false\"}]}"
		},
		{
			"key": "CHResetPassword_nodes_CreateNotifyJWTSMS",
			"value": "{\"_id\":\"79c759fc-b836-42b4-afd4-ad564d1bbe60\",\"_rev\":\"-1925434097\",\"inputs\":[\"*\"],\"outcomes\":[\"true\",\"false\"],\"outputs\":[\"*\"],\"script\":\"df67765e-df3a-4503-9ba5-35c992b39259\",\"_type\":{\"_id\":\"ScriptedDecisionNode\",\"name\":\"Scripted Decision\",\"collection\":true},\"_outcomes\":[{\"id\":\"true\",\"displayName\":\"true\"},{\"id\":\"false\",\"displayName\":\"false\"}]}"
		},
		{
			"key": "CHResetPassword_nodes_EnterOTP",
			"value": "{\"_id\":\"843b8111-3af6-49fa-bf8d-a650e04dec2e\",\"_rev\":\"-643659051\",\"nodes\":[{\"_id\":\"5d337edd-8b0e-4c2d-a6cc-ab4e30f1ecbd\",\"nodeType\":\"ScriptedDecisionNode\",\"displayName\":\"Scripted Decision\"},{\"_id\":\"229f3a48-ddba-4528-8c72-dd7c2e7d53cd\",\"nodeType\":\"OneTimePasswordCollectorDecisionNode\",\"displayName\":\"OTP Collector Decision\"}],\"pageDescription\":{\"desc\":\"Please enter the code you received via SMS\"},\"pageHeader\":{\"header\":\"Please enter your code\"},\"stage\":\"RESET_PASSWORD_3\",\"_type\":{\"_id\":\"PageNode\",\"name\":\"Page Node\",\"collection\":true},\"_outcomes\":[{\"id\":\"true\",\"displayName\":\"True\"},{\"id\":\"false\",\"displayName\":\"False\"}]}"
		},
		{
			"key": "CHResetPassword_nodes_CreateNotifyJWTEmail",
			"value": "{\"_id\":\"8e86cb2b-52ab-4341-a89b-1379976c790a\",\"_rev\":\"-691987186\",\"inputs\":[\"*\"],\"outcomes\":[\"true\",\"false\"],\"outputs\":[\"*\"],\"script\":\"df67765e-df3a-4503-9ba5-35c992b39259\",\"_type\":{\"_id\":\"ScriptedDecisionNode\",\"name\":\"Scripted Decision\",\"collection\":true},\"_outcomes\":[{\"id\":\"true\",\"displayName\":\"true\"},{\"id\":\"false\",\"displayName\":\"false\"}]}"
		},
		{
			"key": "CHResetPassword_nodes_EmailSentOk",
			"value": "{\"_id\":\"b39ecc00-d42f-4cff-8f2e-3256bb8b3669\",\"_rev\":\"-971919370\",\"inputs\":[\"*\"],\"outcomes\":[\"true\"],\"outputs\":[\"*\"],\"script\":\"a39f3f71-1782-46dc-97cf-7cc417d4ca4a\",\"_type\":{\"_id\":\"ScriptedDecisionNode\",\"name\":\"Scripted Decision\",\"collection\":true},\"_outcomes\":[{\"id\":\"true\",\"displayName\":\"true\"}]}"
		},
		{
			"key": "CHResetPassword_nodes_SendPwdResetEmail",
			"value": "{\"_id\":\"bb5fc733-547b-41da-9b51-f709cac78764\",\"_rev\":\"1853681095\",\"inputs\":[\"*\"],\"outcomes\":[\"true\",\"false\"],\"outputs\":[\"*\"],\"script\":\"c056951c-622e-11eb-ae93-0242ac130002\",\"_type\":{\"_id\":\"ScriptedDecisionNode\",\"name\":\"Scripted Decision\",\"collection\":true},\"_outcomes\":[{\"id\":\"true\",\"displayName\":\"true\"},{\"id\":\"false\",\"displayName\":\"false\"}]}"
		},
		{
			"key": "CHResetPassword_nodes_HOTPGenerator",
			"value": "{\"_id\":\"cfb95e8e-a908-40f3-a756-f5959759e22e\",\"_rev\":\"-1914148849\",\"length\":6,\"_type\":{\"_id\":\"OneTimePasswordGeneratorNode\",\"name\":\"HOTP Generator\",\"collection\":true},\"_outcomes\":[{\"id\":\"outcome\",\"displayName\":\"Outcome\"}]}"
		},
		{
			"key": "CHResetPassword_nodes_HasPhoneNumber",
			"value": "{\"_id\":\"e5b2d3d4-0995-48ad-bf0c-ae2b8560387e\",\"_rev\":\"1699549955\",\"inputs\":[\"*\"],\"outcomes\":[\"true\",\"false\"],\"outputs\":[\"*\"],\"script\":\"b480d9f7-5908-45cf-91d1-bc1fe56fe8de\",\"_type\":{\"_id\":\"ScriptedDecisionNode\",\"name\":\"Scripted Decision\",\"collection\":true},\"_outcomes\":[{\"id\":\"true\",\"displayName\":\"true\"},{\"id\":\"false\",\"displayName\":\"false\"}]}"
		},
		{
			"key": "CHResetPassword_nodes_EnterPassword",
			"value": "{\"_id\":\"e93a0cb6-2c4c-4210-8aaa-458903e9231a\",\"_rev\":\"1883513002\",\"nodes\":[{\"_id\":\"ed9bf361-86fa-4c9e-b62b-33de8c720b5c\",\"nodeType\":\"ValidatedPasswordNode\",\"displayName\":\"Platform Password\"}],\"pageDescription\":{\"desc\":\"Please enter your new password\"},\"pageHeader\":{\"header\":\"Please enter your new password\"},\"stage\":\"RESET_PASSWORD_4\",\"_type\":{\"_id\":\"PageNode\",\"name\":\"Page Node\",\"collection\":true},\"_outcomes\":[{\"id\":\"outcome\",\"displayName\":\"Outcome\"}]}"
		},
		{
			"key": "CHResetPassword_nodes_RaiseError",
			"value": "{\"_id\":\"ff7ee39c-e731-438a-8bf0-8492d9ee61bd\",\"_rev\":\"-635832110\",\"inputs\":[\"*\"],\"outcomes\":[\"true\"],\"outputs\":[\"*\"],\"script\":\"bf6c0ac8-8e13-4f11-8d99-d01b23e02a5c\",\"_type\":{\"_id\":\"ScriptedDecisionNode\",\"name\":\"Scripted Decision\",\"collection\":true},\"_outcomes\":[{\"id\":\"true\",\"displayName\":\"true\"}]}"
		},
		{
			"key": "CHResetPassword_nodes_RetryLimitDecision",
			"value": "{\"_id\":\"c98726b2-cee9-47ba-9677-40ae29223c65\",\"_rev\":\"1154701167\",\"retryLimit\":3,\"_type\":{\"_id\":\"RetryLimitDecisionNode\",\"name\":\"Retry Limit Decision\",\"collection\":true},\"_outcomes\":[{\"id\":\"Retry\",\"displayName\":\"Retry\"},{\"id\":\"Reject\",\"displayName\":\"Reject\"}]}"
		}
	]
}