{
	"info": {
		"_postman_id": "ef69e436-e1c9-4279-8122-d3c18451045a",
		"name": "FR config Test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Managed Objects",
			"item": [
				{
					"name": "Access Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"const JSONResponse = JSON.parse(responseBody);",
									"",
									"pm.environment.set(\"access_token\",JSONResponse.access_token);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": false
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "client_id",
									"value": "{{ClientId}}",
									"description": "The ID of the Public OAuth Client.",
									"type": "text"
								},
								{
									"key": "response_type",
									"value": "token",
									"description": "Response types the client will support and use.",
									"type": "text",
									"disabled": true
								},
								{
									"key": "scope",
									"value": "fr:idm:*",
									"description": "Strings that are presented to the user for approval and included in tokens so that the protected resource may make decisions about what to give access to.",
									"type": "text"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "text"
								},
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{platformUrl}}/am/oauth2/{{realm}}/access_token",
							"host": [
								"{{platformUrl}}"
							],
							"path": [
								"am",
								"oauth2",
								"{{realm}}",
								"access_token"
							],
							"query": [
								{
									"key": "auth_chain",
									"value": "PasswordGrant",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Managed Object  - Users & Company",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"const jsonData = JSON.parse(responseBody);\r",
									"\r",
									"const managedObjects = jsonData.objects;\r",
									"\r",
									"\r",
									"pm.test(\"FIDC contains managed object alpha_assignment\", function () {\r",
									"   pm.expect(managedObjects[0].name).to.be.eql('alpha_assignment');\r",
									"});\r",
									"\r",
									"pm.test(\"FIDC contains managed object alpha_organization\", function () {\r",
									"   pm.expect(managedObjects[1].name).to.be.eql('alpha_organization');\r",
									"});\r",
									"\r",
									"pm.test(\"FIDC contains managed object alpha_role\", function () {\r",
									"   pm.expect(managedObjects[2].name).to.be.eql('alpha_role');\r",
									"});\r",
									"\r",
									"pm.test(\"FIDC contains managed object alpha_user\", function () {\r",
									"   pm.expect(managedObjects[3].name).to.be.eql('alpha_user');\r",
									"});\r",
									"\r",
									"pm.test(\"FIDC contains managed object Company\", function () {\r",
									"   pm.expect(managedObjects[8].name).to.be.eql('Company');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {
							"content-type": true,
							"content-length": true,
							"connection": true,
							"accept-encoding": true,
							"accept": true,
							"user-agent": true
						}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{platformUrl}}/openidm/config/managed",
							"host": [
								"{{platformUrl}}"
							],
							"path": [
								"openidm",
								"config",
								"managed"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "noauth"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Get Session Token",
			"item": [
				{
					"name": "Authentication to Top-Level Realm",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const JSONResponse = JSON.parse(responseBody);",
									"",
									"// Did request have a callback?",
									"if(JSONResponse.authId && JSONResponse.authId != \"\")",
									"{",
									"  // Set `authId` variable",
									"  pm.environment.set(\"authId\", JSONResponse.authId);",
									"}",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "The media type of the resource.",
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"description": "This collection documents version 2.1 of the authentication resource.",
								"key": "Accept-API-Version",
								"value": "resource=2.1",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{platformUrl}}/am/json/authenticate",
							"host": [
								"{{platformUrl}}"
							],
							"path": [
								"am",
								"json",
								"authenticate"
							]
						},
						"description": "To get started, request the callbacks from the top-level realm."
					},
					"response": []
				},
				{
					"name": "Authenticate as ID Cloud Admin and Get Session Token, and Cookie Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const JSONResponse = JSON.parse(responseBody);",
									"",
									"const authId= JSONResponse.authId;",
									"  // Remove `authId` variable",
									"  pm.environment.set(\"authId\",authId);",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "Specifies that the `/json/authenticate` endpoint uses JSON format for requests.",
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"description": "Specifies the version of the `/json/authenticate` endpoint to use.",
								"key": "Accept-API-Version",
								"value": "resource=2.1, protocol=1.0",
								"disabled": true
							},
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"authId\": \"{{authId}}\",\n    \"callbacks\": [\n        {\n            \"type\": \"NameCallback\",\n            \"output\": [\n                {\n                    \"name\": \"prompt\",\n                    \"value\": \"User Name\"\n                }\n            ],\n            \"input\": [\n                {\n                    \"name\": \"IDToken1\",\n                    \"value\": \"{{IDCloudAdminUsername}}\"\n                }\n            ],\n            \"_id\": 0\n        },\n        {\n            \"type\": \"PasswordCallback\",\n            \"output\": [\n                {\n                    \"name\": \"prompt\",\n                    \"value\": \"Password\"\n                }\n            ],\n            \"input\": [\n                {\n                    \"name\": \"IDToken2\",\n                    \"value\": \"{{IDCloudAdminPassword}}\"\n                }\n            ],\n            \"_id\": 1\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{platformUrl}}/am/json/authenticate",
							"host": [
								"{{platformUrl}}"
							],
							"path": [
								"am",
								"json",
								"authenticate"
							]
						},
						"description": "Return the callback, specifying the credentials of an administrative user.\nThis request obtains the name used in headers to specify the session token. To manually provide the session token name, in the ID Cloud console, navigate to **Tenant Settings**, and copy the *Cookie Name* value. Use this value in the `cookieName` variable in your Postman Collection."
					},
					"response": []
				},
				{
					"name": "Skip MFA Set up",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const JSONResponse = JSON.parse(responseBody);",
									"",
									"// Did request return SSO Token?",
									"if(JSONResponse.tokenId && JSONResponse.tokenId != \"\")",
									"{",
									"  // Set `session token` variable",
									"  pm.environment.set(\"session_token\", JSONResponse.tokenId);",
									"",
									"  // Remove `authId` variable",
									"  pm.environment.unset(\"authId\");",
									"",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "Specifies that the `/json/authenticate` endpoint uses JSON format for requests.",
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"description": "Specifies the version of the `/json/authenticate` endpoint to use.",
								"key": "Accept-API-Version",
								"value": "resource=2.1, protocol=1.0",
								"disabled": true
							},
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"authId\": \"{{authId}}\",\n  \"callbacks\": [\n    {\n      \"type\": \"TextOutputCallback\",\n      \"output\": [\n        {\n          \"name\": \"message\",\n          \"value\": \"message\"\n        },\n        {\n          \"name\": \"messageType\",\n          \"value\": \"0\"\n        }\n      ]\n    },\n    {\n      \"type\": \"ConfirmationCallback\",\n      \"output\": [\n        {\n          \"name\": \"prompt\",\n          \"value\": \"\"\n        },\n        {\n          \"name\": \"messageType\",\n          \"value\": 0\n        },\n        {\n          \"name\": \"options\",\n          \"value\": [\n            \"Set up\"\n          ]\n        },\n        {\n          \"name\": \"optionType\",\n          \"value\": -1\n        },\n        {\n          \"name\": \"defaultOption\",\n          \"value\": 0\n        }\n      ],\n      \"input\": [\n        {\n          \"name\": \"IDToken2\",\n          \"value\": 0\n        }\n      ]\n    },\n    {\n      \"type\": \"HiddenValueCallback\",\n      \"output\": [\n        {\n          \"name\": \"value\",\n          \"value\": \"false\"\n        },\n        {\n          \"name\": \"id\",\n          \"value\": \"skip-input\"\n        }\n      ],\n      \"input\": [\n        {\n          \"name\": \"IDToken3\",\n          \"value\": \"Skip\"\n        }\n      ]\n    },\n    {\n      \"type\": \"TextOutputCallback\",\n      \"output\": [\n        {\n          \"name\": \"message\",\n          \"value\": \"var skipContainer = document.createElement(\\\"div\\\");skipContainer.style = \\\"width: 100%\\\";skipContainer.innerHTML = \\\"<button id='skip-link' class='btn btn-block btn-link' type='submit'>Skip for now</button>\\\";document.getElementById(\\\"skip-input\\\").parentNode.append(skipContainer);document.getElementsByClassName(\\\"callback-component\\\").forEach(  function (e) {    var message = e.firstElementChild;    if (message.firstChild && message.firstChild.nodeName == \\\"#text\\\" && message.firstChild.nodeValue.trim() == \\\"message\\\") {      message.align = \\\"center\\\";      message.innerHTML = \\\"<h2 class='h2'>Set up 2-step verification</h2><div style='margin-bottom:1em'>Protect your account by adding a second step after entering your password to verify it's you signing in.</div>\\\";    }  })\"\n        },\n        {\n          \"name\": \"messageType\",\n          \"value\": \"4\"\n        }\n      ]\n    },\n    {\n      \"type\": \"TextOutputCallback\",\n      \"output\": [\n        {\n          \"name\": \"message\",\n          \"value\": \"document.getElementById(\\\"skip-link\\\").onclick = function() {  document.getElementById(\\\"skip-input\\\").value = \\\"Skip\\\";  document.getElementById(\\\"loginButton_0\\\").click();  return false;}\"\n        },\n        {\n          \"name\": \"messageType\",\n          \"value\": \"4\"\n        }\n      ]\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{platformUrl}}/am/json/authenticate",
							"host": [
								"{{platformUrl}}"
							],
							"path": [
								"am",
								"json",
								"authenticate"
							]
						},
						"description": "Return the callback, specifying the credentials of an administrative user.\nThis request obtains the name used in headers to specify the session token. To manually provide the session token name, in the ID Cloud console, navigate to **Tenant Settings**, and copy the *Cookie Name* value. Use this value in the `cookieName` variable in your Postman Collection."
					},
					"response": []
				}
			]
		},
		{
			"name": "Auth Tree",
			"item": [
				{
					"name": "Trees",
					"item": [
						{
							"name": "Registration",
							"item": [
								{
									"name": "CHVerifyReg",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const AuthTreeNodes = (JSON.parse(responseBody)).nodes;\r",
													"\r",
													"pm.test(\"CHVerifyReg contains correct number of nodes \", function () {\r",
													"    var length = Object.keys(AuthTreeNodes).length\r",
													"    pm.expect(length, 'CHVerifyReg contains incorrect number of nodes').to.be.eql(6);\r",
													"});\r",
													"\r",
													"pm.test(\"CHVerifyReg -> Node  -> Create User exists\", function () {\r",
													"    pm.expect(AuthTreeNodes, 'CHverifyReg does not contain Create user node => 02d95fe8-1c39-4144-b411-13fcd4226c6a')\r",
													"        .to.contain.key('02d95fe8-1c39-4144-b411-13fcd4226c6a');\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"CHVerifyReg -> Node  -> Identify Existing User exists\", function () {\r",
													"    pm.expect(AuthTreeNodes, 'CHverifyReg does not contain Identify Existing User node => 63a23daf-33ad-4848-8e2a-c3f3d749e646')\r",
													"        .to.contain.key('63a23daf-33ad-4848-8e2a-c3f3d749e646');\r",
													"});\r",
													"\r",
													"pm.test(\"CHVerifyReg -> Node  -> Verify Reg Token exists\", function () {\r",
													"    pm.expect(AuthTreeNodes, 'CHverifyReg does not contain Verify Reg Token node => 7ebb5593-77f8-4125-a11a-5717499da135')\r",
													"        .to.contain.key('7ebb5593-77f8-4125-a11a-5717499da135');\r",
													"});\r",
													"\r",
													"pm.test(\"CHVerifyReg -> Node  -> Callback Existing User exists\", function () {\r",
													"    pm.expect(AuthTreeNodes, 'CHverifyReg does not contain Callback Existing User node => 9d7a87df-d656-4539-b1e4-7199950aa0e8')\r",
													"        .to.contain.key('9d7a87df-d656-4539-b1e4-7199950aa0e8');\r",
													"});\r",
													"\r",
													"pm.test(\"CHVerifyReg -> Node  -> Identify Existing User exists\", function () {\r",
													"    pm.expect(AuthTreeNodes, 'CHverifyReg does not contain IdentifyExistingUserNode node => bb74cb44-5e3f-4634-9e5f-f18e121ca93f')\r",
													"        .to.contain.key('bb74cb44-5e3f-4634-9e5f-f18e121ca93f');\r",
													"});\r",
													"\r",
													"pm.test(\"CHVerifyReg -> Node  -> Password Collector exists\", function () {\r",
													"    pm.expect(AuthTreeNodes, 'CHverifyReg does not containPassword Collector node => d3d9440a-6562-479a-be32-7d863a159155')\r",
													"        .to.contain.key('d3d9440a-6562-479a-be32-7d863a159155');\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "cookie",
												"value": "{{cookie_Name}} = {{session_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{platformUrl}}/am/json/{{realm}}/realm-config/authentication/authenticationtrees/trees/CHVerifyReg",
											"host": [
												"{{platformUrl}}"
											],
											"path": [
												"am",
												"json",
												"{{realm}}",
												"realm-config",
												"authentication",
												"authenticationtrees",
												"trees",
												"CHVerifyReg"
											]
										}
									},
									"response": []
								},
								{
									"name": "CHRegistration",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const AuthTreeNodes = (JSON.parse(responseBody)).nodes;\r",
													"\r",
													"pm.test(\"CHVerifyReg contains correct number of nodes \", function () {\r",
													"    var length = Object.keys(AuthTreeNodes).length\r",
													"    console.log(length);\r",
													"    pm.expect(length, 'CHVerifyReg contains incorrect number of nodes').to.be.eql(15);\r",
													"});\r",
													"\r",
													"pm.test(\"CHVerifyReg -> Node  -> Retry Limit Decision exists\", function () {\r",
													"    pm.expect(AuthTreeNodes, 'CHverifyReg does not contain  Retry Limit Decision => 14a23247-eeb0-436c-99dd-1b046fc1204f')\r",
													"        .to.contain.key('14a23247-eeb0-436c-99dd-1b046fc1204f');\r",
													"});\r",
													"\r",
													"pm.test(\"CHVerifyReg -> Node  -> Send Pwd Reset email exists\", function () {\r",
													"    pm.expect(AuthTreeNodes, 'CHverifyReg does not containSend Pwd Reset email => 24595c6d-40a2-4592-a8f2-7823bb5d84be')\r",
													"        .to.contain.key('24595c6d-40a2-4592-a8f2-7823bb5d84be');\r",
													"});\r",
													"\r",
													"pm.test(\"CHVerifyReg -> Node  -> Create Notify JWT exists\", function () {\r",
													"    pm.expect(AuthTreeNodes, 'CHverifyReg does not contain Create Notify JWT => 26f0bca6-8070-4d16-a5bc-8c3136e0057e')\r",
													"        .to.contain.key('26f0bca6-8070-4d16-a5bc-8c3136e0057e');\r",
													"});\r",
													"\r",
													"pm.test(\"CHVerifyReg -> Node  -> HOTP Generator exists\", function () {\r",
													"    pm.expect(AuthTreeNodes, 'CHverifyReg does not contain HOTP Generator => 27ec8bc7-d2ed-4877-b8bd-ebd84d5b9994')\r",
													"        .to.contain.key('27ec8bc7-d2ed-4877-b8bd-ebd84d5b9994');\r",
													"});\r",
													"\r",
													"pm.test(\"CHVerifyReg -> Node  ->OTP not valid exists\", function () {\r",
													"    pm.expect(AuthTreeNodes, 'CHverifyReg does not contain OTP not valid => 2eaa7c69-f97d-4bbf-b8b0-2214832cbc6f')\r",
													"        .to.contain.key('2eaa7c69-f97d-4bbf-b8b0-2214832cbc6f');\r",
													"});\r",
													"\r",
													"pm.test(\"CHVerifyReg -> Node  ->Email Sent Confirmation exists\", function () {\r",
													"    pm.expect(AuthTreeNodes, 'CHverifyReg does not contain Email Sent Confirmation => 30518af8-5af3-45e1-bd23-d404e13d922b')\r",
													"        .to.contain.key('30518af8-5af3-45e1-bd23-d404e13d922b');\r",
													"});\r",
													"\r",
													"pm.test(\"CHVerifyReg -> Node  ->Send OTP exists\", function () {\r",
													"    pm.expect(AuthTreeNodes, 'CHverifyReg does not contain Send OTP => 37a1f12f-1e7b-4ca2-a870-040bf63291a0')\r",
													"        .to.contain.key('37a1f12f-1e7b-4ca2-a870-040bf63291a0');\r",
													"});\r",
													"\r",
													"pm.test(\"CHVerifyReg -> Node  ->OTP page exists\", function () {\r",
													"    pm.expect(AuthTreeNodes, 'CHverifyReg does not contain OTP page => 42d22a17-4022-4d9a-8cc2-2ef7b2fd331c')\r",
													"        .to.contain.key('42d22a17-4022-4d9a-8cc2-2ef7b2fd331c');\r",
													"});\r",
													"\r",
													"pm.test(\"CHVerifyReg -> Node  -> Set User Existing exists\", function () {\r",
													"    pm.expect(AuthTreeNodes, 'CHverifyReg does not contain Set User Existing => 453352a5-1e8a-4696-a439-0f09555ebc4f')\r",
													"        .to.contain.key('453352a5-1e8a-4696-a439-0f09555ebc4f');\r",
													"});\r",
													"\r",
													"pm.test(\"CHVerifyReg -> Node  -> Create Notify JWT - SMS exists\", function () {\r",
													"    pm.expect(AuthTreeNodes, 'CHverifyReg does not contain Create Notify JWT - SMS => 5c7f4247-3b01-4dae-b18b-1d90ee710891')\r",
													"        .to.contain.key('5c7f4247-3b01-4dae-b18b-1d90ee710891');\r",
													"});\r",
													"\r",
													"pm.test(\"CHVerifyReg -> Node  ->Identify Existing User exists\", function () {\r",
													"    pm.expect(AuthTreeNodes, 'CHverifyReg does not contain Identify Existing User => 817f8595-f2cc-45ce-b4f8-ad7aa6fdd1ea')\r",
													"        .to.contain.key('817f8595-f2cc-45ce-b4f8-ad7aa6fdd1ea');\r",
													"});\r",
													"\r",
													"pm.test(\"CHVerifyReg -> Node  -> Create Notify JWT - Email exists\", function () {\r",
													"    pm.expect(AuthTreeNodes, 'CHverifyReg does not contain Create Notify JWT - Email => 997cc39b-afde-4935-b9b5-a0d4e3034072')\r",
													"        .to.contain.key('997cc39b-afde-4935-b9b5-a0d4e3034072');\r",
													"});\r",
													"\r",
													"pm.test(\"CHVerifyReg -> Node  -> Create & Email link exists\", function () {\r",
													"    pm.expect(AuthTreeNodes, 'CHverifyReg does not contain Create & Email link => 9e02588a-e4ac-4b08-b10f-ad8f298ae720')\r",
													"        .to.contain.key('9e02588a-e4ac-4b08-b10f-ad8f298ae720');\r",
													"});\r",
													"\r",
													"pm.test(\"CHVerifyReg -> Node  -> Check phone entered exists\", function () {\r",
													"    pm.expect(AuthTreeNodes, 'CHverifyReg does not contain Check phone entered => a87fa542-b6d3-49a1-bbdf-30370ae7042e')\r",
													"        .to.contain.key('a87fa542-b6d3-49a1-bbdf-30370ae7042e');\r",
													"});\r",
													"\r",
													"pm.test(\"CHVerifyReg -> Node  -> Check phone entered exists\", function () {\r",
													"    pm.expect(AuthTreeNodes, 'CHverifyReg does not contain Email Collector => eb711261-5253-4e17-9357-43e175a5005d')\r",
													"        .to.contain.key('eb711261-5253-4e17-9357-43e175a5005d');\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "cookie",
												"value": "{{cookie_Name}} = {{session_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{platformUrl}}/am/json/{{realm}}/realm-config/authentication/authenticationtrees/trees/CHRegistration",
											"host": [
												"{{platformUrl}}"
											],
											"path": [
												"am",
												"json",
												"{{realm}}",
												"realm-config",
												"authentication",
												"authenticationtrees",
												"trees",
												"CHRegistration"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Login",
							"item": [
								{
									"name": "CHLogin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const AuthTreeNodes = (JSON.parse(responseBody)).nodes;\r",
													"\r",
													"pm.test(\"CHLogin contains correct number of nodes \", function () {\r",
													"    var length = Object.keys(AuthTreeNodes).length\r",
													"    console.log(length);\r",
													"    pm.expect(length, 'CHLogin contains incorrect number of nodes').to.be.eql(24);\r",
													"});\r",
													"\r",
													"pm.test(\"CHLogin -> Node  -> Retry Limit Decision exists\", function () {\r",
													"    pm.expect(AuthTreeNodes, 'CHLogin does not contain  Retry Limit Decision => a2adb2e2-a3f7-4214-927c-0a47d5d0e1dc')\r",
													"        .to.contain.key('a2adb2e2-a3f7-4214-927c-0a47d5d0e1dc');\r",
													"});\r",
													"\r",
													"pm.test(\"CHLogin -> Node  -> Send MFA text via Notify exists\", function () {\r",
													"    pm.expect(AuthTreeNodes, 'CHLogin does not contain  Send MFA text via Notify => 860b9b8a-260a-4123-85f5-7cf50e20a291')\r",
													"        .to.contain.key('860b9b8a-260a-4123-85f5-7cf50e20a291');\r",
													"});\r",
													"\r",
													"pm.test(\"CHLogin -> Node  -> Increment Login Count exists\", function () {\r",
													"    pm.expect(AuthTreeNodes, 'CHLogin does not contain Increment Login Count => ae62ed05-3a04-456b-8642-7bc222e0dd43')\r",
													"        .to.contain.key('ae62ed05-3a04-456b-8642-7bc222e0dd43');\r",
													"});\r",
													"\r",
													"pm.test(\"CHLogin -> Node  -> Enter OTP exists\", function () {\r",
													"    pm.expect(AuthTreeNodes, 'CHLogin does not contain Enter OTP => 35194bf4-8dcc-41a2-8545-4a965b8f6ec0')\r",
													"        .to.contain.key('35194bf4-8dcc-41a2-8545-4a965b8f6ec0');\r",
													"});\r",
													"\r",
													"pm.test(\"CHLogin -> Node  -> Page Node (Login Form) exists\", function () {\r",
													"    pm.expect(AuthTreeNodes, 'CHLogin does not contain Page Node (Login Form) => 94a5f48e-d6e3-4bf4-8edc-45c028a70900')\r",
													"        .to.contain.key('94a5f48e-d6e3-4bf4-8edc-45c028a70900');\r",
													"});\r",
													"\r",
													"pm.test(\"CHLogin -> Node  -> Require MFA exists\", function () {\r",
													"    pm.expect(AuthTreeNodes, 'CHLogin does not contain Require MFA => c32fab79-8836-4657-bef0-9f03a1e1165f')\r",
													"        .to.contain.key('c32fab79-8836-4657-bef0-9f03a1e1165f');\r",
													"});\r",
													"\r",
													"pm.test(\"CHLogin -> Node  -> HOTP Generator exists\", function () {\r",
													"    pm.expect(AuthTreeNodes, 'CHLogin does not contain HOTP Generator => c20b82fd-458d-4a46-8d0f-41d589f3976b')\r",
													"        .to.contain.key('c20b82fd-458d-4a46-8d0f-41d589f3976b');\r",
													"});\r",
													"\r",
													"pm.test(\"CHLogin -> Node  -> Has Phone Number exists\", function () {\r",
													"    pm.expect(AuthTreeNodes, 'CHLogin does not contain Has Phone Number => 0e91440f-8d40-4946-88c9-1a7e22da57bc')\r",
													"        .to.contain.key('0e91440f-8d40-4946-88c9-1a7e22da57bc');\r",
													"});\r",
													"\r",
													"pm.test(\"CHLogin -> Node  -> Send MFA email via Notify exists\", function () {\r",
													"    pm.expect(AuthTreeNodes, 'CHLogin does not contain Send MFA email via Notify => 5e76d32e-9180-4a20-b0bd-ff9b89773cbb')\r",
													"        .to.contain.key('5e76d32e-9180-4a20-b0bd-ff9b89773cbb');\r",
													"});\r",
													"\r",
													"pm.test(\"CHLogin -> Node  -> Raise Error exists\", function () {\r",
													"    pm.expect(AuthTreeNodes, 'CHLogin does not contain Raise Error => 739919ca-5a2b-4788-a447-36fe83a011f9')\r",
													"        .to.contain.key('739919ca-5a2b-4788-a447-36fe83a011f9');\r",
													"});\r",
													"\r",
													"pm.test(\"CHLogin -> Node  -> HOTP Generator exists\", function () {\r",
													"    pm.expect(AuthTreeNodes, 'CHLogin does not contain HOTP Generator => 0e167098-4f1b-4a6d-a383-9a415b143dda')\r",
													"        .to.contain.key('0e167098-4f1b-4a6d-a383-9a415b143dda');\r",
													"});\r",
													"\r",
													"pm.test(\"CHLogin -> Node  -> Inner Tree Evaluator exists\", function () {\r",
													"    pm.expect(AuthTreeNodes, 'CHLogin does not contain Inner Tree Evaluator => f8d1e6a3-14d1-4eda-9515-6e0dfacad539')\r",
													"        .to.contain.key('f8d1e6a3-14d1-4eda-9515-6e0dfacad539');\r",
													"});\r",
													"\r",
													"pm.test(\"CHLogin -> Node  -> Create Notify JWT - Email exists\", function () {\r",
													"    pm.expect(AuthTreeNodes, 'CHLogin does not contain Create Notify JWT - Email => 1031a228-600a-4325-82da-c93e6a13ab5b')\r",
													"        .to.contain.key('1031a228-600a-4325-82da-c93e6a13ab5b');\r",
													"});\r",
													"\r",
													"pm.test(\"CHLogin -> Node  -> Create Notify JWT - SMS exists\", function () {\r",
													"    pm.expect(AuthTreeNodes, 'CHLogin does not contain Create Notify JWT - SMS => 3147767a-bb7b-47b2-9b43-6d297e7cc2fa')\r",
													"        .to.contain.key('3147767a-bb7b-47b2-9b43-6d297e7cc2fa');\r",
													"});\r",
													"\r",
													"pm.test(\"CHLogin -> Node  -> Choose Email/SMS exists\", function () {\r",
													"    pm.expect(AuthTreeNodes, 'CHLogin does not contain Choose Email/SMS => 9339d5b3-f917-46a5-918e-a8b4ce884d81')\r",
													"        .to.contain.key('9339d5b3-f917-46a5-918e-a8b4ce884d81');\r",
													"});\r",
													"\r",
													"pm.test(\"CHLogin -> Node  -> Identify Existing User exists\", function () {\r",
													"    pm.expect(AuthTreeNodes, 'CHLogin does not contain Identify Existing User => 4f019558-f468-46f2-8000-5bba1d9dac45')\r",
													"        .to.contain.key('4f019558-f468-46f2-8000-5bba1d9dac45');\r",
													"});\r",
													"\r",
													"pm.test(\"CHLogin -> Node  -> Update Last Login exists\", function () {\r",
													"    pm.expect(AuthTreeNodes, 'CHLogin does not contain Update Last Login => bf46b661-96c6-443a-b012-3b5608b7051f')\r",
													"        .to.contain.key('bf46b661-96c6-443a-b012-3b5608b7051f');\r",
													"});\r",
													"\r",
													"pm.test(\"CHLogin -> Node  -> Update Legacy Password exists\", function () {\r",
													"    pm.expect(AuthTreeNodes, 'CHLogin does not contain Update Legacy Password => 758e3d0a-3211-4850-8847-86981f75888e')\r",
													"        .to.contain.key('758e3d0a-3211-4850-8847-86981f75888e');\r",
													"});\r",
													"\r",
													"pm.test(\"CHLogin -> Node  -> Generate Error Message exists\", function () {\r",
													"    pm.expect(AuthTreeNodes, 'CHLogin does not contain Generate Error Message => c99c82c6-20f5-456d-a94e-680c4f4a6307')\r",
													"        .to.contain.key('c99c82c6-20f5-456d-a94e-680c4f4a6307');\r",
													"});\r",
													"\r",
													"pm.test(\"CHLogin -> Node  -> Soft Lock counter exists\", function () {\r",
													"    pm.expect(AuthTreeNodes, 'CHLogin does not contain Soft Lock counter => d1f2eef5-5ad7-4ad6-bc5a-e65710879ff4')\r",
													"        .to.contain.key('d1f2eef5-5ad7-4ad6-bc5a-e65710879ff4');\r",
													"});\r",
													"\r",
													"pm.test(\"CHLogin -> Node  -> Get IDM Token exists\", function () {\r",
													"    pm.expect(AuthTreeNodes, 'CHLogin does not contain Get IDM Token => bd940aa3-c854-4934-b67a-1183d89be21f')\r",
													"        .to.contain.key('bd940aa3-c854-4934-b67a-1183d89be21f');\r",
													"});\r",
													"\r",
													"pm.test(\"CHLogin -> Node  -> Reset Counter after login OK exists\", function () {\r",
													"    pm.expect(AuthTreeNodes, 'CHLogin does not contain Reset Counter after login OK => 6486165d-fb00-4248-93c8-4f36ad2b2cb1')\r",
													"        .to.contain.key('6486165d-fb00-4248-93c8-4f36ad2b2cb1');\r",
													"});\r",
													"\r",
													"pm.test(\"CHLogin -> Node  -> Check soft lock exists\", function () {\r",
													"    pm.expect(AuthTreeNodes, 'CHLogin does not contain Check soft lock => fa88fc01-a7a2-429f-b7cc-546fe67a70b4')\r",
													"        .to.contain.key('fa88fc01-a7a2-429f-b7cc-546fe67a70b4');\r",
													"});\r",
													"\r",
													"pm.test(\"CHLogin -> Node  -> Reset Counter exists\", function () {\r",
													"    pm.expect(AuthTreeNodes, 'CHLogin does not Reset Counter => fc36693f-b04c-46f8-a683-1e1c1498c8bd')\r",
													"        .to.contain.key('fc36693f-b04c-46f8-a683-1e1c1498c8bd');\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "cookie",
												"value": "{{cookie_Name}} = {{session_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{platformUrl}}/am/json/{{realm}}/realm-config/authentication/authenticationtrees/trees/chlogin",
											"host": [
												"{{platformUrl}}"
											],
											"path": [
												"am",
												"json",
												"{{realm}}",
												"realm-config",
												"authentication",
												"authenticationtrees",
												"trees",
												"chlogin"
											]
										}
									},
									"response": []
								},
								{
									"name": "CHUpdateLegacyPassword",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const AuthTreeNodes = (JSON.parse(responseBody)).nodes;\r",
													"\r",
													"pm.test(\"CHUpdateLegacyPassword contains correct number of nodes \", function () {\r",
													"    var length = Object.keys(AuthTreeNodes).length\r",
													"    console.log(length);\r",
													"    pm.expect(length, 'CHUpdateLegacyPassword contains incorrect number of nodes').to.be.eql(13);\r",
													"});\r",
													"\r",
													"pm.test(\"CHUpdateLegacyPassword -> Node  -> Get IDM Access Token exists\", function () {\r",
													"    pm.expect(AuthTreeNodes, 'CHUpdateLegacyPassword does not contain  Get IDM Access Token => e2c86578-2128-429d-bb98-2fde50ce422c')\r",
													"        .to.contain.key('e2c86578-2128-429d-bb98-2fde50ce422c');\r",
													"});\r",
													"\r",
													"pm.test(\"CHUpdateLegacyPassword -> Node  -> Update User Password exists\", function () {\r",
													"    pm.expect(AuthTreeNodes, 'CHUpdateLegacyPassword does not contain Update User Password => fab99cf3-086a-4f01-a12d-165dd5792c14')\r",
													"        .to.contain.key('fab99cf3-086a-4f01-a12d-165dd5792c14');\r",
													"});\r",
													"\r",
													"pm.test(\"CHUpdateLegacyPassword -> Node  -> Data Store Decision exists\", function () {\r",
													"    pm.expect(AuthTreeNodes, 'CHUpdateLegacyPassword does not contain Data Store Decision => dfff5b45-4ae5-436d-a3d3-bb8dba5b94ed')\r",
													"        .to.contain.key('dfff5b45-4ae5-436d-a3d3-bb8dba5b94ed');\r",
													"});\r",
													"\r",
													"pm.test(\"CHUpdateLegacyPassword -> Node  -> Get IDM Access Token exists\", function () {\r",
													"    pm.expect(AuthTreeNodes, 'CHUpdateLegacyPassword does not contain Get IDM Access Token => 4893e08c-e3f0-47a7-ab74-742fc22e74c8')\r",
													"        .to.contain.key('4893e08c-e3f0-47a7-ab74-742fc22e74c8');\r",
													"});\r",
													"\r",
													"pm.test(\"CHUpdateLegacyPassword -> Node  -> Fetch Legacy Password exists\", function () {\r",
													"    pm.expect(AuthTreeNodes, 'CHUpdateLegacyPassword does not contain Fetch Legacy Password => 704fbf38-6a45-4842-8e70-60cae68c9524')\r",
													"        .to.contain.key('704fbf38-6a45-4842-8e70-60cae68c9524');\r",
													"});\r",
													"\r",
													"pm.test(\"CHUpdateLegacyPassword -> Node  ->Call Validation Service exists\", function () {\r",
													"    pm.expect(AuthTreeNodes, 'CHUpdateLegacyPassword does not contain Call Validation Service => 39276a55-2540-4d26-9231-56bd3113a612')\r",
													"        .to.contain.key('39276a55-2540-4d26-9231-56bd3113a612');\r",
													"});\r",
													"\r",
													"pm.test(\"CHUpdateLegacyPassword -> Node  ->Change Password Collector exists\", function () {\r",
													"    pm.expect(AuthTreeNodes, 'CHUpdateLegacyPassword does not contain Change Password Collector => 57d915a9-a414-4d14-bae4-e811ba80d0ce')\r",
													"        .to.contain.key('57d915a9-a414-4d14-bae4-e811ba80d0ce');\r",
													"});\r",
													"\r",
													"pm.test(\"CHUpdateLegacyPassword -> Node  -> Check Password Policy exists\", function () {\r",
													"    pm.expect(AuthTreeNodes, 'CHUpdateLegacyPassword does not contain Check Password Policy => 641a7ada-844c-4eec-8de4-aeab76c41465')\r",
													"        .to.contain.key('641a7ada-844c-4eec-8de4-aeab76c41465');\r",
													"});\r",
													"\r",
													"pm.test(\"CHUpdateLegacyPassword -> Node  -> Change Password Required exists\", function () {\r",
													"    pm.expect(AuthTreeNodes, 'CHUpdateLegacyPassword does not contain Change Password Required => a979a1c2-8474-4fdb-8c59-406bd39f5f0b')\r",
													"        .to.contain.key('a979a1c2-8474-4fdb-8c59-406bd39f5f0b');\r",
													"});\r",
													"\r",
													"pm.test(\"CHUpdateLegacyPassword -> Node  -> Check Password Status exists\", function () {\r",
													"    pm.expect(AuthTreeNodes, 'CHUpdateLegacyPassword does not contain Check Password Status => b1e2f7d4-cd1e-4433-a020-d445bbd76d28')\r",
													"        .to.contain.key('b1e2f7d4-cd1e-4433-a020-d445bbd76d28');\r",
													"});\r",
													"\r",
													"pm.test(\"CHUpdateLegacyPassword -> Node  -> Retry Limit Decision exists\", function () {\r",
													"    pm.expect(AuthTreeNodes, 'CHUpdateLegacyPassword does not contain Retry Limit Decision => 836b56d3-403a-4510-87d4-725b502fc0e1')\r",
													"        .to.contain.key('836b56d3-403a-4510-87d4-725b502fc0e1');\r",
													"});\r",
													"\r",
													"pm.test(\"CHUpdateLegacyPassword -> Node  -> Check Original Password exists\", function () {\r",
													"    pm.expect(AuthTreeNodes, 'CHUpdateLegacyPassword does not contain Check Original Password => 8b77e445-2462-48ff-959b-a6c4cb515fb2')\r",
													"        .to.contain.key('8b77e445-2462-48ff-959b-a6c4cb515fb2');\r",
													"});\r",
													"\r",
													"pm.test(\"CHUpdateLegacyPassword -> Node  -> Generate Error Message exists\", function () {\r",
													"    pm.expect(AuthTreeNodes, 'CHUpdateLegacyPassword does not contain Generate Error Message => 9208332b-9c36-4064-a82b-6835de853e36')\r",
													"        .to.contain.key('9208332b-9c36-4064-a82b-6835de853e36');\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "cookie",
												"value": "{{cookie_Name}} = {{session_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{platformUrl}}/am/json/{{realm}}/realm-config/authentication/authenticationtrees/trees/CHUpdateLegacyPassword",
											"host": [
												"{{platformUrl}}"
											],
											"path": [
												"am",
												"json",
												"{{realm}}",
												"realm-config",
												"authentication",
												"authenticationtrees",
												"trees",
												"CHUpdateLegacyPassword"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Manage Account",
							"item": [
								{
									"name": "CHChangeName",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const AuthTreeNodes = (JSON.parse(responseBody)).nodes;\r",
													"\r",
													"pm.test(\"CHChangeName contains correct number of nodes \", function () {\r",
													"    var length = Object.keys(AuthTreeNodes).length\r",
													"    console.log(length);\r",
													"    pm.expect(length, 'CHChangeName contains incorrect number of nodes').to.be.eql(5);\r",
													"});\r",
													"\r",
													"pm.test(\"CHChangeName -> Node  -> Check for Session exists\", function () {\r",
													"    pm.expect(AuthTreeNodes, 'CHChangeName does not contain Check for Session => 19e2c7db-dff3-4c61-831a-2af2a46370b3')\r",
													"        .to.contain.key('19e2c7db-dff3-4c61-831a-2af2a46370b3');\r",
													"});\r",
													"\r",
													"pm.test(\"CHChangeName -> Node  -> Save User exists\", function () {\r",
													"    pm.expect(AuthTreeNodes, 'CHChangeName does not contain Save User => 0e539626-dfd5-4392-ab9a-287306ebf00e')\r",
													"        .to.contain.key('0e539626-dfd5-4392-ab9a-287306ebf00e');\r",
													"});\r",
													"\r",
													"pm.test(\"CHChangeName -> Node -> Confirmation exists\", function () {\r",
													"    pm.expect(AuthTreeNodes, 'CHChangeName does not contain Confirmation => 33266e7b-6c8f-4e65-af6f-ac7405fc9906')\r",
													"        .to.contain.key('33266e7b-6c8f-4e65-af6f-ac7405fc9906');\r",
													"});\r",
													"\r",
													"pm.test(\"CHChangeName -> Node -> Get Session Data exists\", function () {\r",
													"    pm.expect(AuthTreeNodes, 'CHChangeName does not contain Get Session Data => 34187e7c-13a9-4e61-b61c-6807a0e70aee')\r",
													"        .to.contain.key('34187e7c-13a9-4e61-b61c-6807a0e70aee');\r",
													"});\r",
													"\r",
													"pm.test(\"CHChangeName -> Node -> Change Full Name exists\", function () {\r",
													"    pm.expect(AuthTreeNodes, 'CHChangeName does not containChange Full Name => b6390416-8200-421f-800f-fbdb43c73c5f')\r",
													"        .to.contain.key('b6390416-8200-421f-800f-fbdb43c73c5f');\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "cookie",
												"value": "{{cookie_Name}} = {{session_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{platformUrl}}/am/json/{{realm}}/realm-config/authentication/authenticationtrees/trees/CHChangeName",
											"host": [
												"{{platformUrl}}"
											],
											"path": [
												"am",
												"json",
												"{{realm}}",
												"realm-config",
												"authentication",
												"authenticationtrees",
												"trees",
												"CHChangeName"
											]
										}
									},
									"response": []
								},
								{
									"name": "CHChangePassword",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const AuthTreeNodes = (JSON.parse(responseBody)).nodes;\r",
													"\r",
													"pm.test(\"CHChangePassword contains correct number of nodes \", function () {\r",
													"    var length = Object.keys(AuthTreeNodes).length\r",
													"    console.log(length);\r",
													"    pm.expect(length, 'CHChangePassword contains incorrect number of nodes').to.be.eql(13);\r",
													"});\r",
													"\r",
													"pm.test(\"CHChangePassword -> Node  -> Check for Session exists\", function () {\r",
													"    pm.expect(AuthTreeNodes, 'CHChangePassword does not contain Check for Session => c7f4ff0d-b3ed-445a-8735-ef3f93eab7e3')\r",
													"        .to.contain.key('c7f4ff0d-b3ed-445a-8735-ef3f93eab7e3');\r",
													"});\r",
													"\r",
													"pm.test(\"CHChangePassword -> Node  -> Get Session Data exists\", function () {\r",
													"    pm.expect(AuthTreeNodes, 'CHChangePassword does not contain Get Session Data => 72c2688d-910a-4fd3-b094-25803bc9626a')\r",
													"        .to.contain.key('72c2688d-910a-4fd3-b094-25803bc9626a');\r",
													"});\r",
													"\r",
													"pm.test(\"CHChangePassword -> Node  -> Change Password Collector exists\", function () {\r",
													"    pm.expect(AuthTreeNodes, 'CHChangePassword does not contain Change Password Collector => c0ddbe48-e4f5-48a9-8879-79762611c5e4')\r",
													"        .to.contain.key('c0ddbe48-e4f5-48a9-8879-79762611c5e4');\r",
													"});\r",
													"\r",
													"pm.test(\"CHChangePassword -> Node  -> Get IDM Access Token exists\", function () {\r",
													"    pm.expect(AuthTreeNodes, 'CHChangePassword does not contain Get IDM Access Token => 99568072-5a13-48ec-8d07-c06a8c82b425')\r",
													"        .to.contain.key('99568072-5a13-48ec-8d07-c06a8c82b425');\r",
													"});\r",
													"\r",
													"pm.test(\"CHChangePassword -> Node  -> Retry Limit Decision exists\", function () {\r",
													"    pm.expect(AuthTreeNodes, 'CHChangePassword does not contain Retry Limit Decision => 81fec77e-909d-4a6b-bd6a-4dee5964e956')\r",
													"        .to.contain.key('81fec77e-909d-4a6b-bd6a-4dee5964e956');\r",
													"});\r",
													"\r",
													"pm.test(\"CHChangePassword -> Node  -> Check Pwd Policy exists\", function () {\r",
													"    pm.expect(AuthTreeNodes, 'CHChangePassword does not contain Check Pwd Policy => 23448f95-703e-4605-b7f5-1ff78fa8def2')\r",
													"        .to.contain.key('23448f95-703e-4605-b7f5-1ff78fa8def2');\r",
													"});\r",
													"\r",
													"pm.test(\"CHChangePassword -> Node  -> Data Store Decision exists\", function () {\r",
													"    pm.expect(AuthTreeNodes, 'CHChangePassword does not contain Data Store Decision => ad3af2c3-f67d-4d7a-b954-698a764c4791')\r",
													"        .to.contain.key('ad3af2c3-f67d-4d7a-b954-698a764c4791');\r",
													"});\r",
													"\r",
													"pm.test(\"CHChangePassword -> Node  -> Data Store Decision exists\", function () {\r",
													"    pm.expect(AuthTreeNodes, 'CHChangePassword does not contain Pwd Error Message => 81f81b53-416f-465a-8ca3-ecbc3216162d')\r",
													"        .to.contain.key('81f81b53-416f-465a-8ca3-ecbc3216162d');\r",
													"});\r",
													"\r",
													"pm.test(\"CHChangePassword -> Node  -> Load New Pwd for Patch exists\", function () {\r",
													"    pm.expect(AuthTreeNodes, 'CHChangePassword does not contain Load New Pwd for Patch => 1495201c-23da-46b1-8537-73d508cf8358')\r",
													"        .to.contain.key('1495201c-23da-46b1-8537-73d508cf8358');\r",
													"});\r",
													"\r",
													"pm.test(\"CHChangePassword -> Node  -> Patch Objecth exists\", function () {\r",
													"    pm.expect(AuthTreeNodes, 'CHChangePassword does not contain Patch Object => 5dbba61f-e063-4264-bc63-1e71927419b1')\r",
													"        .to.contain.key('5dbba61f-e063-4264-bc63-1e71927419b1');\r",
													"});\r",
													"\r",
													"pm.test(\"CHChangePassword -> Node  -> Confirmation exists\", function () {\r",
													"    pm.expect(AuthTreeNodes, 'CHChangePassword does not contain Confirmation => 0c2e7c10-63fb-4e25-8218-68e742672fd1')\r",
													"        .to.contain.key('0c2e7c10-63fb-4e25-8218-68e742672fd1');\r",
													"});\r",
													"\r",
													"pm.test(\"CHChangePassword -> Node  -> Retry Limit Decision exists\", function () {\r",
													"    pm.expect(AuthTreeNodes, 'CHChangePassword does not contain Retry Limit Decision => c036600d-18b5-4186-a122-227bea684ba8')\r",
													"        .to.contain.key('c036600d-18b5-4186-a122-227bea684ba8');\r",
													"});\r",
													"\r",
													"pm.test(\"CHChangePassword -> Node  -> max attempts message exists\", function () {\r",
													"    pm.expect(AuthTreeNodes, 'CHChangePassword does not contain max attempts message => b2e1eb3f-6276-4437-b52d-606a9c05fa59')\r",
													"        .to.contain.key('b2e1eb3f-6276-4437-b52d-606a9c05fa59');\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "cookie",
												"value": "{{cookie_Name}} = {{session_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{platformUrl}}/am/json/{{realm}}/realm-config/authentication/authenticationtrees/trees/CHChangePassword",
											"host": [
												"{{platformUrl}}"
											],
											"path": [
												"am",
												"json",
												"{{realm}}",
												"realm-config",
												"authentication",
												"authenticationtrees",
												"trees",
												"CHChangePassword"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "CHCredentialValidation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const AuthTreeNodes = (JSON.parse(responseBody)).nodes;\r",
											"\r",
											"pm.test(\"CHCredentialValidation contains correct number of nodes \", function () {\r",
											"    var length = Object.keys(AuthTreeNodes).length\r",
											"    console.log(length);\r",
											"    pm.expect(length, 'CHCredentialValidation contains incorrect number of nodes').to.be.eql(7);\r",
											"});\r",
											"\r",
											"pm.test(\"CHCredentialValidation -> Node  -> Call Validation Service exists\", function () {\r",
											"    pm.expect(AuthTreeNodes, 'CHCredentialValidation does not contain Call Validation Service => 3b40ffa2-ad51-444f-a040-2748beab59a5')\r",
											"        .to.contain.key('3b40ffa2-ad51-444f-a040-2748beab59a5');\r",
											"});\r",
											"\r",
											"pm.test(\"CHCredentialValidation -> Node  -> Fetch Hashed Password exists\", function () {\r",
											"    pm.expect(AuthTreeNodes, 'CHCredentialValidation does not contain Fetch Hashed Password => 578be13f-34d4-412d-9dca-4a8e46b4008f')\r",
											"        .to.contain.key('578be13f-34d4-412d-9dca-4a8e46b4008f');\r",
											"});\r",
											"\r",
											"pm.test(\"CHCredentialValidation -> Node  -> Check for Session exists\", function () {\r",
											"    pm.expect(AuthTreeNodes, 'CHCredentialValidation does not contain Check for Session => 73454ed9-828e-44a5-8ca2-c65085852d9f')\r",
											"        .to.contain.key('73454ed9-828e-44a5-8ca2-c65085852d9f');\r",
											"});\r",
											"\r",
											"pm.test(\"CHCredentialValidation -> Node  -> Identify Existing User exists\", function () {\r",
											"    pm.expect(AuthTreeNodes, 'CHCredentialValidation does not contain Identify Existing User => 78936cb2-2423-4b7e-9a45-528b8b386dcd')\r",
											"        .to.contain.key('78936cb2-2423-4b7e-9a45-528b8b386dcd');\r",
											"});\r",
											"\r",
											"pm.test(\"CHCredentialValidation -> Node  -> Enter Credential exists\", function () {\r",
											"    pm.expect(AuthTreeNodes, 'CHCredentialValidation does not contain Enter Credential => 956820bb-c811-41be-b09f-64406dce2e62')\r",
											"        .to.contain.key('956820bb-c811-41be-b09f-64406dce2e62');\r",
											"});\r",
											"\r",
											"pm.test(\"CHCredentialValidation -> Node  -> Get Session Data exists\", function () {\r",
											"    pm.expect(AuthTreeNodes, 'CHCredentialValidation does not contain Get Session Data => f27fc95c-c74f-4778-8d53-8cb2a5e142a1')\r",
											"        .to.contain.key('f27fc95c-c74f-4778-8d53-8cb2a5e142a1');\r",
											"});\r",
											"\r",
											"pm.test(\"CHCredentialValidation -> Node  -> Retry Limit Decision exists\", function () {\r",
											"    pm.expect(AuthTreeNodes, 'CHCredentialValidation does not contain Retry Limit Decision => 5c2c9a13-626d-4058-8447-31c78d04acee')\r",
											"        .to.contain.key('5c2c9a13-626d-4058-8447-31c78d04acee');\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/realm-config/authentication/authenticationtrees/trees/CHCredentialValidation",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"realm-config",
										"authentication",
										"authenticationtrees",
										"trees",
										"CHCredentialValidation"
									]
								}
							},
							"response": []
						},
						{
							"name": "CHCredentialValidationAuthCode",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const AuthTreeNodes = (JSON.parse(responseBody)).nodes;\r",
											"\r",
											"pm.test(\"CHCredentialValidationAuthCode contains correct number of nodes \", function () {\r",
											"    var length = Object.keys(AuthTreeNodes).length\r",
											"    console.log(length);\r",
											"    pm.expect(length, 'CHCredentialValidationAuthCode contains incorrect number of nodes').to.be.eql(8);\r",
											"});\r",
											"\r",
											"pm.test(\"CHCredentialValidationAuthCode -> Node  -> Identify Existing User exists\", function () {\r",
											"    pm.expect(AuthTreeNodes, 'CHCredentialValidationAuthCode does not contain Identify Existing User => 0965f6e5-b804-4375-a5e7-0f59f2a3529c')\r",
											"        .to.contain.key('0965f6e5-b804-4375-a5e7-0f59f2a3529c');\r",
											"});\r",
											"\r",
											"pm.test(\"CHCredentialValidationAuthCode -> Node  -> Check for Session exists\", function () {\r",
											"    pm.expect(AuthTreeNodes, 'CHCredentialValidationAuthCode does not contain Check for Session => 3e5d584e-833e-4741-b70e-b3ee7626455b')\r",
											"        .to.contain.key('3e5d584e-833e-4741-b70e-b3ee7626455b');\r",
											"});\r",
											"\r",
											"pm.test(\"CHCredentialValidationAuthCode -> Node  -> Get Session Data exists\", function () {\r",
											"    pm.expect(AuthTreeNodes, 'CHCredentialValidationAuthCode does not contain Get Session Data => a47f8659-4bec-43e2-baa4-b269ded1782d')\r",
											"        .to.contain.key('a47f8659-4bec-43e2-baa4-b269ded1782d');\r",
											"});\r",
											"\r",
											"pm.test(\"CHCredentialValidationAuthCode -> Node  -> Enter Credential exists\", function () {\r",
											"    pm.expect(AuthTreeNodes, 'CHCredentialValidationAuthCode does not contain Enter Credential => bc190e4b-1503-49bf-9ee2-0f486373578e')\r",
											"        .to.contain.key('bc190e4b-1503-49bf-9ee2-0f486373578e');\r",
											"});\r",
											"\r",
											"pm.test(\"CHCredentialValidationAuthCode -> Node  -> Get IDM Access Token exists\", function () {\r",
											"    pm.expect(AuthTreeNodes, 'CHCredentialValidationAuthCode does not contain Get IDM Access Token => da2763c9-5111-4dfd-9522-b6d1d8f56656')\r",
											"        .to.contain.key('da2763c9-5111-4dfd-9522-b6d1d8f56656');\r",
											"});\r",
											"\r",
											"pm.test(\"CHCredentialValidationAuthCode -> Node  -> CH Fetch Company Auth Code exists\", function () {\r",
											"    pm.expect(AuthTreeNodes, 'CHCredentialValidationAuthCode does not contain CH Fetch Company Auth Code => deb53ca4-0000-4059-8629-dbf0728b4370')\r",
											"        .to.contain.key('deb53ca4-0000-4059-8629-dbf0728b4370');\r",
											"});\r",
											"\r",
											"pm.test(\"CHCredentialValidationAuthCode -> Node  -> Retry Limit Decision exists\", function () {\r",
											"    pm.expect(AuthTreeNodes, 'CHCredentialValidationAuthCode does not contain Retry Limit Decision => eb036e4a-6573-4dbf-b717-d2835ca014d3')\r",
											"        .to.contain.key('eb036e4a-6573-4dbf-b717-d2835ca014d3');\r",
											"});\r",
											"\r",
											"pm.test(\"CHCredentialValidationAuthCode -> Node  ->Call Validation Service exists\", function () {\r",
											"    pm.expect(AuthTreeNodes, 'CHCredentialValidationAuthCode does not contain Call Validation Service => f0de0cf7-ac42-44b4-be5a-d0ec6e3c5e77')\r",
											"        .to.contain.key('f0de0cf7-ac42-44b4-be5a-d0ec6e3c5e77');\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/realm-config/authentication/authenticationtrees/trees/CHCredentialValidationAuthCode",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"realm-config",
										"authentication",
										"authenticationtrees",
										"trees",
										"CHCredentialValidationAuthCode"
									]
								}
							},
							"response": []
						},
						{
							"name": "CHCompanyAssociation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const AuthTreeNodes = (JSON.parse(responseBody)).nodes;\r",
											"\r",
											"pm.test(\"CHCompanyAssociation contains correct number of nodes \", function () {\r",
											"    var length = Object.keys(AuthTreeNodes).length\r",
											"    console.log(length);\r",
											"    pm.expect(length, 'CHCompanyAssociation contains incorrect number of nodes').to.be.eql(14);\r",
											"});\r",
											"\r",
											"pm.test(\"CHCompanyAssociation -> Node -> check session exists\", function () {\r",
											"    pm.expect(AuthTreeNodes, 'CHCompanyAssociation does not contain check session => 0207683b-7437-4441-aa6b-a143ac0ab576')\r",
											"        .to.contain.key('0207683b-7437-4441-aa6b-a143ac0ab576');\r",
											"});\r",
											"\r",
											"pm.test(\"CHCompanyAssociation -> Node -> Enter company No exists\", function () {\r",
											"    pm.expect(AuthTreeNodes, 'CHCompanyAssociation does not contain Enter company No => 3f37ce1b-c569-4229-a331-9bedf3ceb9af')\r",
											"        .to.contain.key('3f37ce1b-c569-4229-a331-9bedf3ceb9af');\r",
											"});\r",
											"\r",
											"pm.test(\"CHCompanyAssociation -> Node -> Validate Auth Code exists\", function () {\r",
											"    pm.expect(AuthTreeNodes, 'CHCompanyAssociation does not contain Validate Auth Code => 48ef280d-22c2-4e03-8b04-7b04758040ee')\r",
											"        .to.contain.key('48ef280d-22c2-4e03-8b04-7b04758040ee');\r",
											"});\r",
											"\r",
											"pm.test(\"CHCompanyAssociation -> Node  -> Get Session Data exists\", function () {\r",
											"    pm.expect(AuthTreeNodes, 'CHCompanyAssociation does not contain Get Session Data => 54a93ee3-d273-49b6-8d23-0fd1dcb6320b')\r",
											"        .to.contain.key('54a93ee3-d273-49b6-8d23-0fd1dcb6320b');\r",
											"});\r",
											"\r",
											"pm.test(\"CHCompanyAssociation -> Node -> Enter Auth Code exists\", function () {\r",
											"    pm.expect(AuthTreeNodes, 'CHCompanyAssociation does not contain Enter Auth Code => 55ab38cb-458d-4c6c-ba34-3586bf34b06c')\r",
											"        .to.contain.key('55ab38cb-458d-4c6c-ba34-3586bf34b06c');\r",
											"});\r",
											"\r",
											"pm.test(\"CHCompanyAssociation -> Node -> Confirmation exists\", function () {\r",
											"    pm.expect(AuthTreeNodes, 'CHCompanyAssociation does not contain Confirmation => 78204b08-ebbd-4b61-8b1b-080a1061987a')\r",
											"        .to.contain.key('78204b08-ebbd-4b61-8b1b-080a1061987a');\r",
											"});\r",
											"\r",
											"pm.test(\"CHCompanyAssociation -> Node -> get company data exists\", function () {\r",
											"    pm.expect(AuthTreeNodes, 'CHCompanyAssociation does not contain get company data => a011052d-bbf2-4dd9-93fc-bf96e3d9b7f6')\r",
											"        .to.contain.key('a011052d-bbf2-4dd9-93fc-bf96e3d9b7f6');\r",
											"});\r",
											"\r",
											"pm.test(\"CHCompanyAssociation -> Node -> Create Association exists\", function () {\r",
											"    pm.expect(AuthTreeNodes, 'CHCompanyAssociation does not contain Create Association => b2401c4a-636f-43e4-b129-be18fccf30f3')\r",
											"        .to.contain.key('b2401c4a-636f-43e4-b129-be18fccf30f3');\r",
											"});\r",
											"\r",
											"pm.test(\"CHCompanyAssociation -> Node -> Retry Limit Decision exists\", function () {\r",
											"    pm.expect(AuthTreeNodes, 'CHCompanyAssociation does not contain Retry Limit Decision => ba60739d-61f1-4ede-bf94-3f3dc628a38d')\r",
											"        .to.contain.key('ba60739d-61f1-4ede-bf94-3f3dc628a38d');\r",
											"});\r",
											"\r",
											"pm.test(\"CHCompanyAssociation -> Node -> Identify Existing User exists\", function () {\r",
											"    pm.expect(AuthTreeNodes, 'CHCompanyAssociation does not contain Identify Existing User => e04ef6d2-daec-403e-93a1-f8b60a8f634b')\r",
											"        .to.contain.key('e04ef6d2-daec-403e-93a1-f8b60a8f634b');\r",
											"});\r",
											"\r",
											"pm.test(\"CHCompanyAssociation -> Node -> get IDM token again exists\", function () {\r",
											"    pm.expect(AuthTreeNodes, 'CHCompanyAssociation does not contain get IDM token again => e5c64e99-5259-4e93-bb25-1871b370f7cd')\r",
											"        .to.contain.key('e5c64e99-5259-4e93-bb25-1871b370f7cd');\r",
											"});\r",
											"\r",
											"pm.test(\"CHCompanyAssociation -> Node -> get IDM token again exists\", function () {\r",
											"    pm.expect(AuthTreeNodes, 'CHCompanyAssociation does not contain get IDM token again => e5c64e99-5259-4e93-bb25-1871b370f7cd')\r",
											"        .to.contain.key('e5c64e99-5259-4e93-bb25-1871b370f7cd');\r",
											"});\r",
											"\r",
											"pm.test(\"CHCompanyAssociation -> Node -> get IDM token exists\", function () {\r",
											"    pm.expect(AuthTreeNodes, 'CHCompanyAssociation does not contain get IDM token => ef37be85-8d9f-4140-aa6a-b8c8cc19a695')\r",
											"        .to.contain.key('ef37be85-8d9f-4140-aa6a-b8c8cc19a695');\r",
											"});\r",
											"\r",
											"pm.test(\"CHCompanyAssociation -> Node -> Auth Code Error Message exists\", function () {\r",
											"    pm.expect(AuthTreeNodes, 'CHCompanyAssociation does not contain Auth Code Error Message => c5f729d0-922d-44f8-a480-aa34d2ca02d8')\r",
											"        .to.contain.key('c5f729d0-922d-44f8-a480-aa34d2ca02d8');\r",
											"});\r",
											"\r",
											"pm.test(\"CHCompanyAssociation -> Node -> max attempts message exists\", function () {\r",
											"    pm.expect(AuthTreeNodes, 'CHCompanyAssociation does not contain max attempts message => c7714228-4b3d-403c-8807-39c028bf549c')\r",
											"        .to.contain.key('c7714228-4b3d-403c-8807-39c028bf549c');\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/realm-config/authentication/authenticationtrees/trees/CHCompanyAssociation",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"realm-config",
										"authentication",
										"authenticationtrees",
										"trees",
										"CHCompanyAssociation"
									]
								}
							},
							"response": []
						},
						{
							"name": "CHResetPassword",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const AuthTreeNodes = (JSON.parse(responseBody)).nodes;\r",
											"\r",
											"pm.test(\"CHResetPassword contains correct number of nodes \", function () {\r",
											"    var length = Object.keys(AuthTreeNodes).length\r",
											"    console.log(length);\r",
											"    pm.expect(length, 'CHResetPassword contains incorrect number of nodes').to.be.eql(20);\r",
											"});\r",
											"\r",
											"pm.test(\"CHResetPassword -> Node -> Update Password exists\", function () {\r",
											"    pm.expect(AuthTreeNodes, 'CHResetPassword does not contain Update Password => 067ea40b-8eb7-48b9-8de3-c9bf73103e2d')\r",
											"        .to.contain.key('067ea40b-8eb7-48b9-8de3-c9bf73103e2d');\r",
											"});\r",
											"\r",
											"pm.test(\"CHResetPassword -> Node -> Password Updated exists\", function () {\r",
											"    pm.expect(AuthTreeNodes, 'CHResetPassword does not contain Password Updated => 129a2a4d-ea48-4ea4-a02f-eff667ffcc0e')\r",
											"        .to.contain.key('129a2a4d-ea48-4ea4-a02f-eff667ffcc0e');\r",
											"});\r",
											"\r",
											"pm.test(\"CHResetPassword -> Node -> Start or Resume exists\", function () {\r",
											"    pm.expect(AuthTreeNodes, 'CHResetPassword does not contain Start or Resume => 29524a97-032e-40b1-8cd0-ef3938309671')\r",
											"        .to.contain.key('29524a97-032e-40b1-8cd0-ef3938309671');\r",
											"});\r",
											"\r",
											"pm.test(\"CHResetPassword -> Node -> Enter Email exists\", function () {\r",
											"    pm.expect(AuthTreeNodes, 'CHResetPassword does not contain Enter Email => 4a0a458b-f374-4a7e-a5ec-5352aa21f834')\r",
											"        .to.contain.key('4a0a458b-f374-4a7e-a5ec-5352aa21f834');\r",
											"});\r",
											"\r",
											"pm.test(\"CHResetPassword -> Node -> Identify Existing User 2 exists\", function () {\r",
											"    pm.expect(AuthTreeNodes, 'CHResetPassword does not contain Identify Existing User 2 => 4b011f55-d230-407d-8e91-8c5d0f573133')\r",
											"        .to.contain.key('4b011f55-d230-407d-8e91-8c5d0f573133');\r",
											"});\r",
											"\r",
											"pm.test(\"CHResetPassword -> Node -> Cannot Find User exists\", function () {\r",
											"    pm.expect(AuthTreeNodes, 'CHResetPassword does not contain Cannot Find User => 56c8d746-4a57-467b-bc70-8cb944e98d8e')\r",
											"        .to.contain.key('56c8d746-4a57-467b-bc70-8cb944e98d8e');\r",
											"});\r",
											"\r",
											"pm.test(\"CHResetPassword -> Node -> Choose Email/SMS exists\", function () {\r",
											"    pm.expect(AuthTreeNodes, 'CHResetPassword does not contain Choose Email/SMS => 5fc9e55b-6a0a-454d-89ce-b7c1b4d6a29e')\r",
											"        .to.contain.key('5fc9e55b-6a0a-454d-89ce-b7c1b4d6a29e');\r",
											"});\r",
											"\r",
											"pm.test(\"CHResetPassword -> Node -> Identify Existing User 1 exists\", function () {\r",
											"    pm.expect(AuthTreeNodes, 'CHResetPassword does not contain Identify Existing User 1 => 6de1f9ea-0421-4065-8b70-bed9152c9a05')\r",
											"        .to.contain.key('6de1f9ea-0421-4065-8b70-bed9152c9a05');\r",
											"});\r",
											"\r",
											"pm.test(\"CHResetPassword -> Node -> Send MFA text exists\", function () {\r",
											"    pm.expect(AuthTreeNodes, 'CHResetPassword does not contain Send MFA text => 70a15b0f-cb2a-48a9-81f0-6ba902a9e24a')\r",
											"        .to.contain.key('70a15b0f-cb2a-48a9-81f0-6ba902a9e24a');\r",
											"});\r",
											"\r",
											"pm.test(\"CHResetPassword -> Node ->C reate Notify JWT - SMS exists\", function () {\r",
											"    pm.expect(AuthTreeNodes, 'CHResetPassword does not contain Create Notify JWT - SMS=> 79c759fc-b836-42b4-afd4-ad564d1bbe60')\r",
											"        .to.contain.key('79c759fc-b836-42b4-afd4-ad564d1bbe60');\r",
											"});\r",
											"\r",
											"pm.test(\"CHResetPassword -> Node -> Enter OTP exists\", function () {\r",
											"    pm.expect(AuthTreeNodes, 'CHResetPassword does not contain Enter OTP => 843b8111-3af6-49fa-bf8d-a650e04dec2e')\r",
											"        .to.contain.key('843b8111-3af6-49fa-bf8d-a650e04dec2e');\r",
											"});\r",
											"\r",
											"pm.test(\"CHResetPassword -> Node -> Create Notify JWT - Email exists\", function () {\r",
											"    pm.expect(AuthTreeNodes, 'CHResetPassword does not contain Create Notify JWT - Email => 8e86cb2b-52ab-4341-a89b-1379976c790a')\r",
											"        .to.contain.key('8e86cb2b-52ab-4341-a89b-1379976c790a');\r",
											"});\r",
											"\r",
											"pm.test(\"CHResetPassword -> Node -> Email sent ok exists\", function () {\r",
											"    pm.expect(AuthTreeNodes, 'CHResetPassword does not contain Email sent ok => b39ecc00-d42f-4cff-8f2e-3256bb8b3669')\r",
											"        .to.contain.key('b39ecc00-d42f-4cff-8f2e-3256bb8b3669');\r",
											"});\r",
											"\r",
											"pm.test(\"CHResetPassword -> Node -> Send Pwd Reset Email exists\", function () {\r",
											"    pm.expect(AuthTreeNodes, 'CHResetPassword does not contain Send Pwd Reset Email => bb5fc733-547b-41da-9b51-f709cac78764')\r",
											"        .to.contain.key('bb5fc733-547b-41da-9b51-f709cac78764');\r",
											"});\r",
											"\r",
											"pm.test(\"CHResetPassword -> Node -> HOTP Generator exists\", function () {\r",
											"    pm.expect(AuthTreeNodes, 'CHResetPassword does not contain HOTP Generator => cfb95e8e-a908-40f3-a756-f5959759e22e')\r",
											"        .to.contain.key('cfb95e8e-a908-40f3-a756-f5959759e22e');\r",
											"});\r",
											"\r",
											"pm.test(\"CHResetPassword -> Node -> Has Phone Number exists\", function () {\r",
											"    pm.expect(AuthTreeNodes, 'CHResetPassword does not contain Has Phone Number => e5b2d3d4-0995-48ad-bf0c-ae2b8560387e')\r",
											"        .to.contain.key('e5b2d3d4-0995-48ad-bf0c-ae2b8560387e');\r",
											"});\r",
											"\r",
											"pm.test(\"CHResetPassword -> Node -> Enter Password exists\", function () {\r",
											"    pm.expect(AuthTreeNodes, 'CHResetPassword does not contain Enter Password => e93a0cb6-2c4c-4210-8aaa-458903e9231a')\r",
											"        .to.contain.key('e93a0cb6-2c4c-4210-8aaa-458903e9231a');\r",
											"});\r",
											"\r",
											"pm.test(\"CHResetPassword -> Node -> Raise Error exists\", function () {\r",
											"    pm.expect(AuthTreeNodes, 'CHResetPassword does not contain Raise Error => ff7ee39c-e731-438a-8bf0-8492d9ee61bd')\r",
											"        .to.contain.key('ff7ee39c-e731-438a-8bf0-8492d9ee61bd');\r",
											"});\r",
											"\r",
											"pm.test(\"CHResetPassword -> Node -> Retry Limit Decision exists\", function () {\r",
											"    pm.expect(AuthTreeNodes, 'CHResetPassword does not Retry Limit Decision => c98726b2-cee9-47ba-9677-40ae29223c65')\r",
											"        .to.contain.key('c98726b2-cee9-47ba-9677-40ae29223c65');\r",
											"});\r",
											"\r",
											"pm.test(\"CHResetPassword -> Node -> Max Attempts message exists\", function () {\r",
											"    pm.expect(AuthTreeNodes, 'CHResetPassword does not Max Attempts message => d085bafb-b361-4992-a766-7ffa1a73b4a1')\r",
											"        .to.contain.key('d085bafb-b361-4992-a766-7ffa1a73b4a1');\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/realm-config/authentication/authenticationtrees/trees/CHResetPassword",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"realm-config",
										"authentication",
										"authenticationtrees",
										"trees",
										"CHResetPassword"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Scripts",
					"item": [
						{
							"name": "CH - Update Legacy Password Required",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Script -> CH - Update Legacy Password Required exists \", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(response.name).to.eql('CH - Update Legacy Password Required');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/scripts/14c3cb5d-1010-459d-9747-6ff19a8de70d",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"scripts",
										"14c3cb5d-1010-459d-9747-6ff19a8de70d"
									]
								}
							},
							"response": []
						},
						{
							"name": "CH -Associate user to company",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Script -> CH - Associate User to Company exists \", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(response.name).to.eql('CH - Associate User to Company');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/scripts/16975ea5-4f0a-4ac6-861f-00dbf39ca441",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"scripts",
										"16975ea5-4f0a-4ac6-861f-00dbf39ca441"
									]
								}
							},
							"response": []
						},
						{
							"name": "CH - Callback login error",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Script -> CH - Callback Login Error exists \", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(response.name).to.eql('CH - Callback Login Error');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/scripts/064705f3-93d3-482c-ad3f-4531a28ce0a0",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"scripts",
										"064705f3-93d3-482c-ad3f-4531a28ce0a0"
									]
								}
							},
							"response": []
						},
						{
							"name": "CH - Callback for cannot find user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Script -> CH - Callback for Cannot Find User exists \", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(response.name).to.eql('CH - Callback for Cannot Find User');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/scripts/8f08bdfd-08b9-42ce-8f45-99da5bc9dcfd",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"scripts",
										"8f08bdfd-08b9-42ce-8f45-99da5bc9dcfd"
									]
								}
							},
							"response": []
						},
						{
							"name": "CH - Callback for password update",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Script -> CH - Callback for Password Updated exists \", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(response.name).to.eql('CH - Callback for Password Updated');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/scripts/ae90c22f-2613-49a6-9091-2238ec13eacb",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"scripts",
										"ae90c22f-2613-49a6-9091-2238ec13eacb"
									]
								}
							},
							"response": []
						},
						{
							"name": "CH - Callback for successful Registration",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Script -> CH - Callback for Successful Registration exists \", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(response.name).to.eql('CH - Callback for Successful Registration');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/scripts/72921084-9674-4f0b-bf0c-8ef974d84008",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"scripts",
										"72921084-9674-4f0b-bf0c-8ef974d84008"
									]
								}
							},
							"response": []
						},
						{
							"name": "CH - Callback for User Already Exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Script -> CH - Callback for User Already Exists exists \", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(response.name).to.eql('CH - Callback for User Already Exists');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/scripts/181f73fa-ec30-4ef4-b78a-9790a4918b23",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"scripts",
										"181f73fa-ec30-4ef4-b78a-9790a4918b23"
									]
								}
							},
							"response": []
						},
						{
							"name": "CH - Callback for User Associated to Company",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Script -> CH - Callback for User Associated to Company exists \", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(response.name).to.eql('CH - Callback for User Associated to Company');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/scripts/10f63087-b21b-40eb-9c90-8e3fb3fabfa1",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"scripts",
										"10f63087-b21b-40eb-9c90-8e3fb3fabfa1"
									]
								}
							},
							"response": []
						},
						{
							"name": "CH - Prompt for Company Number/Auth Code",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Script -> CH - Prompt for Company Number/Auth Code exists \", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(response.name).to.eql('CH - Prompt for Company Number/Auth Code');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/scripts/9dc0bbc6-8894-4d23-a13f-8619a3fcad5b",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"scripts",
										"9dc0bbc6-8894-4d23-a13f-8619a3fcad5b"
									]
								}
							},
							"response": []
						},
						{
							"name": "CH - Update Last Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Script -> CH - Update Last Login exists \", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(response.name).to.eql('CH - Update Last Login');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/scripts/d7da3b35-af63-499b-aa0a-bb03666508db",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"scripts",
										"d7da3b35-af63-499b-aa0a-bb03666508db"
									]
								}
							},
							"response": []
						},
						{
							"name": "CH - Phone Number in IDM profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Script -> CH - Phone Number in IDM profile exists \", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(response.name).to.eql('CH - Phone Number in IDM profile');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/scripts/b480d9f7-5908-45cf-91d1-bc1fe56fe8de",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"scripts",
										"b480d9f7-5908-45cf-91d1-bc1fe56fe8de"
									]
								}
							},
							"response": []
						},
						{
							"name": "CH - Callback to prompt for validate credential",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Script -> CH - Callback to prompt for validate credential exists \", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(response.name).to.eql('CH - Callback to prompt for validate credential');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/scripts/7f9c55bb-9307-45b7-9b4f-7d1bf4e8ea49",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"scripts",
										"7f9c55bb-9307-45b7-9b4f-7d1bf4e8ea49"
									]
								}
							},
							"response": []
						},
						{
							"name": "CH - Registration - Create token and send Email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Script -> CH - Registration - Create token and send Email exists \", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(response.name).to.eql('CH - Registration - Create token and send Email');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/scripts/b6ca4a1f-573f-4a3a-a410-d18b01207f6e",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"scripts",
										"b6ca4a1f-573f-4a3a-a410-d18b01207f6e"
									]
								}
							},
							"response": []
						},
						{
							"name": "CH - Lookup the company by number",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Script -> CH - Lookup the company by number exists \", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(response.name).to.eql('CH - Lookup the company by number');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/scripts/317bb0cb-3e6a-4b9c-bb75-857a63d35688",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"scripts",
										"317bb0cb-3e6a-4b9c-bb75-857a63d35688"
									]
								}
							},
							"response": []
						},
						{
							"name": "CH - Update Legacy Password Check Original",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Script -> CH - Update Legacy Password Check Original exists \", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(response.name).to.eql('CH - Update Legacy Password Check Original');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/scripts/a5042601-6867-4566-81d1-fad4ecd61487",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"scripts",
										"a5042601-6867-4566-81d1-fad4ecd61487"
									]
								}
							},
							"response": []
						},
						{
							"name": "CH - Reset Password - Confirmation of Email Sent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Script -> CH - Reset Password - Confirmation of Email Sent exists \", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(response.name).to.eql('CH - Reset Password - Confirmation of Email Sent');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/scripts/a39f3f71-1782-46dc-97cf-7cc417d4ca4a",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"scripts",
										"a39f3f71-1782-46dc-97cf-7cc417d4ca4a"
									]
								}
							},
							"response": []
						},
						{
							"name": "CH - Fetch Company Auth Code",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Script -> CH - Fetch Company Auth Code exists \", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(response.name).to.eql('CH - Fetch Company Auth Code');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/scripts/0771b655-768c-407b-800b-89b70bbe1407",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"scripts",
										"0771b655-768c-407b-800b-89b70bbe1407"
									]
								}
							},
							"response": []
						},
						{
							"name": "CH - Callback for Password Updated",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Script -> CH - Callback for Password Updated exists \", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(response.name).to.eql('CH - Callback for Password Updated');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/scripts/ae90c22f-2613-49a6-9091-2238ec13eacb",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"scripts",
										"ae90c22f-2613-49a6-9091-2238ec13eacb"
									]
								}
							},
							"response": []
						},
						{
							"name": "CH - Send MFA email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Script -> CH - Send MFA email exists \", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(response.name).to.eql('CH - Send MFA email');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/scripts/a5778ce7-addf-4fb6-a7db-92929f1314c4",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"scripts",
										"a5778ce7-addf-4fb6-a7db-92929f1314c4"
									]
								}
							},
							"response": []
						},
						{
							"name": "CH - Prompt Error Message for wrong Company Auth Code",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Script -> CH - Prompt Error Message for wrong Company Auth Code exists \", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(response.name).to.eql('CH - Prompt Error Message for wrong Company Auth Code');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/scripts/917f36a9-f21e-43e4-bed5-9b2171228387",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"scripts",
										"917f36a9-f21e-43e4-bed5-9b2171228387"
									]
								}
							},
							"response": []
						},
						{
							"name": "CH - Change Password - Check Pwd Policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Script -> CH - Change Password - Check Pwd Policy exists \", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(response.name).to.eql('CH - Change Password - Check Pwd Policy');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/scripts/c089f1fe-fa0f-4f61-a3d1-a1fce6e953cf",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"scripts",
										"c089f1fe-fa0f-4f61-a3d1-a1fce6e953cf"
									]
								}
							},
							"response": []
						},
						{
							"name": "CH - CompanyID Handler",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Script ->CH - CompanyID Handler exists \", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(response.name).to.eql('CH - CompanyID Handler');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/scripts/4a064093-8e90-4cc6-bb39-f3ad886215de",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"scripts",
										"4a064093-8e90-4cc6-bb39-f3ad886215de"
									]
								}
							},
							"response": []
						},
						{
							"name": "CH - Require MFA Check",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Script ->CH - Require MFA Check exists \", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(response.name).to.eql('CH - Require MFA Check');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/scripts/20a3599f-b742-4554-a8b7-27862f248dd5",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"scripts",
										"20a3599f-b742-4554-a8b7-27862f248dd5"
									]
								}
							},
							"response": []
						},
						{
							"name": "CH - Registration - Verify Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Script -> CH - Registration - Verify Token exists \", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(response.name).to.eql('CH - Registration - Verify Token');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/scripts/b9d881b7-75c0-4cd6-8ede-e42193665657",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"scripts",
										"b9d881b7-75c0-4cd6-8ede-e42193665657"
									]
								}
							},
							"response": []
						},
						{
							"name": "CH - Change Full Name - Confirmation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Script -> CH - Change Full Name - Confirmation exists \", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(response.name).to.eql('CH - Change Full Name - Confirmation');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/scripts/4d27c5a1-e42c-47cb-90c1-d411902eb674",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"scripts",
										"4d27c5a1-e42c-47cb-90c1-d411902eb674"
									]
								}
							},
							"response": []
						},
						{
							"name": "CH - Callback to show recipient Phone Number",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Script -> CH - Callback to show recipient Phone Number exists \", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(response.name).to.eql('CH - Callback to show recipient Phone Number');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/scripts/24b1421b-8130-4eae-a999-a44dc6e94fa6",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"scripts",
										"24b1421b-8130-4eae-a999-a44dc6e94fa6"
									]
								}
							},
							"response": []
						},
						{
							"name": "CH - Reset Password - Create token and Send Email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Script -> CH - Reset Password - Create token and Send Email exists \", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(response.name).to.eql('CH - Reset Password - Create token and Send Email');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/scripts/c056951c-622e-11eb-ae93-0242ac130002",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"scripts",
										"c056951c-622e-11eb-ae93-0242ac130002"
									]
								}
							},
							"response": []
						},
						{
							"name": "CH - Phone Number entered by user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Script -> CH - Phone Number entered by user exists \", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(response.name).to.eql('CH - Phone Number entered by user');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/scripts/000c65e1-c9c6-4edb-96d2-298a9b152b40",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"scripts",
										"000c65e1-c9c6-4edb-96d2-298a9b152b40"
									]
								}
							},
							"response": []
						},
						{
							"name": "CH - Login Error Message",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Script -> CH - Login Error Message exists \", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(response.name).to.eql('CH - Login Error Message');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/scripts/188d3f9d-ca04-4df7-bcd7-eed3fe27e21e",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"scripts",
										"188d3f9d-ca04-4df7-bcd7-eed3fe27e21e"
									]
								}
							},
							"response": []
						},
						{
							"name": "CH - Change Password - Confirmation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Script -> CH - Change Password - Confirmation exists \", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(response.name).to.eql('CH - Change Password - Confirmation');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/scripts/1a7ced42-93f3-4739-a9b8-b773b489ed1d",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"scripts",
										"1a7ced42-93f3-4739-a9b8-b773b489ed1d"
									]
								}
							},
							"response": []
						},
						{
							"name": "CH - Change Password - Input Collector",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Script -> CH - Change Password - Input Collector exists \", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(response.name).to.eql('CH - Change Password - Input Collector');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/scripts/52014433-9b16-4f21-a00c-1ab477c918f8",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"scripts",
										"52014433-9b16-4f21-a00c-1ab477c918f8"
									]
								}
							},
							"response": []
						},
						{
							"name": "CH - Reset Password - Verify Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Script -> CH - Reset Password - Verify Token exists \", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(response.name).to.eql('CH - Reset Password - Verify Token');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/scripts/7fc79258-1c54-4df3-baa4-b51850ef3474",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"scripts",
										"7fc79258-1c54-4df3-baa4-b51850ef3474"
									]
								}
							},
							"response": []
						},
						{
							"name": "CH - Send MFA text",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Script -> CH - Send MFA text exists \", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(response.name).to.eql('CH - Send MFA text');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/scripts/b276c566-622e-11eb-ae93-0242ac130002",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"scripts",
										"b276c566-622e-11eb-ae93-0242ac130002"
									]
								}
							},
							"response": []
						},
						{
							"name": "CH - Change Password - Error Message",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Script -> CH - Change Password - Error Message exists \", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(response.name).to.eql('CH - Change Password - Error Message');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/scripts/04e99c63-2875-43ca-9e5f-84832bf59a34",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"scripts",
										"04e99c63-2875-43ca-9e5f-84832bf59a34"
									]
								}
							},
							"response": []
						},
						{
							"name": "CH - Prompt for Company Auth Code",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Script -> CH - Prompt for Company Auth Code exists \", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(response.name).to.eql('CH - Prompt for Company Auth Code');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/scripts/ad7a63a6-fae2-46c0-be70-bec1f059f064",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"scripts",
										"ad7a63a6-fae2-46c0-be70-bec1f059f064"
									]
								}
							},
							"response": []
						},
						{
							"name": "CH - Login Load Password For Patch",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Script -> CH - Login Load Password For Patch exists \", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(response.name).to.eql('CH - Login Load Password For Patch');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/scripts/7b79ce34-5ea5-4705-9249-d3b98b524f60",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"scripts",
										"7b79ce34-5ea5-4705-9249-d3b98b524f60"
									]
								}
							},
							"response": []
						},
						{
							"name": "CH - Fetch Hashed Password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Script -> CH - Fetch Hashed Password exists \", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(response.name).to.eql('CH - Fetch Hashed Password');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/scripts/137e1fd5-19f4-425d-96eb-2a8c20cabcf8",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"scripts",
										"137e1fd5-19f4-425d-96eb-2a8c20cabcf8"
									]
								}
							},
							"response": []
						},
						{
							"name": "CH - Update Legacy Password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Script -> CH - Update Legacy Password exists \", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(response.name).to.eql('CH - Update Legacy Password');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/scripts/9bab9cb5-c723-4fb1-aa02-825aaaa7a266",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"scripts",
										"9bab9cb5-c723-4fb1-aa02-825aaaa7a266"
									]
								}
							},
							"response": []
						},
						{
							"name": "CH - Callback to show OTP not valid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Script -> CH - Callback to show OTP not valid exists \", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(response.name).to.eql('CH - Callback to show OTP not valid');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/scripts/bf6c0ac8-8e13-4f11-8d99-d01b23e02a5c",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"scripts",
										"bf6c0ac8-8e13-4f11-8d99-d01b23e02a5c"
									]
								}
							},
							"response": []
						},
						{
							"name": "CH - Registration - Set User Existing Flag",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Script -> CH - Registration - Set User Existing Flag exists \", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(response.name).to.eql('CH - Registration - Set User Existing Flag');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/scripts/d67457d4-b0ed-4b77-9ca1-23295246c9fd",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"scripts",
										"d67457d4-b0ed-4b77-9ca1-23295246c9fd"
									]
								}
							},
							"response": []
						},
						{
							"name": "CH - Check Password Status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Script -> CH - Check Password Status exists \", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(response.name).to.eql('CH - Check Password Status');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/scripts/2c9f9d6a-4b93-493a-bf0d-44fe53d8d1d1",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"scripts",
										"2c9f9d6a-4b93-493a-bf0d-44fe53d8d1d1"
									]
								}
							},
							"response": []
						},
						{
							"name": "CH - Callback to prompt for Company Number",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Script -> CH - Callback to prompt for Company Number exists \", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(response.name).to.eql('CH - Callback to prompt for Company Number');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/scripts/077cd9c1-9996-44e5-8098-e584a89a1327",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"scripts",
										"077cd9c1-9996-44e5-8098-e584a89a1327"
									]
								}
							},
							"response": []
						},
						{
							"name": "CH - Callback to show recipient phone number or mail",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Script -> CH - Callback to show recipient phone number or mail exists \", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(response.name).to.eql('CH - Callback to show recipient phone number or mail');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/scripts/ace951c8-d169-4426-9357-d5b44e0aa728",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"scripts",
										"ace951c8-d169-4426-9357-d5b44e0aa728"
									]
								}
							},
							"response": []
						},
						{
							"name": "CH - Check Password Is Set",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Script ->CH - Check Password Is Set exists \", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(response.name).to.eql('CH - Check Password Is Set');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/scripts/22c97af8-59e4-49db-a986-c9bedb556d65",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"scripts",
										"22c97af8-59e4-49db-a986-c9bedb556d65"
									]
								}
							},
							"response": []
						},
						{
							"name": "CH - Prompt for Company Number",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Script -> CH - Prompt for Company Number exists \", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(response.name).to.eql('CH - Prompt for Company Number');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/scripts/838ab622-d892-44e6-a5c5-f45238aed210",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"scripts",
										"838ab622-d892-44e6-a5c5-f45238aed210"
									]
								}
							},
							"response": []
						},
						{
							"name": "CH - Registration - Sent Email Confirmation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Script -> CH - Registration - Sent Email Confirmation exists \", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(response.name).to.eql('CH - Registration - Sent Email Confirmation');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/scripts/8b203967-fa57-4ce2-9dad-2f387ca52a61",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"scripts",
										"8b203967-fa57-4ce2-9dad-2f387ca52a61"
									]
								}
							},
							"response": []
						},
						{
							"name": "CH - Check for session",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Script -> CH - Check for session exists \", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(response.name).to.eql('CH - Check for session');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/scripts/c4001e02-469c-4cc4-bf95-9f43d7e46568",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"scripts",
										"c4001e02-469c-4cc4-bf95-9f43d7e46568"
									]
								}
							},
							"response": []
						},
						{
							"name": "CH - Callback for User Already Exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Script -> CH - Callback for User Already Exists exists \", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(response.name).to.eql('CH - Callback for User Already Exists');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/scripts/181f73fa-ec30-4ef4-b78a-9790a4918b23",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"scripts",
										"181f73fa-ec30-4ef4-b78a-9790a4918b23"
									]
								}
							},
							"response": []
						},
						{
							"name": "CH - Update Legacy Password Error Message",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Script -> CH - Update Legacy Password Error Message exists \", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(response.name).to.eql('CH - Update Legacy Password Error Message');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/scripts/13e9d2a5-e93a-47f2-894d-4d732918c383",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"scripts",
										"13e9d2a5-e93a-47f2-894d-4d732918c383"
									]
								}
							},
							"response": []
						},
						{
							"name": "CH - Validate credential",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Script -> CH - Validate credential exists \", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(response.name).to.eql('CH - Validate credential');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/scripts/65d2099f-9583-47d3-8303-8051709cb436",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"scripts",
										"65d2099f-9583-47d3-8303-8051709cb436"
									]
								}
							},
							"response": []
						},
						{
							"name": "CH - Change Password - Load New Password for Patch",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Script -> CH - Change Password - Load New Password for Patch exists \", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(response.name).to.eql('CH - Change Password - Load New Password for Patch');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/scripts/84caf8b3-813a-4998-85ff-a3dd8eee4bcf",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"scripts",
										"84caf8b3-813a-4998-85ff-a3dd8eee4bcf"
									]
								}
							},
							"response": []
						},
						{
							"name": "CH - Fetch Hashed Password Using Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Script -> CH - Fetch Hashed Password Using Token exists \", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(response.name).to.eql('CH - Fetch Hashed Password Using Token');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/scripts/c576e0b6-f954-4c5d-b179-1dea2cf90f84",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"scripts",
										"c576e0b6-f954-4c5d-b179-1dea2cf90f84"
									]
								}
							},
							"response": []
						},
						{
							"name": "CH - Get Company Data By Company Number",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Script -> CH - Get Company Data By Company Number exists \", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(response.name).to.eql('CH - Get Company Data By Company Number');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/scripts/55801756-11bf-493d-b49c-195488cf939a",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"scripts",
										"55801756-11bf-493d-b49c-195488cf939a"
									]
								}
							},
							"response": []
						},
						{
							"name": "CH - Get IDM Access Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Script -> CH - Get IDM Access Token exists \", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(response.name).to.eql('CH - Get IDM Access Token');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/scripts/c0ab8c9c-b9b2-4bb7-b427-f10ddf9db149",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"scripts",
										"c0ab8c9c-b9b2-4bb7-b427-f10ddf9db149"
									]
								}
							},
							"response": []
						},
						{
							"name": "CH - Validate credential",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Script -> CH - Validate credential exists \", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(response.name).to.eql('CH - Validate credential');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/scripts/65d2099f-9583-47d3-8303-8051709cb436",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"scripts",
										"65d2099f-9583-47d3-8303-8051709cb436"
									]
								}
							},
							"response": []
						},
						{
							"name": "CH - Create Notify JWT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Script -> CH - Create Notify JWT exists \", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(response.name).to.eql('CH - Create Notify JWT');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "cookie",
										"value": "{{cookie_Name}} = {{session_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{platformUrl}}/am/json/{{realm}}/scripts/df67765e-df3a-4503-9ba5-35c992b39259",
									"host": [
										"{{platformUrl}}"
									],
									"path": [
										"am",
										"json",
										"{{realm}}",
										"scripts",
										"df67765e-df3a-4503-9ba5-35c992b39259"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "User Roles",
			"item": [
				{
					"name": "Lender",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"User -> Lender exists \", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(response.name).to.eql('Lender');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "cookie",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{platformUrl}}/openidm/managed/alpha_role/40a4ce31-21ac-4a5c-8dda-07760f0020f8",
							"host": [
								"{{platformUrl}}"
							],
							"path": [
								"openidm",
								"managed",
								"alpha_role",
								"40a4ce31-21ac-4a5c-8dda-07760f0020f8"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Internal Roles",
			"item": [
				{
					"name": "IDAM_BUSINESS_SUPPORT",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"User -> IDAM_BUSINESS_SUPPORT exists \", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(response.name).to.eql('IDAM_BUSINESS_SUPPORT');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "cookie",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{platformUrl}}/openidm/internal/role/eee7a778-ca4c-4679-9ab9-82bd91164b53",
							"host": [
								"{{platformUrl}}"
							],
							"path": [
								"openidm",
								"internal",
								"role",
								"eee7a778-ca4c-4679-9ab9-82bd91164b53"
							]
						}
					},
					"response": []
				},
				{
					"name": "IDAM_FRONT_END_SUPPORT",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"User -> IDAM_FRONT_END_SUPPORT exists \", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(response.name).to.eql('IDAM_FRONT_END_SUPPORT');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "cookie",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{platformUrl}}/openidm/internal/role/15007107-ef48-4113-a71f-cc1905354a30",
							"host": [
								"{{platformUrl}}"
							],
							"path": [
								"openidm",
								"internal",
								"role",
								"15007107-ef48-4113-a71f-cc1905354a30"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Terms and Conditions",
			"item": [
				{
					"name": "T&C",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"const jsonData = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Tearms and condition contains correct entries(active version)\", () => {\r",
									"\r",
									"    const expectedVersion = pm.environment.get('version');\r",
									"\r",
									"    pm.expect(jsonData.active).to.be.eql(expectedVersion);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "cookie",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{platformUrl}}/openidm/config/selfservice.terms",
							"host": [
								"{{platformUrl}}"
							],
							"path": [
								"openidm",
								"config",
								"selfservice.terms"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Connectors",
			"item": [
				{
					"name": "CHSUser Connector",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"const response = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Connector -> CHSUser exists \", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(response._id).to.eql('provisioner.openicf/CHSUser');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{platformUrl}}/openidm/config/provisioner.openicf/CHSUser",
							"host": [
								"{{platformUrl}}"
							],
							"path": [
								"openidm",
								"config",
								"provisioner.openicf",
								"CHSUser"
							]
						}
					},
					"response": []
				},
				{
					"name": "CHSRoles Connector",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"const response = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Connector -> CHSRoles exists \", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(response._id).to.eql('provisioner.openicf/CHSRoles');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{platformUrl}}/openidm/config/provisioner.openicf/CHSRoles",
							"host": [
								"{{platformUrl}}"
							],
							"path": [
								"openidm",
								"config",
								"provisioner.openicf",
								"CHSRoles"
							]
						}
					},
					"response": []
				},
				{
					"name": "CHSCompany Connector",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"const response = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Connector -> CHSRoles exists \", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(response._id).to.eql('provisioner.openicf/CHSCompany');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{platformUrl}}/openidm/config/provisioner.openicf/CHSCompany",
							"host": [
								"{{platformUrl}}"
							],
							"path": [
								"openidm",
								"config",
								"provisioner.openicf",
								"CHSCompany"
							]
						}
					},
					"response": []
				},
				{
					"name": "DSBackup Connector",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"const response = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Connector -> CHSRoles exists \", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(response._id).to.eql('provisioner.openicf/DSBackup');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{platformUrl}}/openidm/config/provisioner.openicf/DSBackup",
							"host": [
								"{{platformUrl}}"
							],
							"path": [
								"openidm",
								"config",
								"provisioner.openicf",
								"DSBackup"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"",
					"",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": []
}